<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>css笔记</title>
    <url>/article/css/</url>
    <content><![CDATA[<h2 id="css3基础"><a href="#css3基础" class="headerlink" title="css3基础"></a>css3基础</h2><ul>
<li>所有标签共有的属性<ul>
<li>id</li>
<li>class</li>
<li>title</li>
<li>style</li>
</ul>
</li>
</ul>
<h2 id="嵌套css样式"><a href="#嵌套css样式" class="headerlink" title="嵌套css样式"></a>嵌套css样式</h2><ul>
<li>内部样式<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   <span class="comment">/* 标签选择器 */</span></span><br><span class="line">   <span class="selector-tag">h1</span> &#123;</span><br><span class="line">       <span class="attribute">color</span>:<span class="number">#0ff</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
<li>外部样式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>内联样式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:#0ff;&quot;</span>&gt;</span>Linux is very much<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="css-注释"><a href="#css-注释" class="headerlink" title="css 注释"></a>css 注释</h2><ul>
<li>多行注释 （也可以做单行注释）<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="css-长度单位"><a href="#css-长度单位" class="headerlink" title="css 长度单位"></a>css 长度单位</h2><ul>
<li>px （像素）</li>
<li>em （倍数 * 16）</li>
</ul>
<h2 id="css-颜色单位"><a href="#css-颜色单位" class="headerlink" title="css 颜色单位"></a>css 颜色单位</h2><ul>
<li>英文表示</li>
<li>十六进制表示</li>
<li>十进制<ul>
<li>rgb(0,0,0)</li>
<li>rgba(0,0,0,0~1) // 1 完全不透明 0 完全透明</li>
</ul>
</li>
</ul>
<h2 id="css-选择器"><a href="#css-选择器" class="headerlink" title="css 选择器"></a>css 选择器</h2><h3 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h3><ul>
<li>标签选择器<blockquote>
<p>给要添加样式的标签，添加样式就叫标签选择器</p>
</blockquote>
</li>
<li>类选择器<blockquote>
<p>根据标签的 class . 添加样式</p>
</blockquote>
</li>
<li>id选择器<blockquote>
<p>根据标签的 id  # 添加样式</p>
</blockquote>
</li>
<li>关联选择器<blockquote>
<p>根据父标签查找子标签然后对子标签进行样式布局</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.div1</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#ff0</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>linux is very much!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>组合选择器<blockquote>
<p>同一个级别的关联选择器一起添加样式，中间用逗号’,’分隔</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.div1</span> <span class="selector-tag">p</span>, <span class="selector-class">.div2</span> <span class="selector-tag">p</span>, <span class="selector-class">.div3</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#ff0</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>linux is very much!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>linux is very much!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>linux is very much!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ul>
<li>:first-child   // 对第一个添加样式</li>
<li>:first-letter  // 对第一个单词（首字母）添加样式</li>
<li>:first-line    // 对第一行添加样式</li>
<li>:last-child   // 对最后一个添加样式</li>
<li>:nth-child(n)  //第几个意思</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">h1</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 对第三个h1 添加样式 */</span></span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><ul>
<li>a,b （组合选择器）</li>
<li>a b  （a是祖先元素，b是后代元素）</li>
<li>a &gt; b （a 是父元素，b是子元素，只有一次父子关系）</li>
<li>a + b （a标签后面的b标签，a和b是平级关系）</li>
</ul>
<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><ul>
<li>:hover  //鼠标移动到元素上方</li>
<li>:focus  // 表单中输入框获取焦点 input:focus {/**/}</li>
<li>::selection  //文字被选中，相当于 onselect() 事件</li>
</ul>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul>
<li>[id]</li>
<li>[id=user1]</li>
<li>[name~=user] // name属性包含 us 值, us必须是一个词不能是字母</li>
<li>[name|=en] // name属性值以en开头的 name=”en-xx”</li>
<li>[name^=us] //name属性值以us开头</li>
<li>[name&amp;=us] //name属性值结尾us开头</li>
<li>[name*=us] //name属性值包含us相关内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* [id][class] 作用于第二个h1标签*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">h1</span><span class="selector-attr">[id]</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 样式作用于下面前两个h1 标签 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>:<span class="number">#aaf</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1-id1&quot;</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1-id2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;h1-class1&quot;</span>&gt;</span>2222222<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h2 id="css优先级"><a href="#css优先级" class="headerlink" title="css优先级"></a>css优先级</h2><ul>
<li>排序<blockquote>
<p><strong>内联样式》id选择器 》 class 选择器 》 标签选择器</strong></p>
</blockquote>
</li>
<li>提升优先级<blockquote>
<p>!important  <code>color:#f00!important;</code></p>
</blockquote>
</li>
</ul>
<h2 id="css3-常用操作"><a href="#css3-常用操作" class="headerlink" title="css3 常用操作"></a>css3 常用操作</h2><h3 id="字体与颜色"><a href="#字体与颜色" class="headerlink" title="字体与颜色"></a>字体与颜色</h3><ul>
<li>font-size ,默认16px</li>
<li>font-family</li>
<li>font-style ，italic 倾斜</li>
<li>font-weight , bold 粗体</li>
</ul>
<h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><ul>
<li>字间距 letter-spacing</li>
<li>词间距 word-spacing</li>
<li>下划线 text-decoration:underline|overline|line-through|none</li>
<li>文本对齐 text-align:left|right|center , 行标签不能使用</li>
<li>文本缩进 text-indent , 首行缩进</li>
<li>文本高度 line-height , 作用于块标签</li>
<li>文本颜色 color</li>
<li>文本自动换行 word-break:break-all;</li>
</ul>
<h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><ul>
<li>background-color</li>
<li>background-image:url(‘bg.png’)</li>
<li>background-repeat:no-repeat,</li>
<li>background-attachment:fixed, 滚动</li>
<li>background-position:xpx ypx|center center， 定位</li>
</ul>
<h3 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h3><ul>
<li>border-style<ul>
<li>solid 实线</li>
<li>dotted 虚线</li>
<li>dashed 横线</li>
<li>none</li>
<li>double 双线，要有宽度值</li>
<li>groove 凹槽</li>
<li>ridge 凸起</li>
<li>inset</li>
<li>outset</li>
</ul>
</li>
</ul>
<ul>
<li>border-width ，不占用div本身的宽高</li>
<li>border-color</li>
<li>border-left|right|top|bottom-style</li>
<li>border-left|right|top|bottom-color</li>
<li>border-left|right|top|bottom-width</li>
</ul>
<h3 id="鼠标光标属性"><a href="#鼠标光标属性" class="headerlink" title="鼠标光标属性"></a>鼠标光标属性</h3><ul>
<li>cursor:<ul>
<li>十字  crosshair +</li>
<li>小手  pointer</li>
<li>文本  text</li>
<li>等待  wait</li>
<li>默认  default</li>
<li>帮助  help ?</li>
</ul>
</li>
</ul>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><ul>
<li>list-style-type<ul>
<li>disc 实点</li>
<li>circle 小圆圈</li>
<li>square 实心小方块</li>
<li>none</li>
<li>decimal 实数 1,2,3,4…</li>
<li>lower-roman 小写罗马数字</li>
<li>upper-roman 大写罗马数字</li>
<li>lower-alpha 小写英文单词</li>
<li>upper-alpha 大写英文单词</li>
</ul>
</li>
<li>text-decoration:none</li>
</ul>
<h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><ul>
<li>height</li>
<li>width</li>
<li>max-height</li>
<li>max-widht</li>
<li>main-height</li>
<li>main-width</li>
</ul>
<h3 id="textarea-样式"><a href="#textarea-样式" class="headerlink" title="textarea 样式"></a>textarea 样式</h3><ul>
<li>去除输入框右下角拖放按钮<ul>
<li>resize:none;</li>
</ul>
</li>
</ul>
<h3 id="样式继承"><a href="#样式继承" class="headerlink" title="样式继承"></a>样式继承</h3><ul>
<li>字标签 文本和<strong>字体</strong>样式，一般情况下会继承父标签</li>
</ul>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ul>
<li>border-spacing  //表格之间的空隙</li>
<li>border-collapse:collapse; //表格边框是否合并</li>
</ul>
<h3 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h3><ul>
<li>坐标决定因素（可以正可以负）<ul>
<li>left top</li>
<li>left bottom</li>
<li>right top</li>
<li>right bottom</li>
</ul>
</li>
</ul>
<ul>
<li>类型<ul>
<li>绝对 absolute</li>
<li>相对 relative,坐标位置（0，0）是初始化时的位置</li>
<li>固定 fixed</li>
</ul>
</li>
</ul>
<ul>
<li>绝对定位的高<ul>
<li>z-index:1</li>
</ul>
</li>
<li>父相对子绝对<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"> <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="css">    widht:<span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>:<span class="number">#888</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="css">    widht:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>:<span class="number">#f00</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="css">  &#125; </span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br></pre></td></tr></table></figure></li>
<li>定位到正中央<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"> <span class="comment">/* 小盒子在大盒子正中央 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>:<span class="number">#0ff</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>:<span class="number">#0ff</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-left</span>:-<span class="number">25px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>:-<span class="number">25px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h2><ul>
<li>body 有上下左右 8个px的外边距<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>h1 21px</li>
<li>p  16px</li>
<li>ul m:16px p:40px</li>
</ul>
<h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><ul>
<li>margin<ul>
<li>top</li>
<li>left</li>
<li>right</li>
<li>bottom</li>
</ul>
</li>
<li>外边距合并取最大的<ul>
<li>两个div ，第一个div的下边距是100px，第二个div上边距是100px，结果最后显示的边距是100px</li>
</ul>
</li>
</ul>
<h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><ul>
<li>padding<ul>
<li>left</li>
<li>top</li>
<li>right</li>
<li>bottom</li>
</ul>
</li>
</ul>
<ul>
<li>会改变盒子的原来的大小</li>
<li>顺时针： 50px 30px 10px  对应的是上 左右 下</li>
<li>块标签居中<ul>
<li><strong>margin: 0px auto;</strong></li>
</ul>
</li>
</ul>
<h2 id="浮动和清除浮动"><a href="#浮动和清除浮动" class="headerlink" title="浮动和清除浮动"></a>浮动和清除浮动</h2><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><ul>
<li>float<ul>
<li>left</li>
<li>right</li>
</ul>
</li>
<li>特点<ul>
<li>释放文档流中的占位</li>
<li>漂浮到文档流上方</li>
<li>块标签特征会消失</li>
<li>浮动的方向是垂直往上符</li>
</ul>
</li>
</ul>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ul>
<li>大盒子中的所有小盒子都浮动且大盒子没有浮动，大盒子的高度为0</li>
<li>大盒子也浮动起来，大盒子的高和宽为小盒子加在一起的宽和高</li>
<li>一般放置在最后一个单独的div上，目的是撑开大盒子</li>
<li>clear<ul>
<li>both 左右两侧都清除</li>
</ul>
</li>
</ul>
<ul>
<li>示例<ul>
<li>大盒子不用指定高度，让里面的盒子撑开</li>
<li>公用的样式<ul>
<li>margin:0px;</li>
<li>padding:0px;</li>
</ul>
</li>
<li>div中有image标签时会多出4个px的大小，解决是 div 添加样式：display:block</li>
</ul>
</li>
</ul>
<h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2><ul>
<li>overflow:auto<ul>
<li>auto //让外面的盒子自动出现滚动条，将盒子中的内容完全包含在其中</li>
<li>hidden //干掉超过盒子大小的内容，不予以显示</li>
<li>scroll</li>
</ul>
</li>
<li>overflow-x:scroll;</li>
<li>overflow-y:scroll;</li>
</ul>
<h2 id="显示和隐藏"><a href="#显示和隐藏" class="headerlink" title="显示和隐藏"></a>显示和隐藏</h2><ul>
<li>display   // 下文标签会流动到上文的位置，被隐藏的位置会被释放<ul>
<li>none  隐藏</li>
<li>block 显示，块标签</li>
<li>inline 显示，行标签</li>
</ul>
</li>
<li>visibility  // 下文标签不会流动到上文的位置，被隐藏的位置不会被释放<ul>
<li>visible 显示</li>
<li>hidden  隐藏</li>
</ul>
</li>
</ul>
<h2 id="CSS3-新增样式"><a href="#CSS3-新增样式" class="headerlink" title="CSS3 新增样式"></a>CSS3 新增样式</h2><h3 id="边框样式"><a href="#边框样式" class="headerlink" title="边框样式"></a>边框样式</h3><ul>
<li>border-radius 半径，边框圆角，128px是一个圆形<ul>
<li>10px 50px ，对角线左上右下是10px</li>
<li>10px 50px 100px , 对角线是 10px 100px</li>
<li>10px 20px 30px 40px ，顺时针</li>
</ul>
</li>
<li>box-shadow<ul>
<li>5px 5px 5px #f00 , x,y,阴影，</li>
</ul>
</li>
<li>border-image<ul>
<li>url(border.png) 30 30 round, 地址，裁剪的宽度，高度，round环绕<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">15px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="string">border.png</span>) <span class="number">30</span> <span class="number">30</span> round;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h3><ul>
<li>background-size  大小</li>
<li>background-origin  位置<ul>
<li>border-box</li>
<li>padding-box</li>
<li>content-box</li>
</ul>
</li>
</ul>
<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><ul>
<li>text-shadow 文字阴影<ul>
<li>5px 5px 5px #fff;</li>
</ul>
</li>
<li>word-wrap  词文字折行<ul>
<li>break-world</li>
</ul>
</li>
</ul>
<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><ul>
<li>@font-face 自定义字体<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>:xiao;</span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;xiao.otf&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>:xiao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="多（列）栏样式"><a href="#多（列）栏样式" class="headerlink" title="多（列）栏样式"></a>多（列）栏样式</h3><ul>
<li>column-count</li>
<li>column-gap</li>
<li>column-rule<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">column-count: 3; 分成多少栏</span><br><span class="line">column-gap: 10px; 每个栏之间的间隔</span><br><span class="line">column-rule: 2px solid #f00;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="轮廓样式"><a href="#轮廓样式" class="headerlink" title="轮廓样式"></a>轮廓样式</h3><ul>
<li>outline<ul>
<li>2px solid #0ff;</li>
</ul>
</li>
<li>outline-offset:20px;</li>
</ul>
<h3 id="2D样式"><a href="#2D样式" class="headerlink" title="2D样式"></a>2D样式</h3><ul>
<li>transform<ul>
<li>translate()  移动坐标，<em>物体斜着跑</em><ul>
<li>translate(30px,50px)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:translate(30px,50px);</span><br><span class="line"></span><br><span class="line">transform:rotate(30deg) translate(30px,50px);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>rotate()  旋转角度<ul>
<li>rotate(30deg)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:rotate(30deg);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>scale(), 中心延伸，放大<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* x放大2倍，y放大3倍 */</span><br><span class="line">transform:scale(2,3)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="3D样式"><a href="#3D样式" class="headerlink" title="3D样式"></a>3D样式</h3><ul>
<li>transform<ul>
<li>rotateX(30deg)</li>
<li>rotateY(30deg)</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-CURL</title>
    <url>/article/curl/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><a href="https://www.php.net/manual/zh/function.curl-init.php,&quot;CURL&quot;">官网</a></p>
<p>CURL是利用URL语法在命令行下工作的开源文件传输工具</p>
<p>优点：</p>
<ul>
<li>基于libcurl</li>
<li>返回代码</li>
<li>多协议支持</li>
<li>支持multipart/form-data</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>在PHP官网下载对应系统的exe安装包后，解压到指定目录后，我们可以在ext目录下看到php的相关扩展，curl扩展是自动安装好的</p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo apt-get install php8.0-curl</span></span><br></pre></td></tr></table></figure>
<h3 id="macos"><a href="#macos" class="headerlink" title="macos"></a>macos</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew search php</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install php</span></span><br></pre></td></tr></table></figure>
<h3 id="pecl"><a href="#pecl" class="headerlink" title="pecl"></a>pecl</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pecl search curl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pecl install curl</span></span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_init(<span class="keyword">string</span> <span class="variable">$url</span> = <span class="literal">null</span>) : resource <span class="comment">// 初始化curl会话，返回资源类型；url访问的url资源，可以为空</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_setopt(resource <span class="variable">$ch</span> , <span class="keyword">int</span> <span class="variable">$option</span> , <span class="keyword">mixed</span> <span class="variable">$value</span> ) : <span class="keyword">bool</span> <span class="comment">// 为curl设置相应常量, $ch 是curl_init返回的curl句柄</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_setopt_array(resource <span class="variable">$ch</span> , <span class="keyword">array</span> <span class="variable">$options</span>) : <span class="keyword">bool</span> <span class="comment">// 批量设置， $option是一个数组</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_reset(resource <span class="variable">$ch</span>) : <span class="keyword">void</span> <span class="comment">// 重置一个curl会话，前面所有的设置都会被取消</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_errno(resource <span class="variable">$ch</span>) : <span class="keyword">int</span> <span class="comment">// 返回最后一次 cURL 操作的错误代码</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_error(resource <span class="variable">$ch</span>) : <span class="keyword">string</span> <span class="comment">// 返回最近一次 cURL 操作的文本错误详情</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_exec (resource <span class="variable">$ch</span>) : <span class="keyword">mixed</span> <span class="comment">// 执行给定的 cURL 会话</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_close(resource <span class="variable">$ch</span>) : <span class="keyword">void</span> <span class="comment">// 关闭 cURL 会话并且释放所有资源。cURL 句柄 ch 也会被删除</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_getinfo (resource <span class="variable">$ch</span>, <span class="keyword">int</span> <span class="variable">$opt</span> = <span class="number">0</span> ) : <span class="keyword">mixed</span> <span class="comment">// 获取最后一次传输的相关信息</span></span><br></pre></td></tr></table></figure>
<p>$opt, 这个参数可能是以下常量之一:</p>
<ul>
<li><code>CURLINFO_EFFECTIVE_URL</code> - 最后一个有效的URL地址</li>
<li><code>CURLINFO_HTTP_CODE</code> - 最后一个收到的HTTP代码</li>
<li><code>CURLINFO_FILETIME</code> - 远程获取文档的时间，如果无法获取，则返回值为“-1”</li>
<li><code>CURLINFO_TOTAL_TIME</code> - 最后一次传输所消耗的时间</li>
<li><code>CURLINFO_NAMELOOKUP_TIME</code> - 名称解析所消耗的时间</li>
<li><code>CURLINFO_CONNECT_TIME</code> - 建立连接所消耗的时间</li>
<li><code>CURLINFO_PRETRANSFER_TIME</code> - 从建立连接到准备传输所使用的时间</li>
<li><code>CURLINFO_STARTTRANSFER_TIME</code> - 从建立连接到传输开始所使用的时间</li>
<li><code>CURLINFO_REDIRECT_TIME</code> - 在事务传输开始前重定向所使用的时间</li>
<li><code>CURLINFO_SIZE_UPLOAD</code> - 以字节为单位返回上传数据量的总值</li>
<li><code>CURLINFO_SIZE_DOWNLOAD</code> - 以字节为单位返回下载数据量的总值</li>
<li><code>CURLINFO_SPEED_DOWNLOAD</code> - 平均下载速度</li>
<li><code>CURLINFO_SPEED_UPLOAD</code> - 平均上传速度</li>
<li><code>CURLINFO_HEADER_SIZE</code> - header部分的大小</li>
<li><code>CURLINFO_HEADER_OUT</code> - 发送请求的字符串</li>
<li><code>CURLINFO_REQUEST_SIZE</code> - 在HTTP请求中有问题的请求的大小</li>
<li><code>CURLINFO_SSL_VERIFYRESULT</code> - 通过设置<code>CURLOPT_SSL_VERIFYPEER</code>返回的SSL证书验证请求的结果</li>
<li><code>CURLINFO_CONTENT_LENGTH_DOWNLOAD</code> - 从<code>Content-Length:</code> field中读取的下载内容长度</li>
<li><code>CURLINFO_CONTENT_LENGTH_UPLOAD</code> - 上传内容大小的说明</li>
<li><code>CURLINFO_CONTENT_TYPE</code> - 下载内容的<code>Content-Type:</code>值，NULL表示服务器没有发送有效的<code>Content-Type:</code> header</li>
</ul>
<p>如果 <code>opt</code> 被设置，以字符串形式返回它的值。否则，返回返回一个包含下列元素的关联数组：</p>
<ul>
<li>“url” ：网络地址</li>
<li>“content_type”：内容编码</li>
<li>“http_code”：HTTP状态码</li>
<li>“header_size”：header的大小</li>
<li>“request_size”：请求的大小</li>
<li>“filetime”：文件创建的时间</li>
<li>“ssl_verify_result”：SSL验证的结果</li>
<li>“redirect_count”：跳转计数</li>
<li>“total_time”：总耗时</li>
<li>“namelookup_time”：DNS查询耗时</li>
<li>“connect_time”：等待链接耗时</li>
<li>“pretransfer_time”：传输前准备耗时</li>
<li>“size_upload”：上传数据的大小</li>
<li>“size_download”：下载数据的大小</li>
<li>“speed_download”：下载速度</li>
<li>“speed_upload”：上传速度</li>
<li>“download_content_length”：下载内容的长度</li>
<li>“upload_content_length”：上传内容的长度</li>
<li>“starttransfer_time”：开始传输的时间表</li>
<li>“redirect_time”：重定向耗时</li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul>
<li><code>CURLOPT_HEADER</code> (integer)，将头文件信息作为数据流输出</li>
<li><code>CURLOPT_POST</code> (integer)，发送POST请求</li>
<li><code>CURLOPT_POSTFIELDS</code>，发送POST请求时传递的参数</li>
<li><code>CURLOPT_SSL_VERIFYHOST</code> (integer)，是否进行SSL域名验证的主机</li>
<li><code>CURLOPT_SSL_VERIFYPEER</code> (integer)，不对服务器的SSL进行验证</li>
<li><code>CURLOPT_RETURNTRANSFER</code> (integer)，开启后将获取的结果返回回来不会被浏览器解析</li>
<li><code>CURLOPT_CONNECTTIMEOUT</code> (integer)，发起连接等待的时间</li>
<li><code>CURLOPT_INFILESIZE</code> (integer)，设定上传文件的大小限制，字节为单位</li>
<li><code>CURLOPT_PORT</code> (integer)，用来指定连接的端口</li>
<li><code>CURLOPT_PROXYPORT</code> (integer)，代理服务器的端口</li>
<li><code>CURLOPT_TIMEOUT</code> (integer)，设置curl允许执行的最长秒数</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">/</span><br><span class="line"> * 抓取信息</span><br><span class="line"> * @param <span class="variable">$url</span></span><br><span class="line"> * @param <span class="literal">false</span> <span class="variable">$proxyFlag</span></span><br><span class="line"> * @param <span class="keyword">array</span> <span class="variable">$proxyData</span></span><br><span class="line"> * @<span class="keyword">return</span> <span class="keyword">bool</span>|<span class="keyword">string</span></span><br><span class="line"> */</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCurl</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$proxyFlag</span> = <span class="literal">false</span>, <span class="variable">$proxyData</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$ch</span> = curl_init(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_CONNECTTIMEOUT, <span class="number">0</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="literal">false</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_TIMEOUT, <span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;https&#x27;</span> == substr(<span class="variable">$url</span>, <span class="number">0</span>,<span class="number">5</span>)) &#123;</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$proxyFlag</span>) &#123;</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_PROXY, <span class="variable">$proxyData</span>[<span class="string">&#x27;user_name&#x27;</span>] . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$proxyData</span>[<span class="string">&#x27;user_pass&#x27;</span>] . <span class="string">&#x27;@&#x27;</span> . <span class="variable">$proxyData</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_PROXYPORT, <span class="variable">$proxyData</span>[<span class="string">&#x27;port&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="keyword">if</span> (curl_errno(<span class="variable">$ch</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;err:&quot;</span> . curl_error(<span class="variable">$ch</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    curl_close(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/</span><br><span class="line"> * 处理字符串中的空格</span><br><span class="line"> * @param <span class="variable">$str</span></span><br><span class="line"> * @<span class="keyword">return</span> <span class="keyword">array</span>|<span class="keyword">string</span>|<span class="keyword">string</span>[]</span><br><span class="line"> */</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerStr</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$pattern</span> = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;    &#x27;</span>, <span class="string">&quot;\t&quot;</span>, <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&#x27;&amp;nbsp;&#x27;</span>];</span><br><span class="line">    <span class="variable">$str</span> =  str_replace(<span class="variable">$pattern</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="string">&#x27;/\x&#123;00a0&#125;/u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfoByBaiKe</span>(<span class="params"><span class="variable">$baiKerInfo</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// strip_tags($match[1]) 可以使用这个函数来删除字符串中的html标签， 从字符串中去除 HTML 和 PHP 标记</span></span><br><span class="line">    <span class="variable">$basicInfo</span> = [];</span><br><span class="line">    preg_match(<span class="string">&#x27;/出品公司\&lt;\/dt\&gt;\&lt;ddclass=&quot;(.*)&quot;\&gt;(.*)\&lt;\/dd\&gt;/U&#x27;</span>, <span class="variable">$baiKerInfo</span>, <span class="variable">$match</span>);</span><br><span class="line">    var_dump(<span class="variable">$match</span>[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;https://baike.baidu.com/item/%E6%88%98%E7%8B%BC%E2%85%A1/20794668?fromtitle=%E6%88%98%E7%8B%BC2&amp;fromid=17196087&amp;fr=aladdin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = setCurl(<span class="variable">$url</span>);</span><br><span class="line"><span class="variable">$html</span> = handlerStr(<span class="variable">$result</span>);</span><br><span class="line">getInfoByBaiKe(<span class="variable">$html</span>);</span><br></pre></td></tr></table></figure>
<h2 id="CURLFile"><a href="#CURLFile" class="headerlink" title="CURLFile"></a>CURLFile</h2><p>CURLFile 应该与选项 <code>CURLOPT_POSTFIELDS</code> 一同使用用于上传文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CURLFile &#123;</span><br><span class="line">    <span class="comment">/* 属性 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> ; <span class="comment">// 待上传的文件名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mime</span> ; <span class="comment">// 上传的文件类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$postname</span> ; <span class="comment">// 上传数据中的文件名称</span></span><br><span class="line">    <span class="comment">/* 方法 */</span></span><br><span class="line">    <span class="keyword">public</span> __construct ( <span class="keyword">string</span> <span class="variable">$filename</span> , <span class="keyword">string</span> <span class="variable">$mimetype</span> = ? , <span class="keyword">string</span> <span class="variable">$postname</span> = ? )</span><br><span class="line">    <span class="keyword">public</span> getFilename ( ) : <span class="keyword">string</span> <span class="comment">// 获取上传文件的文件名</span></span><br><span class="line">    <span class="keyword">public</span> getMimeType ( ) : <span class="keyword">string</span> <span class="comment">// 获取上传文件的MIME类型</span></span><br><span class="line">    <span class="keyword">public</span> getPostFilename ( ) : <span class="keyword">string</span> <span class="comment">// 获取POST请求时使用的文件名</span></span><br><span class="line">    <span class="keyword">public</span> setMimeType ( <span class="keyword">string</span> <span class="variable">$mime</span> ) : <span class="keyword">void</span> <span class="comment">// 设置MIME类型</span></span><br><span class="line">    <span class="keyword">public</span> setPostFilename ( <span class="keyword">string</span> <span class="variable">$postname</span> ) : <span class="keyword">void</span> <span class="comment">// 设置文件名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;fj.jpg&#x27;</span>;</span><br><span class="line"><span class="variable">$curlFile</span> = <span class="keyword">new</span> CURLFile(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$curl</span> = <span class="string">&quot;http://www.local.cn/curl/upload.php&quot;</span>;</span><br><span class="line"><span class="variable">$ch</span> = curl_init(<span class="variable">$curl</span>);</span><br><span class="line">curl_setopt_array(<span class="variable">$ch</span>, [</span><br><span class="line">    CURLOPT_RETURNTRANSFER =&gt; <span class="number">0</span>,</span><br><span class="line">    CURLOPT_HEADER =&gt; <span class="number">0</span>,</span><br><span class="line">    CURLOPT_SSL_VERIFYHOST =&gt; <span class="number">0</span>,</span><br><span class="line">    CURLOPT_SSL_VERIFYPEER =&gt; <span class="number">0</span>,</span><br><span class="line">    CURLOPT_POST =&gt; <span class="number">1</span>,</span><br><span class="line">    CURLOPT_POSTFIELDS =&gt; [<span class="string">&#x27;file&#x27;</span> =&gt; <span class="variable">$curlFile</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line">var_dump(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/article/data-struct-array/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>简单点来说就是把一堆数据放到一个特殊的变量中，数组中的数据元素是没有类型约束的(PHP里面，java里面一种类型的数组只能存放单一的数据类型)</li>
<li>数组是有序的，它有下标，这个有点特殊，它是从0开始的，最后一个元素的下标是数组长度-1</li>
<li>优点是快速查询</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ArrayClass</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">array</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ArrayClass constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = [];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSize</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向所有元素后添加一个新元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addLastElement</span>(<span class="params"><span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;addElement(<span class="keyword">$this</span>-&gt;size, <span class="variable">$element</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在所有元素前添加一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFirstElement</span>(<span class="params"><span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addElement(<span class="number">0</span>, <span class="variable">$element</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置插入一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addElement</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$index</span>, <span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> &lt; <span class="number">0</span> || <span class="variable">$index</span> &gt; <span class="keyword">$this</span>-&gt;size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;添加失败，索引位置错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 别的语言中可能需要进行一下数组容量的判断，超过初始化的容量需要对数组扩容，而我大PHP是不需要的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="keyword">$this</span>-&gt;size - <span class="number">1</span>; <span class="variable">$i</span> &gt;= <span class="variable">$index</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span> + <span class="number">1</span>] = <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="variable">$index</span>] = <span class="variable">$element</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取索引位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIndexElement</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$index</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> &lt; <span class="number">0</span> || <span class="variable">$index</span> &gt; <span class="keyword">$this</span>-&gt;size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;索引位置错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$index</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新索引位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setIndexElement</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$index</span>, <span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> &lt; <span class="number">0</span> || <span class="variable">$index</span> &gt; <span class="keyword">$this</span>-&gt;size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;索引位置错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="variable">$index</span>] = <span class="variable">$element</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组中是否包含元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">containsElement</span>(<span class="params"><span class="variable">$element</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="keyword">$this</span>-&gt;size; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>] == <span class="variable">$element</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找元素在数组中的位置，查找失败则返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findElement</span>(<span class="params"><span class="variable">$element</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="keyword">$this</span>-&gt;size; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>] == <span class="variable">$element</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数组中删除第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFirstElement</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;removeIndexElement(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数组中删除最后一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeLastElement</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;removeIndexElement(<span class="keyword">$this</span>-&gt;size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数组中删除元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params"><span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$elementIndex</span> = <span class="keyword">$this</span>-&gt;findElement(<span class="variable">$element</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$elementIndex</span> != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;removeIndexElement(<span class="variable">$elementIndex</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定位置上的元素并返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeIndexElement</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$index</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> &lt; <span class="number">0</span> || <span class="variable">$index</span> &gt; <span class="keyword">$this</span>-&gt;size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;索引位置错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$element</span> = <span class="keyword">$this</span>-&gt;data[<span class="variable">$index</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$index</span> + <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="keyword">$this</span>-&gt;size; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span> - <span class="number">1</span>] = <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$element</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * echo $obj 时触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = sprintf(<span class="string">&quot;Array:size=%d&quot;</span>, <span class="keyword">$this</span>-&gt;size);</span><br><span class="line">        <span class="variable">$result</span> .= <span class="string">&quot;,data is [&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="keyword">$this</span>-&gt;size; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> != <span class="keyword">$this</span>-&gt;size - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span> .= <span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span> .= <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h3><ul>
<li><p><code>addLastElement($elemtn)</code>方法的时间复杂度是$O(1)$</p>
</li>
<li><p><code>addFirstElement($elemtn)</code>方法的时间复杂度是$O(n)$</p>
</li>
<li><code>addElement($index, $elemtn)</code>方法的时间复杂度是$O(n)$</li>
</ul>
<p>总的来说，添加操作的时间复杂度是$O(n)$</p>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><ul>
<li><p><code>removeLastElement($elemtn)</code>方法的时间复杂度是$O(1)$</p>
</li>
<li><p><code>removeFirstElement($elemtn)</code>方法的时间复杂度是$O(n)$</p>
</li>
<li><code>removeIndexElement($index, $elemtn)</code>方法的时间复杂度是$O(n)$</li>
</ul>
<p>总的来说，删除操作的时间复杂度是$O(n)$</p>
<h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><ul>
<li><code>setIndexElement($index, $elemtn)</code>方法的时间复杂度是$O(1)$</li>
</ul>
<h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><ul>
<li><code>getIndexElement($index)</code>方法的时间复杂度是$O(1)$</li>
<li><code>containsElement($element)</code>方法的时间复杂度是$O(n)$</li>
<li><code>findElement($element)</code>方法的时间复杂度是$O(n)$</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>增：$O(n)$</li>
<li>删：$O(n)$</li>
<li>改：已知索引$O(1)$；未知索引$O(n)$</li>
<li>查：已知索引$O(1)$；未知索引$O(n)$</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>ArrayStudent.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ArrayStudent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStudent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="variable">$score</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ArrayStudent constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $score</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span>, <span class="keyword">int</span> <span class="variable">$score</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;score = <span class="variable">$score</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getScore</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $score</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setScore</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$score</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;score = <span class="variable">$score</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sprintf(<span class="string">&quot;&#123;ArrayStudent, name:%s, score:%d&#125;&quot;</span>, <span class="keyword">$this</span>-&gt;getName(), <span class="keyword">$this</span>-&gt;getScore());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$arr</span> = <span class="keyword">new</span> ArrayClass();</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$arr</span>-&gt;addLastElement(<span class="variable">$i</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage() . PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$arr</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$arr</span>-&gt;addElement(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$arr</span>. PHP_EOL;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$arr</span>-&gt;removeElement(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$arr</span>. PHP_EOL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">require_once</span> <span class="string">&#x27;ArrayStudent.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$arr2</span> = <span class="keyword">new</span> ArrayClass();</span><br><span class="line">    <span class="variable">$arr2</span>-&gt;addLastElement(<span class="keyword">new</span> ArrayStudent(<span class="string">&quot;Tom&quot;</span>, <span class="number">80</span>));</span><br><span class="line">    <span class="variable">$arr2</span>-&gt;addLastElement(<span class="keyword">new</span> ArrayStudent(<span class="string">&quot;Jack&quot;</span>, <span class="number">90</span>));</span><br><span class="line">    <span class="variable">$arr2</span>-&gt;addLastElement(<span class="keyword">new</span> ArrayStudent(<span class="string">&quot;Lili&quot;</span>, <span class="number">85</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$arr2</span>. PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<p>Array:size=10,data is [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>Array:size=11,data is [0, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>Array:size=10,data is [0, 100, 1, 2, 3, 4, 5, 6, 7, 9]<br>Array:size=3,data is [{ArrayStudent, name:Tom, score:80}, {ArrayStudent, name:Jack, score:90}, {ArrayStudent, name:Lili, score:85}]</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><h3 id="均摊复杂度"><a href="#均摊复杂度" class="headerlink" title="均摊复杂度"></a>均摊复杂度</h3><p>&emsp;&emsp;均摊时间复杂度是指，当大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高时，并且这些操作之间存在着前后连贯的时序关系，这时候，可以将较高时间复杂度的操作耗时均摊至时间复杂度较低的操作上。这种分析方法叫做摊还分析法，得到的复杂度叫做均摊时间复杂度。拿我们实现的数组中的addLastElement和addFirstElement方法来说的话都是$O(1)$ ,这是由于在添加数组元素是可能会涉及到数组扩容问题(扩容的时间复杂度是$O(n)$)，而PHP不需要数组扩容哈</p>
<hr>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构基础概念篇</title>
    <url>/article/data-struct-base/</url>
    <content><![CDATA[<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>&emsp;&emsp;数据是信息的载体，是描述客观事物属性的数、字符以及所有能输入到计算机中并被计算机程序识别和处理的符合的集合。数据是计算机程序加工的原料。</p>
<p>&emsp;&emsp;数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。</p>
<p>&emsp;&emsp;一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位。</p>
<p>&emsp;&emsp;结构是指各个元素之间的关系。</p>
<p>&emsp;&emsp;数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</p>
<p>&emsp;&emsp;数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</p>
<p>&emsp;&emsp;数据结构的三要素包括逻辑结构、物理结构(存储结构)和数据的运算。</p>
<h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p>是指数据之间的逻辑关系有以下几种：</p>
<ul>
<li>集合</li>
<li>线性结构</li>
<li>树形结构</li>
<li>图状结构(网状结构)</li>
</ul>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>&emsp;&emsp;集合中的各个元素除了同属于一个集合外，并没有其他关系。</p>
<p><a href="https://imgtu.com/i/cz9p2n"><img src="https://z3.ax1x.com/2021/04/25/cz9p2n.png" alt="cz9p2n.png"></a></p>
<h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h3><p>&emsp;&emsp;数据元素之间是一对一的关系。除了第一个元素，所有元素都有唯一前驱；除了最后一个元素，所有元素都有唯一后继。</p>
<p><a href="https://imgtu.com/i/cz99vq"><img src="https://z3.ax1x.com/2021/04/25/cz99vq.png" alt="cz99vq.png"></a></p>
<h3 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h3><p>&emsp;&emsp;数据元素之间是一对多关系。</p>
<p><a href="https://imgtu.com/i/cz9irV"><img src="https://z3.ax1x.com/2021/04/25/cz9irV.png" alt="cz9irV.png"></a></p>
<h3 id="图形结构"><a href="#图形结构" class="headerlink" title="图形结构"></a>图形结构</h3><p>&emsp;&emsp;数据元素之间是多对多的关系。</p>
<p><a href="https://imgtu.com/i/cz9EaF"><img src="https://z3.ax1x.com/2021/04/25/cz9EaF.png" alt="cz9EaF.png"></a></p>
<h2 id="物理结构（存储结构）"><a href="#物理结构（存储结构）" class="headerlink" title="物理结构（存储结构）"></a>物理结构（存储结构）</h2><p>数据之间的存储结构有以下几种：</p>
<ul>
<li>顺序存储</li>
<li>链式存储</li>
<li>索引存储</li>
<li>散列存储</li>
</ul>
<h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><p>&emsp;&emsp;把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p>
<h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><p>&emsp;&emsp;逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。</p>
<h3 id="索引存储"><a href="#索引存储" class="headerlink" title="索引存储"></a>索引存储</h3><p>&emsp;&emsp;在存储信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是(关键字，地址)</p>
<h3 id="散列存储"><a href="#散列存储" class="headerlink" title="散列存储"></a>散列存储</h3><p>&emsp;&emsp;根据元素的关键字直接计算出该元素的存储地址，又称哈希(Hash)存储</p>
<h2 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h2><p>&emsp;&emsp;施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型是一个值的集合和定义在此集合上的一组操作的总称。</p>
<ul>
<li>原子类型，其值不可再分的数据类型。</li>
<li>结构类型：其值可以再分解为若干成分(分量)的数据类型。</li>
</ul>
<h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>抽象数据类型(Abstract Data Type,ADT)是抽象数据组织以及与之相关的操作，ADT用数学化的语音定义数据的逻辑结构、定义运算。与具体的实现无关。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>&emsp;&emsp;程序 = 算法 + 数据结构，数据结构是要处理的信息，算法是处理信息的具体步骤。</p>
<h2 id="算法的五个特效"><a href="#算法的五个特效" class="headerlink" title="算法的五个特效"></a>算法的五个特效</h2><ul>
<li>有穷性：一个算法必须总在执行有穷步之后结束，且每一步都在有穷时间内完成。算法必须是有穷的，而程序可以是无穷的。</li>
<li>确定性：算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。</li>
<li>可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。</li>
<li>输入：一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合。</li>
<li>输出：一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量。</li>
</ul>
<h2 id="衡量算法的标准"><a href="#衡量算法的标准" class="headerlink" title="衡量算法的标准"></a>衡量算法的标准</h2><ul>
<li>正确性：算法应能够正确地解决求解问题。</li>
<li>可读性：算法应具有良好的可读性，以帮助人们理解。</li>
<li>健壮性：输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li>
<li>高效率与低存储量需求：也就是说算法执行时省内存，时间复杂度低，空间复杂度低</li>
</ul>
<h2 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h2><p>&emsp;&emsp;由两个方面决定，分别是时间复杂度和空间复杂度。</p>
<ul>
<li>最坏时间复杂度：最坏情况下算法的时间复杂度</li>
<li>平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望运行时间</li>
<li>最好时间复杂度：最好情况下算法的时间复杂度</li>
</ul>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul>
<li><p>加法规则：多项相加，只保留最高阶的项，且系数变为1</p>
</li>
<li><p>乘法规则：多项相乘，所有项都要保留</p>
</li>
<li>时间复杂度排序：常对幂指阶</li>
</ul>
<script type="math/tex; mode=display">O(1) < O(log_2^n) < O(n) < O(nlog_2^n) < O(n^2) < O(n^3) < O(2^n) < o(n!) < O(n^n)</script><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><ul>
<li>顺序执行的代码只会影响常数项，可以忽略</li>
<li>只需挑循环中的一个基本操作分析它的执行次数与n的关系</li>
<li>如果有多层嵌套循环，只需关注最深层循环循环了几次</li>
</ul>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n) &#123;</span><br><span class="line">        i = i * <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number is %d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;more than number print %d\n&quot;</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;我们假设上面算法的时间复杂度是T(n), 假定最里面的while循环循环了x次退出循环，根据while的循环条件可以导出 $2^x &gt; n$ ,计算出 $ x = log_2^n + 1$,最后可以计算出$T(n) = O(x)=O(log_2^n)$</p>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>&emsp;&emsp;空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，记作 $ S(n) = O(f(n)) $ 。    </p>
<p>&emsp;&emsp;一个算法在计算机存储器上所占用的存储空间包括存储算法本身所占用的空间，算数和输入输出所占用的存储空间以及临时占用存储空间三个部分，算法的输入输出数据所占用的存储空间是由待解决的问题来决定的，它随当前算法的不同而改变。</p>
<hr>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>线性查找</title>
    <url>/article/data-struct-linear-search/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>&emsp;&emsp;线性查找算法，就是在一个数组中查找给定的元素，如果存在返回数组元素的下标，如果不存在返回-1</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>Student.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Student</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Student constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造一个测试数据类，用来构造测试数组中的每一个元素都是类对象</p>
<p><strong>LinearSearch.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线性查找</span></span><br><span class="line"><span class="comment"> * Class LinearSearch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearSearch</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造函数防止使用new对象</span></span><br><span class="line"><span class="comment">     * LinearSearch constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		<span class="comment">// 防止new</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找数组中的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span>, <span class="variable">$target</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$data</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$data</span>[<span class="variable">$i</span>] == <span class="variable">$target</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类是是来实现线性查找算法，注意我们在search的第二个参数中传递的是mixed的类型，这个参数可以接受int，string，float，bool其中任意一个基础的数据类型</p>
<p><strong>LinearSearchTest.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;memory_limit&#x27;</span>,<span class="string">&#x27;800M&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;LinearSearch.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;Student.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;ArrayGenerator.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class LinearSearchTest</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearSearchTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试在整形数组中查找元素</span></span><br><span class="line"><span class="comment">     * phpunit --filter testIntSearch LinearSearchTest.php</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testIntSearch</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [<span class="number">24</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">66</span>, <span class="number">32</span>, <span class="number">4</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertNotSame(-<span class="number">1</span>, LinearSearch::search(<span class="variable">$data</span>, <span class="number">16</span>), <span class="string">&quot;断言出错返回的提示信息&quot;</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(-<span class="number">1</span>, LinearSearch::search(<span class="variable">$data</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(boolval(LinearSearch::search(<span class="variable">$data</span>, <span class="number">16</span>)));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(-<span class="number">1</span>, LinearSearch::search(<span class="variable">$data</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试在字符数组中查找元素</span></span><br><span class="line"><span class="comment">     * phpunit --filter testStringSearch LinearSearchTest.php     </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testStringSearch</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;哈哈&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertNotSame(-<span class="number">1</span>, LinearSearch::search(<span class="variable">$data</span>, <span class="string">&#x27;b&#x27;</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertNotSame(-<span class="number">1</span>, LinearSearch::search(<span class="variable">$data</span>, <span class="string">&#x27;哈哈&#x27;</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(-<span class="number">1</span>, LinearSearch::search(<span class="variable">$data</span>, <span class="string">&#x27;呵呵&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试在对象数组中查找元素</span></span><br><span class="line"><span class="comment">     * phpunit --filter testObjSearch LinearSearchTest.php</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testObjSearch</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&#x27;Alice&#x27;</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&#x27;Tom&#x27;</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&#x27;Jack&#x27;</span>),</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$target</span> = <span class="keyword">new</span> Student(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertNotSame(-<span class="number">1</span>, LinearSearch::search(<span class="variable">$data</span>, <span class="variable">$target</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertNotSame(-<span class="number">1</span>, LinearSearch::search(<span class="variable">$data</span>, <span class="keyword">new</span> Student(<span class="string">&#x27;xiaoLi&#x27;</span>)), <span class="string">&quot;没有找到哦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前算法的性能测试，phpunit会统计当前执行的时间</span></span><br><span class="line"><span class="comment">     * phpunit --filter testGenerateArray LinearSearchTest.php</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testGenerateArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 性能测试，还可以添加for循环执行多次</span></span><br><span class="line">        <span class="variable">$target</span> = <span class="number">10000000</span>;</span><br><span class="line">        <span class="variable">$data</span> = ArrayGenerator::generateOrderedArray(<span class="variable">$target</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(-<span class="number">1</span>, LinearSearch::search(<span class="variable">$data</span>, <span class="variable">$target</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们将使用phpunit来测试我们刚实现的查找算法，具体的phpunit使用请查阅官方文档，<a href="https://phpunit.readthedocs.io/zh_CN/latest/installation.html">传送地址</a> ， 我在每一个方法上标注了如何去执行对应的测试方法</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>&emsp;&emsp;通过以上的算法我们不难看出，当我们要查找的元素在数组中恰好是数组的第一个元素是这个时候程序只需要执行一次就退出了，这个时候的时间复杂度就是$ O(1) $, 当我们要查找的元素在数组最后一个位置或者不在数组中时，这个时候时间复杂度就和数组的长度有关系了，我们假定这个时间数组长度是n，那么此时算法的时间复杂度就是$O(n)$ ,这个就是在计算算法的时间复杂度是有最好时间复杂度和最坏时间复杂度，通常都是按最坏时间复杂度来表示的,因此线性查找算法的时间复杂度是$ O(n)$。</p>
<hr>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>常见算法复杂度</title>
    <url>/article/data-struct-example/</url>
    <content><![CDATA[<ol>
<li>一个数组中的元素可以组成那些数据对</li>
</ol>
<ul>
<li>时间复杂度： $O(n^2)$</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$data</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span> + <span class="number">1</span>; <span class="variable">$j</span> &lt; count(<span class="variable">$data</span>); <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="comment">// 获取一个数据对($data[$i],$data[$j])</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>遍历一个n*n的二维数组</li>
</ol>
<ul>
<li>时间复杂度：$O(n^2)$</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$n</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$a</span>[i][j] . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>遍历一个a*a的二维数组，上面第一个例题的变种</li>
</ol>
<ul>
<li>时间复杂度：$O(a^2)$ , 假定 n = a * a, 那么也可以表示为 $O(n)$</li>
<li>这个意思是我们需要弄清楚n到底表示的是谁</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$a</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$a</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$a</span>[i][j] . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>计算一个十进制的数字n的二进制位数</li>
</ol>
<ul>
<li>时间复杂度：$O(log_2^n)$ , 这个也可以写成 $O(logn)$</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(n) &#123;</span><br><span class="line">    n % <span class="number">2</span>; <span class="comment">// n的二进制中的一位</span></span><br><span class="line">    n /=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>数字n的所有约数</li>
</ol>
<ul>
<li>时间复杂度：$O(n)$</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> % <span class="variable">$i</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// $i是$n的一个约数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>时间复杂度：$O(\sqrt n)$</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> * <span class="variable">$i</span> &lt;= <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> % <span class="variable">$i</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// $n 和 $n/$i是$n的两个约数，需要做 相等判断例如16 = 4 * 4 这种</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>长度为n的二进制数字</li>
</ol>
<ul>
<li>时间复杂度：$O(2^n)$</li>
</ul>
<ol>
<li>长度为n的数组的所有排列</li>
</ol>
<ul>
<li>时间复杂度：$O(n!)$</li>
</ul>
<ol>
<li>判断数字n是否是偶数</li>
</ol>
<ul>
<li>时间复杂度胺：$O(1)$</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$n</span> % <span class="number">2</span> == <span class="number">0</span></span><br></pre></td></tr></table></figure>
<font color="red">

时间复杂度排序比较如下：常对幂指阶

$$  O(1) < O(logn) < O(\sqrt n) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < o(n!) < O(n^n)  $$

</font>



<hr>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/article/data-struct-insertion-sort/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><font color="red">

&emsp;&emsp;插入排序算法和我们小时候完的扑克牌是一样的道理，在玩扑克牌时我们抓一大把牌，按从左往右，依次把小的牌从右边拿出来放到左边，直到我们手中的牌开起来是有序的就算是整理结束了

</font>

<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><font color="green">

假定我们要排序的数组是[6, 4, 3, 2, 1, 5]

第一次，我们从第一个位置开始，因为处于第一个位置上，前面没有可以比较的元素，因此元素的位置不用动，这个时候数组就变成了[6, 4, 3, 2, 1, 5];

第二次，我们从第二个位置开始，和当前位置的前一个元素进行比较，发现当前位置元素小于前一个位置的元素，交换两个位置上的数，此时，我们进行比较的元素到数组开始位置了，因此这个时候数组就变成了[4, 6, 3, 2, 1, 5];

第三次，我们从第三个位置开始，和当前位置的前一个元素比较，发现当前位置元素小于当前一个位置的元素，交换两个位置上的数，此时数组是[4, 3, 6, 2, 1, 5], 交换结束后我们发现当前元素的前一个元素还是大于当前元素，因此我们需要继续交换当前元素与当前元素的前一个位置上的元素，此时数组是[3, 4, 6, 2, 1, 5];

............ ， 重复上述的动作，直到将数组排序完成为一个有序数组

</font>



<h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><font color="green">

我们以基础中的第三次排序为例来说明，此时需要排序的数组是[4, 6, 3, 2, 1, 5], 需要排序的元素是3，首先我们找一个临时变量存储当前位置上的元素即 t= 3, 接下来我们从第三个位置开始，和前一个位置上的元素就行比较发现小于这个时候我们不做交换处理而是将位置2上的值赋值给位置3上，然后继续向前比较，发现位置2上的前一个元素比我们要排序的元素大，因此我们将位置1上的元素赋值给位置2上的元素，此时已经走到数组的起始位置，此时当前的位置即数组开始位置就是我们要排序的数组3真正的插入位置，我们将数组元素第一个位置赋值我们刚开始的时候声明的临时变量，到此我们的数组就变成了[3, 4, 6, 2, 1, 5]。这个比基础中的算法至少减少3次的数据交换过程，推荐使用这个方法来进行排序。

</font>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>ArrayGenerator.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ArrayGenerator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayGenerator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成有序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">generateOrderedArray</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$n</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$data</span>[<span class="variable">$i</span>] = <span class="variable">$i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $maxNumber</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">generateRandomArray</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$n</span>, <span class="keyword">int</span> <span class="variable">$maxNumber</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$data</span>[<span class="variable">$i</span>] = mt_rand(<span class="number">0</span>, <span class="variable">$maxNumber</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SortingHelper.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SortingHelper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortingHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断数组是否有序，升序，满足前面的元素必须小于后面的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">isSorted</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$arr</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$i</span> - <span class="number">1</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>InsertionSort.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * Class InsertionSort</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * InsertionSort constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="comment">// 刚开始时第一个位置的元素默认是已经排好序的，从第二个位置开始</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &gt; <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">               <span class="comment">// 当前位置和前一个位置的值进行比较，前面的大就交换位置</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$j</span> - <span class="number">1</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$j</span>]) &#123;</span><br><span class="line">                   <span class="built_in">self</span>::swap(<span class="variable">$arr</span>, <span class="variable">$j</span> - <span class="number">1</span>, <span class="variable">$j</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort2</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$arr</span>[<span class="variable">$j</span> - <span class="number">1</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$j</span>]; <span class="variable">$j</span>--) &#123;</span><br><span class="line">                <span class="built_in">self</span>::swap(<span class="variable">$arr</span>, <span class="variable">$j</span>, <span class="variable">$j</span> -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort3</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="comment">// 取出当前位置的值赋值一个临时变量</span></span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$arr</span>[<span class="variable">$j</span> -<span class="number">1</span>] &gt; <span class="variable">$temp</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">                <span class="comment">// 当前位置元素的值大于需要排序的值时，需要将大的值赋值给当前位置，继续查找直到小于排序的值</span></span><br><span class="line">                <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span> - <span class="number">1</span>]; <span class="comment">// 此时，当前的位置还不是真正插入的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组中两个位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $j</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$arr</span>, <span class="keyword">int</span> <span class="variable">$i</span>, <span class="keyword">int</span> <span class="variable">$j</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$i</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">printArr</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$item</span> . <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>&emsp;&emsp;这个有一个与选择排序最大的不同点，那就是对于有序数组的排序处理</p>
<ul>
<li>对于无序数组，时间复杂度是$O(n^2)$</li>
<li>对于有序数组，时间复杂度是$O(n)$, 这个是对应下面的算法来说的</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="comment">// 取出当前位置的值赋值一个临时变量</span></span><br><span class="line">    <span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$arr</span>[<span class="variable">$j</span> -<span class="number">1</span>] &gt; <span class="variable">$temp</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">        <span class="comment">// 当前位置元素的值大于需要排序的值时，需要将大的值赋值给当前位置，继续查找直到小于排序的值</span></span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span> - <span class="number">1</span>]; <span class="comment">// 此时，当前的位置还不是真正插入的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总的来说，插入排序的时间复杂度还是$O(n^2)$</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;memory_limit&#x27;</span>,<span class="string">&#x27;800M&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>  <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../common/ArrayGenerator.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span>  <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../common/SortingHelper.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span>  <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../insertion_sort/InsertionSort.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertionSortTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * phpunit --filter testSort InsertionSortTest.php</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSort</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$arrLength</span> = [<span class="number">1000</span>, <span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">echo</span> PHP_EOL . <span class="string">&quot;原始插入排序:............&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arrLength</span> <span class="keyword">as</span> <span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="comment">// 无序数组</span></span><br><span class="line">            <span class="variable">$randomArr</span> = ArrayGenerator::generateRandomArray(<span class="variable">$length</span>, <span class="variable">$length</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;calcTime(<span class="variable">$randomArr</span>, <span class="variable">$length</span>, <span class="string">&quot;sort&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * phpunit --filter testSort2 InsertionSortTest.php</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSort2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$arrLength</span> = [<span class="number">1000</span>, <span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">echo</span> PHP_EOL . <span class="string">&quot;优化内层for插入排序:............&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arrLength</span> <span class="keyword">as</span> <span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="comment">// 无序数组</span></span><br><span class="line">            <span class="variable">$randomArr</span> = ArrayGenerator::generateRandomArray(<span class="variable">$length</span>, <span class="variable">$length</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;calcTime(<span class="variable">$randomArr</span>, <span class="variable">$length</span>, <span class="string">&quot;sort2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * phpunit --filter testSort3 InsertionSortTest.php</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSort3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$arrLength</span> = [<span class="number">1000</span>, <span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">echo</span> PHP_EOL . <span class="string">&quot;插入排序优化后:............&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arrLength</span> <span class="keyword">as</span> <span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="comment">// 无序数组</span></span><br><span class="line">            <span class="variable">$randomArr</span> = ArrayGenerator::generateRandomArray(<span class="variable">$length</span>, <span class="variable">$length</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;calcTime(<span class="variable">$randomArr</span>, <span class="variable">$length</span>, <span class="string">&quot;sort3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $action</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">calcTime</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span>, <span class="keyword">int</span> <span class="variable">$length</span>, <span class="keyword">string</span> <span class="variable">$action</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$startTime</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$sortArr</span> = InsertionSort::<span class="variable">$action</span>(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="variable">$endTime</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$time</span> = <span class="variable">$endTime</span> - <span class="variable">$startTime</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="keyword">$this</span>-&gt;currentSortArray(<span class="variable">$arr</span>), <span class="variable">$sortArr</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;InsertionSort::<span class="subst">$action</span>, n= <span class="subst">$length</span>: <span class="subst">$time</span> s&quot;</span> . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用系统内置的sort方法来检验实现的排序是否正确</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">currentSortArray</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我在实现插入排序中实现了3个排序方法，sort2方法是对sort方法中内存for循环的优化，sort3方法是对sort的优化方法，下面来看三个方法的执行时间</p>
<p><a href="https://imgtu.com/i/29Q8UA"><img src="https://z3.ax1x.com/2021/05/26/29Q8UA.png" alt="29Q8UA.png"></a></p>
<p>通过执行结果我们可以看到，在进过对代码优化后，同样的数组长度，执行程序所需要的时间依次减少好多，推荐使用第三种排序算法</p>
<hr>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/article/data-struct-queue/</url>
    <content><![CDATA[<hr>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/article/data-struct-selection-sort/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><font color="red">

&emsp;&emsp;选择排序法就是先从一堆数组中取出来，然后再在剩下的数组中取出最小的，一直重复直到数组中没有元素为止，这个时候新的数组就是已经排好序的呢，选择排序每次选择的都是还没处理的一堆元素中的最小元素，可能这么说有点难理解我们拿一个简单的例子来说一下，假定我们要排序的数组是[6, 4, 3, 2, 1, 5]

</font>

<font color="green">

第一次，我们从第一个位置开始，依次比较发现元素为1的数最小，将元素1的位置与当前位置进行互换，这个时候数组就变成了[1, 4, 3, 2, 6, 5];

第二次，我们从第二个位置开始，依次比较发现元素为2的数最小，将元素2的位置与当前位置进行互换，这个时候数组就变成了[1, 2, 3, 4, 6, 5];

第三次，我们从第三个位置开始，依次比较发现当前位置的元素是最小的，不进行数组元素的交换，这个时候数组就变成了[1, 2, 3, 4, 6, 5];

第四次，我们从第四个位置开始，依次比较发现当前位置的元素是最小的，不进行数组元素的交换，这个时候数组就变成了[1, 2, 3, 4, 6, 5];

第五次，我们从第五个位置开始，依次比较发现元素为5的数最小，将元素5的位置与当前位置进行互换，这个时候数组就变成了[1, 2, 3, 4, 5, 6];

第六次，发现当前元素是数组最后一个元素，不需要与其他元素进行比较，这个时候的数组已经就是有序的了

</font>

<font color="red">

&emsp;&emsp;通过以上的排序过程中我们不难看出，数组中从第0个到第i个是已经排好序的，而从第i个到第n个是未排好序的

</font>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>ArrayGenerator.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ArrayGenerator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayGenerator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成有序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">generateOrderedArray</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$n</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$data</span>[<span class="variable">$i</span>] = <span class="variable">$i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $maxNumber</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">generateRandomArray</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$n</span>, <span class="keyword">int</span> <span class="variable">$maxNumber</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$data</span>[<span class="variable">$i</span>] = mt_rand(<span class="number">0</span>, <span class="variable">$maxNumber</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SortingHelper.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SortingHelper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortingHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断数组是否有序，升序，满足前面的元素必须小于后面的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">isSorted</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$arr</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$i</span> - <span class="number">1</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试排序方法性能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $sortName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sortTest</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$sortName</span>, <span class="keyword">array</span> <span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">require_once</span> <span class="variable">$sortName</span> . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line">            <span class="variable">$sortReflect</span> = <span class="keyword">new</span> ReflectionClass(<span class="variable">$sortName</span>);</span><br><span class="line">            <span class="variable">$sortReflect</span>-&gt;newInstance()::sort(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">//            $sortName::sort($arr);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ReflectionException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$sortName</span> . <span class="string">&quot;类反射化失败,msg:&quot;</span> . <span class="variable">$exception</span>-&gt;getMessage() . PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SelectionSort.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * Class SelectionSort</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SelectionSort constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="comment">// arr[0..i)是有序的, arr[i...n)是无序的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="comment">// 选择 arr[i...n)中的最小值的索引</span></span><br><span class="line">            <span class="variable">$minIndex</span> = <span class="variable">$i</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &lt; <span class="variable">$length</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$j</span>] &lt; <span class="variable">$arr</span>[<span class="variable">$minIndex</span>]) &#123;</span><br><span class="line">                    <span class="variable">$minIndex</span> = <span class="variable">$j</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">self</span>::swap(<span class="variable">$arr</span>, <span class="variable">$i</span>, <span class="variable">$minIndex</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组中两个位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $j</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$arr</span>, <span class="keyword">int</span> <span class="variable">$i</span>, <span class="keyword">int</span> <span class="variable">$j</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$i</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">printArr</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$item</span> . <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>&emsp;&emsp;我们来看实现选择排序的主要代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="comment">// 选择 arr[i...n)中的最小值的索引</span></span><br><span class="line">    <span class="variable">$minIndex</span> = <span class="variable">$i</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$i</span>; <span class="variable">$j</span> &lt; <span class="variable">$length</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$j</span>] &lt; <span class="variable">$arr</span>[<span class="variable">$minIndex</span>]) &#123;</span><br><span class="line">            <span class="variable">$minIndex</span> = <span class="variable">$j</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">self</span>::swap(<span class="variable">$arr</span>, <span class="variable">$i</span>, <span class="variable">$minIndex</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这个是一个双重for循环的算法，其实算法的时间复杂度我在常见算法时间复杂度中已经总结了，下面拿这个例子再说一遍，第一个for循环中i=0时内层for循环需要执行n次，当i=1时，内层for循环n-1次，i=2时，内层for循环n-2时，是不是发现了什么呢？对，就是你想的那样，这个是一个标准的等差数列，我们都知道等差数列的求和公式是$ S_(n) = n * (a_1 + a_n) \frac12 $  ,经过化简后可以写为 $ \frac12n^2 + \frac12n $ , 根据基础章节中我们说到的在计算时间复杂度时只保留最高项，最高项的系数可以忽略不计，那么时间复杂度就是$O(n^2)$</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>  <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../common/ArrayGenerator.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span>  <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../common/SortingHelper.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span>  <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../selection_sort/SelectionSort.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectionSortTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * phpunit --filter testSort SelectionSortTest.php</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSort</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$testArr</span> = ArrayGenerator::generateRandomArray(<span class="number">10</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">        <span class="keyword">if</span> (SortingHelper::isSorted(SelectionSort::sort(<span class="variable">$testArr</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;排序正确&quot;</span> . PHP_EOL;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;排序错误&quot;</span> . PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;assertEquals(<span class="keyword">$this</span>-&gt;currentSortArray(<span class="variable">$testArr</span>), SelectionSort::sort(<span class="variable">$testArr</span>), <span class="string">&quot;算法错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * phpunit --filter testSortTime SelectionSortTest.php</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSortTime</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$n</span> = <span class="number">1000</span>;</span><br><span class="line">        <span class="variable">$testArr</span> = ArrayGenerator::generateRandomArray(<span class="variable">$n</span>, <span class="variable">$n</span>);</span><br><span class="line">        <span class="variable">$startTime</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$sortArr</span> = SelectionSort::sort(<span class="variable">$testArr</span>);</span><br><span class="line">        <span class="variable">$endTime</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$time</span> = <span class="variable">$endTime</span> - <span class="variable">$startTime</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="keyword">$this</span>-&gt;currentSortArray(<span class="variable">$testArr</span>), <span class="variable">$sortArr</span>);</span><br><span class="line">        <span class="keyword">if</span> (SortingHelper::isSorted(<span class="variable">$sortArr</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;排序正确&quot;</span> . PHP_EOL;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;排序错误&quot;</span> . PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;SelectionSort, n= <span class="subst">$n</span>: <span class="subst">$time</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用系统内置的sort方法来检验实现的排序是否正确</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">currentSortArray</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当数组个数为1000时，测试结果如下：</p>
<p><a href="https://imgtu.com/i/2pAfUO"><img src="https://z3.ax1x.com/2021/05/26/2pAfUO.png" alt="2pAfUO.png"></a></p>
<p>当数组个数为10000时，测试结果如下：</p>
<p><a href="https://imgtu.com/i/2pEpxs"><img src="https://z3.ax1x.com/2021/05/26/2pEpxs.png" alt="2pEpxs.png"></a></p>
<p>可以看出，当数组个数由1000变成10000时，程序的执行时间由0.063秒变成了6.21秒，时间增加了100倍，这个和我们说过的时间复杂度是$O(n^2)$刚好表示一致</p>
<hr>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>go入门篇之Hello World</title>
    <url>/article/go-base-01/</url>
    <content><![CDATA[<h2 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h2><ul>
<li><p>垃圾回收</p>
<ul>
<li>内存自动回收</li>
<li>只需要new分配内存，不需要释放</li>
</ul>
</li>
</ul>
<ul>
<li><p>天然并发</p>
<ul>
<li>语言层面支持并发，使用非常简单，使用 go关键字即可</li>
<li>goroute轻量级线程</li>
<li>基于CSP(Communicating Sequential Process)模型实现</li>
</ul>
</li>
</ul>
<ul>
<li><p>channel</p>
<ul>
<li>管道，类似Unix/Linux中的pipe</li>
<li>多个goroute之间通过channel通信</li>
<li>支持任何类型</li>
</ul>
</li>
</ul>
<ul>
<li>多返回值</li>
</ul>
<p>简单说几点：</p>
<ol>
<li><p>给channel赋值超过初始化的大小会直接报错(默认)</p>
</li>
<li><p>管道是一个队列，先进先出</p>
</li>
<li><p>定义在函数外部的变量是全局变量</p>
</li>
<li><p>变量以大写字母开头是公共变量，小写字母是私有变量，私有变量只能在当前的包内调用</p>
</li>
<li><p>go中的包和Python一样，用来将相同的功能放入到一起称之为包，包可以被其他的包引用，main包只能有一个，这个是用来生成可执行文件的</p>
</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://studygolang.com/dl">官网下载</a></p>
<p>这里由于是使用了mac，因此下载了 mac os下的pkg包，和windows下安装一样，选择默认一直下一步就行了</p>
<p>安装完成后打开终端输入<code>go env</code> 就可以看到go的相关环境信息</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>不管学习的是什么语言，在搭建好环境后第一件事就是输出 hello World，下面我们来实现这个功能</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>代码解析</p>
<ul>
<li>package main，是指明这个代码文件在哪个包里面</li>
<li>import，是导入go代码库中终端输出的包</li>
</ul>
<p>运行 <code>go run hello.go</code> 终端就会输出 Hello World了</p>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>golang中遇到的错误汇总</title>
    <url>/article/go-problems/</url>
    <content><![CDATA[<h2 id="package-xxx-is-not-in-GOROOT"><a href="#package-xxx-is-not-in-GOROOT" class="headerlink" title="package xxx is not in GOROOT"></a>package xxx is not in GOROOT</h2><p><a href="https://imgtu.com/i/6uw6TP"><img src="https://s3.ax1x.com/2021/03/06/6uw6TP.md.png" alt="6uw6TP.md.png"></a></p>
<p>出现这个问题的原因是从 1.11版本之后引入了另一个包的管理方式是 go mod，这个配置项在 go env这个命令的输出项是第一项，默认是打开的,使用如下的命令将其关闭就行了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env -w &quot;GO111MODULE=auto&quot;</span><br></pre></td></tr></table></figure>
<p>然后再次运行 go build 命令就只执行成功了</p>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>html笔记</title>
    <url>/article/html/</url>
    <content><![CDATA[<h2 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h2><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meat</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>文档标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></h2><h2 id="HTML-实体"><a href="#HTML-实体" class="headerlink" title="HTML 实体"></a>HTML 实体</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//小于号</span><br><span class="line"><span class="symbol">&amp;lt;</span></span><br><span class="line"></span><br><span class="line">//大于号</span><br><span class="line"><span class="symbol">&amp;gt;</span></span><br><span class="line"></span><br><span class="line">//空格</span><br><span class="line"><span class="symbol">&amp;nbsp;</span></span><br><span class="line"></span><br><span class="line">// &lt;&lt;</span><br><span class="line"><span class="symbol">&amp;laquo;</span></span><br><span class="line"></span><br><span class="line">// &gt;&gt;</span><br><span class="line"><span class="symbol">&amp;raquo;</span></span><br><span class="line"></span><br><span class="line">//x</span><br><span class="line"><span class="symbol">&amp;times;</span></span><br></pre></td></tr></table></figure></h2><h2 id="HTML-颜色"><a href="#HTML-颜色" class="headerlink" title="HTML 颜色"></a>HTML 颜色</h2><ul>
<li>英文表示</li>
<li>十六进制表示</li>
<li>十进制<ul>
<li>rgb(0,0,0)</li>
<li>rgba(0,0,0,0~1) // 1 完全不透明  0 完全透明</li>
</ul>
</li>
</ul>
<ul>
<li>常用的颜色<ul>
<li>红色  #ff0000</li>
<li>绿色  #00ff00</li>
<li>蓝色  #0000ff</li>
<li>紫色（红色+蓝色） #ff00ff</li>
<li>青色（红色+绿色） #ffff00</li>
<li>黄色（红色+绿色） #ffff00</li>
<li>灰色  #cccccc</li>
<li>白色  #ffffff</li>
<li>黑色  #000000</li>
</ul>
</li>
</ul>
<hr>
<h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><ul>
<li>&lt; body <strong>bgcolor</strong>=”f00”&gt;</li>
</ul>
<blockquote>
<p>html代表整个文档屏幕</p>
<p>body 代表文档中真正的数据区域</p>
<h2 id="当html没有设置背景色，此时body背景色是整个文档的屏幕"><a href="#当html没有设置背景色，此时body背景色是整个文档的屏幕" class="headerlink" title="当html没有设置背景色，此时body背景色是整个文档的屏幕"></a>当html没有设置背景色，此时body背景色是整个文档的屏幕</h2></blockquote>
<h2 id="格式标签"><a href="#格式标签" class="headerlink" title="格式标签"></a>格式标签</h2><ul>
<li>br  // 换行，单标签</li>
<li>nobr //不换行，双标签</li>
<li>center // 居中，双标签</li>
<li>pre  // 按源代码显示，双标签</li>
<li>ul   // 无序列表    <code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></li>
<li>ol   // 有序列表    <code>&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code></li>
<li>dl   // 自定义列表</li>
<li>dt   // 自定义标题</li>
<li>dd   // 自定义列表内容</li>
<li>hr  //导航线</li>
</ul>
<hr>
<h2 id="div、span"><a href="#div、span" class="headerlink" title="div、span"></a>div、span</h2><ul>
<li>div 无意义<strong>块</strong>标签</li>
<li>span 无意义<strong>行</strong>标签</li>
</ul>
<hr>
<h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><ul>
<li>h1-h6</li>
<li>b 加粗</li>
<li>i 倾斜</li>
<li>u 下划线</li>
<li>p 段落 ，块标签</li>
<li>font 字体</li>
</ul>
<hr>
<h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><ul>
<li>格式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">usermap</span>=<span class="string">&quot;#map&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>alt 图片加载失败时，才会显示在页面上</li>
<li>title 鼠标滑过时显示的内容</li>
<li>usermap 热点地图<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;82,152,20&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><ul>
<li>格式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>target<ul>
<li>‘_blank’ 新窗口（标签）打开</li>
<li>‘_self’  默认，本窗口</li>
<li>‘_parent’ 父窗口</li>
<li>‘_top’  顶窗口</li>
</ul>
</li>
</ul>
<ul>
<li><strong>URL</strong><ul>
<li><a href="http://www.baidu.com/home/index.php?id=10&amp;name=user1">http://www.baidu.com/home/index.php?id=10&amp;name=user1</a><ul>
<li>http:// — web服务器协议</li>
<li>www.baidu.com  ——域名</li>
<li>/home —-网站目录</li>
<li>index.php —-网页脚本</li>
<li>id=10&amp;name=user1 网页传递的参数</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul>
<li>格式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>用户表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>table 属性<ul>
<li>width</li>
<li>heigth</li>
<li>border</li>
<li>bordercolor</li>
<li>cellspacing</li>
<li>cellpadding</li>
<li>align</li>
</ul>
</li>
<li><p>td  属性</p>
<ul>
<li>width</li>
<li>height</li>
<li>colspan 列合并</li>
<li>rowspan 行合并</li>
<li>align :  center|left|right</li>
<li><p>valign : top|middle|bottom</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* div中有图片，div与img高度差4个或者5个px */</span></span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>:<span class="number">#0ff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>:block; <span class="comment">/*解决办法 */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul>
<li>格式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>文本框<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">plachholder</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>密码框<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>单选框<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;linux&quot;</span>&gt;</span>linux</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;laravel&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>复选框<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bike&quot;</span>&gt;</span>I have a bike</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Car&quot;</span>&gt;</span>I have a car </span><br></pre></td></tr></table></figure></li>
<li>下拉菜单<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;cars&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;saab&quot;</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fiat&quot;</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;audi&quot;</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>多选下拉菜单<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;cars[]&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;saab&quot;</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fiat&quot;</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;audi&quot;</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>区域框<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">        <span class="attribute">resize</span>:none; <span class="comment">/* 防止页面拖动 */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">        The cat was playing in the garden.</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>表单其他元素<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Reset&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span>  <span class="attr">src</span>=<span class="string">&quot;submit.gif&quot;</span> <span class="attr">value</span>=<span class="string">&quot;图片上传按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;隐藏按钮&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>placeholder 表单占位符</li>
<li>readonly  表单只读属性,表单会传递此值</li>
<li>disable 表单不会传递此值</li>
<li>size</li>
<li>maxlength 文本框最大长度</li>
</ul>
<hr>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul>
<li>frameset<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">&quot;100,*&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;top.html&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;170,*&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;left.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;right.html&quot;</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>left.html</p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;#right&quot;</span>&gt;</span>查看用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></h2><h2 id="内嵌框架"><a href="#内嵌框架" class="headerlink" title="内嵌框架"></a>内嵌框架</h2><ul>
<li>iframe<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;700px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="h5语义化标签"><a href="#h5语义化标签" class="headerlink" title="h5语义化标签"></a>h5语义化标签</h2><ul>
<li>article</li>
<li>footer</li>
<li>header</li>
<li>nav</li>
<li>section</li>
</ul>
<hr>
<h2 id="h5视频和音频标签"><a href="#h5视频和音频标签" class="headerlink" title="h5视频和音频标签"></a>h5视频和音频标签</h2><ul>
<li><p>视频</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>|属性|值|描述|<br>|:-:|:-:|:-:|<br>|autoplay|autoplay|    如果出现该属性，则视频在就绪后马上播放。|<br>|controls|controls|    如果出现该属性，则向用户显示控件，比如播放按钮。|<br>|height|pixels|    设置视频播放器的高度。|<br>|loop|loop|    如果出现该属性，则当媒介文件完成播放后再次开始播放。|<br>|preload|preload|    如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。|<br>|src|url|要播放的视频的 URL。|<br>|width|pixels|设置视频播放器的宽度|</p>
</li>
<li><p>音频</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio src=&quot;song.ogg&quot; controls=&quot;controls&quot;&gt;</span><br><span class="line">    Your browser does not support the audio tag.</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure>
<p>|属性    |值    |描述|<br>|:-:|:-:|:-:|<br>|autoplay|autoplay|如果出现该属性，则音频在就绪后马上播放。|<br>|controls|controls|如果出现该属性，则向用户显示控件，比如播放按钮。|<br>|loop|loop|如果出现该属性，则每当音频结束时重新开始播放。|<br>|preload|preload|如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。|<br>|src|url|要播放的音频的 URL。|</p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>http2</title>
    <url>/article/http2/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;HTTP/2 是 HTTP 协议自 1999 年 HTTP 1.1 发布后的首个更新，主要基于 SPDY 协议。由互联网工程任务组（IETF）的 Hypertext Transfer Protocol Bis（httpbis）工作小组进行开发。该组织于2014年12月将HTTP/2标准提议递交至IESG进行讨论，于2015年2月17日被批准。HTTP/2标准于2015年5月以RFC 7540正式发表。</p>
<p>&emsp;&emsp;HTTP2只能在HTTPS加密协议上的网站上运行，运行HTTP的网站使用HTTP1.1协议</p>
<p><a href="https://developers.google.com/web/fundamentals/performance/http2">参考</a></p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>二进制传输，消息的解析效率高</li>
<li>头部数据压缩，传输效率高</li>
<li>多路复用，可以让请求并发执行</li>
<li>服务器推送，可以主动推送资源到浏览器</li>
</ul>
<h2 id="二进制分帧"><a href="#二进制分帧" class="headerlink" title="二进制分帧"></a>二进制分帧</h2><p><img src="https://img.imgdb.cn/item/605990178322e6675c2594aa.jpg" alt=""></p>
<p><img src="https://img.imgdb.cn/item/605990258322e6675c259d05.jpg" alt=""></p>
<p>帧：HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。</p>
<p>数据流：已建立的连接内的双向字节流，可以承载一条或多条消息。每个流都有一个唯一整数ID</p>
<p>消息：与逻辑请求或响应消息对应的完整的一系列帧。</p>
<p>HTTP/2不同于HTTP/1的文本传输格式而是采用二进制格式传输，二进制协议解析起来更高效。HTTP/2将请求与响应数据分割为更小的帧，并且它们采用二进制编码</p>
<p>HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。</p>
<p><img src="https://img.imgdb.cn/item/605994ba8322e6675c28eb3a.jpg" alt=""></p>
<ul>
<li>所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流。</li>
<li>每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。</li>
<li>每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。</li>
<li>帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装</li>
</ul>
<h2 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h2><p>&emsp;&emsp;HTTP/2采用HPACK格式压缩请求和响应标头元数据，HPACK格式支持通过静态霍夫曼代码对传输的标头进行字符编码，以达成减少传输的大小，还有就是需要客户端与浏览器同时维护和更新一个包含之前见过的标头字段的索引列表，这个列表放置了对应的压缩关系</p>
<p>&emsp;&emsp;<a href="https://tools.ietf.org/html/rfc7541#section-2.2">官网</a></p>
<p><img src="https://img.imgdb.cn/item/6059a3408322e6675c33b389.jpg" alt=""></p>
<p><img src="https://img.imgdb.cn/item/6059a34b8322e6675c33bf46.jpg" alt=""></p>
<p>host这个头信息是在动态表中，处于浏览器这一端</p>
<h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><p>&emsp;&emsp;我们知道在HTTP1.1中客户端想要发起多个并行请求的话必须使用多个TCP连接才可以，但是在HTTP2中新的二进制分帧层可以更好的实现多个并发请求，客户端和服务器端可以将HTTP消息分解为互不依赖的帧，交错发送，最后可以在一端把他们重新组装起来</p>
<p><img src="https://img.imgdb.cn/item/605995678322e6675c29567e.jpg" alt=""></p>
<p>&emsp;&emsp;如上图我们看到，客户端正在给服务器端发送一个DATA帧（stream5），与此同时，服务器正向客户端也交错的发送数据流1和数据流3的一系列帧。所以在这个连接上同时有三个并行的数据流</p>
<p>&emsp;&emsp;将整个HTTP消息分解为独立的帧，交错发送，然后在另一端组装是HTTP2最重要的一项增强，可以带来巨大的性能提升，让我们可以：</p>
<ul>
<li>并行交错地发送多个请求，请求之间互不影响。</li>
<li>并行交错地发送多个响应，响应之间互不干扰。</li>
<li>使用一个连接并行发送多个请求和响应。</li>
<li>不必再为绕过 HTTP/1.x 限制而做很多工作</li>
<li>消除不必要的延迟和提高现有网络容量的利用率，从而减少页面加载时间。</li>
</ul>
<h2 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h2><p>&emsp;&emsp;简单理解来说就是服务器对一个客户端的请求可以发送多个响应。换句话说，除了对最初请求的响应外，服务器还可以向客户端推送额外的资源，而不需要客户端明确的指定</p>
<p><img src="https://img.imgdb.cn/item/60599bc38322e6675c2d5c97.jpg" alt=""></p>
<p>&emsp;&emsp;举一个例子来说，我们要请求一个page.html页面，这个页面有css的样式定义，也有js的动态展示效果，在2.0之前都是客户端向服务器分别去请求这几种资源，但是2.0之后，在我们请求这个page.html页面后，页面上所需要的css和js的内容会由服务器主动推送给客户端就不需要客户端再一次发起请求了</p>
<hr>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>http2</tag>
      </tags>
  </entry>
  <entry>
    <title>邮件</title>
    <url>/article/mail/</url>
    <content><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>身份验证，举例来说，你在网站通过邮箱注册账号时，页面上会有一个填写邮箱验证码的输入框;还有，忘记密码后,网站会给你注册时填写的邮箱发一份邮件，点开邮件中的链接就可以更改密码</li>
<li>邮件告警，举例来说，公司的一些重要的业务，在代码处理过程中如果有错误会触发告警，一般是给某个大神或者当前功能的开发者发封邮件，让代码错误及时处理</li>
<li>市场营销</li>
</ul>
<h2 id="swiftMiailer发送邮件"><a href="#swiftMiailer发送邮件" class="headerlink" title="swiftMiailer发送邮件"></a>swiftMiailer发送邮件</h2><p><a href="https://swiftmailer.symfony.com/">官网</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> composer require <span class="string">&quot;swiftmailer/swiftmailer:^6.0&quot;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the Transport</span></span><br><span class="line"><span class="variable">$transport</span> = (<span class="keyword">new</span> Swift_SmtpTransport(<span class="string">&#x27;smtp.163.com&#x27;</span>, <span class="number">25</span>)) <span class="comment">// 对应邮件服务提供商的地址,这里使用的是163</span></span><br><span class="line">    -&gt;setUsername(<span class="string">&#x27;user&#x27;</span>) <span class="comment">// 登录账号</span></span><br><span class="line">    -&gt;setPassword(<span class="string">&#x27;pass&#x27;</span>) <span class="comment">// SMTP授权码</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the Mailer using your created Transport</span></span><br><span class="line"><span class="variable">$mailer</span> = <span class="keyword">new</span> Swift_Mailer(<span class="variable">$transport</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$htmlBody</span> = <span class="string">&#x27;&lt;p style=&quot;color: red&quot;&gt;Hello&lt;/p&gt; my html body message&#x27;</span>; <span class="comment">// 邮件内容是HTML格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a message</span></span><br><span class="line"><span class="variable">$message</span> = (<span class="keyword">new</span> Swift_Message(<span class="string">&#x27;Wonderful Subject&#x27;</span>))</span><br><span class="line">    -&gt;setFrom([<span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;UserNickName&#x27;</span>]) <span class="comment">// 发送者的邮箱和显示的用户昵称 </span></span><br><span class="line">    -&gt;setTo([<span class="string">&#x27;toUser&#x27;</span>]) <span class="comment">// xx@qq.com or xx@gamil.com or xx@163.com</span></span><br><span class="line">    -&gt;setBody(<span class="variable">$htmlBody</span>, <span class="string">&#x27;text/html&#x27;</span>) <span class="comment">// 发送html文档</span></span><br><span class="line"><span class="comment">//    -&gt;setBody(&#x27;Here is the message itself&#x27;) // 发送普通文档</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 附件</span></span><br><span class="line"><span class="variable">$attachment</span> = Swift_Attachment::fromPath(<span class="string">&#x27;shares.jpg&#x27;</span>, <span class="string">&#x27;image/jpg&#x27;</span>);</span><br><span class="line"><span class="variable">$message</span>-&gt;attach(<span class="variable">$attachment</span>); <span class="comment">// 发送的邮件添加附件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Send the message</span></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$mailer</span>-&gt;send(<span class="variable">$message</span>);</span><br><span class="line">var_dump(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="邮件队列"><a href="#邮件队列" class="headerlink" title="邮件队列"></a>邮件队列</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造邮件发送信息,写入redis队列中</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$port</span> = <span class="number">6379</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> \redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="variable">$host</span>, <span class="variable">$port</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$messageListKey</span> = <span class="string">&#x27;mail_test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$message</span> = [</span><br><span class="line">    <span class="string">&#x27;subject&#x27;</span> =&gt; <span class="string">&#x27;this is subject message&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;body&#x27;</span> =&gt; <span class="string">&#x27;this is body message&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;receiver&#x27;</span> =&gt; <span class="string">&#x27;xx@qq.com&#x27;</span> <span class="comment">// 接收邮件的账号</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$message</span> = json_encode(<span class="variable">$message</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$redis</span>-&gt;lPush(<span class="variable">$messageListKey</span>, <span class="variable">$message</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;done&quot;</span> . PHP_EOL;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 守护进程，需要一直运行，保证邮件消息队列后台运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$port</span> = <span class="number">6379</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> \redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="variable">$host</span>, <span class="variable">$port</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$messageListKey</span> = <span class="string">&#x27;mail_test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable">$timeout</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="variable">$message</span> = <span class="variable">$redis</span>-&gt;brPop(<span class="variable">$messageListKey</span>, <span class="variable">$timeout</span>); <span class="comment">// 超时时间后获取不到数据会返回空数组</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * array(2) &#123;</span></span><br><span class="line"><span class="comment">         [0] =&gt;</span></span><br><span class="line"><span class="comment">         string(9) &quot;mail_test&quot;</span></span><br><span class="line"><span class="comment">         [1] =&gt;</span></span><br><span class="line"><span class="comment">         string(97) &quot;&#123;&quot;subject&quot;:&quot;this is subject message&quot;,&quot;body&quot;:&quot;this is body message&quot;,&quot;receiver&quot;:&quot;934247610<span class="doctag">@qq</span>.com&quot;&#125;&quot;</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="comment">//    var_dump($message);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$message</span>)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// message[0] 是队列名称 message[1]就是消息</span></span><br><span class="line">    <span class="variable">$message</span> = json_decode(<span class="variable">$message</span>[<span class="number">1</span>], <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//    var_dump($message);</span></span><br><span class="line"><span class="comment">//    echo &quot;send mail&quot; . PHP_EOL;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 做次数限制</span></span><br><span class="line">    <span class="variable">$startTime</span> = microtime(<span class="literal">true</span>);  <span class="comment">// 返回Unix 时间戳的微秒数</span></span><br><span class="line">    send_mail(<span class="variable">$message</span>); <span class="comment">// 运营商发送邮件一般是有限制的，比如说一分钟内只能发送600次，就是说1秒最多发10次，我们可以根据这个做一个限制发送次数</span></span><br><span class="line">    <span class="variable">$endTime</span> = microtime(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$gapTime</span> = (<span class="keyword">int</span>)((<span class="variable">$endTime</span> - <span class="variable">$startTime</span>) * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$gapTime</span> == <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$sleepTime</span> = (<span class="number">100</span> - <span class="variable">$gapTime</span>) * <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;limit send, to sleep &quot;</span> . <span class="variable">$sleepTime</span>. <span class="string">&#x27;us&#x27;</span> . PHP_EOL;</span><br><span class="line">        usleep(<span class="variable">$sleepTime</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 发送邮件的时候需要进行异常捕获，写入日志中， 这里日志使用的monolog包</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send_mail</span>(<span class="params"><span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;邮件发送中.....&quot;</span> . PHP_EOL;</span><br><span class="line">        usleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">// 10毫秒  1毫秒 = 1000微妙</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&quot;邮件发送出错&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;邮件发送完毕&quot;</span> . PHP_EOL;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$exception</span>) &#123;</span><br><span class="line">        writeLog(<span class="string">&quot;邮件发送失败:&quot;</span>, [<span class="string">&#x27;message&#x27;</span> =&gt; json_encode(<span class="variable">$message</span>), <span class="string">&#x27;exception&#x27;</span> =&gt; <span class="variable">$exception</span>-&gt;getMessage()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * monolog GitHub地址: https://github.com/Seldaek/monolog</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeLog</span>(<span class="params"><span class="variable">$message</span>, <span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$log</span> = <span class="keyword">new</span> \Monolog\Logger(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line">    <span class="variable">$log</span>-&gt;pushHandler(<span class="keyword">new</span> \Monolog\Handler\StreamHandler(<span class="string">&#x27;error.log&#x27;</span>, \Monolog\Logger::ERROR));</span><br><span class="line">    <span class="variable">$log</span>-&gt;error(<span class="variable">$message</span>, <span class="variable">$content</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>mail</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP环境搭建</title>
    <url>/article/lamp/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Ubuntu 20.04</p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y nginx </span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure>
<h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><ul>
<li>启动  <code>sudo service nginx start</code></li>
<li>重新启动 <code>sudo service nginx restart</code></li>
<li>关闭 <code>sudo service nginx stop</code></li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>主配置文件位于 <strong>/etc/nginx/nginx.conf</strong></p>
<p>虚拟主机配置位置是 <strong>/etc/nginx/conf.d/*.conf</strong> 与 <strong>/etc/nginx/site-enabled/</strong></p>
<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get dist-upgrade</span><br><span class="line"></span><br><span class="line">sudo apt-get install php8.0 php8.0-cli php8.0-cgi php8.0-bcmath php8.0-common php8.0-curl php8.0-dev php8.0-fpm php8.0-gd php8.0-gmp php8.0-mbstring php8.0-mcrypt php8.0-mysql php8.0-readline php8.0-redis php8.0-soap php8.0-snmp php8.0-xdebug php8.0-xml php8.0-yaml php8.0-zip</span><br><span class="line"></span><br><span class="line">php -v</span><br></pre></td></tr></table></figure>
<font color="red">注： php8.0-redis安装此扩展后php就可以直接调用redis库了，不在需要进行phpredis的编译安装 </font>

<h3 id="管理-1"><a href="#管理-1" class="headerlink" title="管理"></a>管理</h3><ul>
<li>启动  <code>sudo service php8.0-fpm start</code></li>
<li>重新启动 <code>sudo service php8.0-fpm restart</code></li>
<li>关闭 <code>sudo service php8.0-fpm stop</code></li>
<li>查看是否安装了扩展 <code>php -i | grep extensionName</code></li>
</ul>
<h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p>php.ini 配置文件位于 <strong>/etc/php/8.0/cli/php.ini</strong></p>
<p>php-fpm 配置文件位于 <strong>/etc/php/8.0/fpm/php-fpm.conf</strong></p>
<p>php-fpm 子配置文件位于 <strong>/etc/php/8.0/fpm/pool.d/www.conf</strong></p>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server-8.0</span><br></pre></td></tr></table></figure>
<h3 id="管理-2"><a href="#管理-2" class="headerlink" title="管理"></a>管理</h3><ul>
<li>启动  <code>sudo service mysql start</code></li>
<li>重新启动 <code>sudo service mysql restart</code></li>
<li>关闭 <code>sudo service mysql stop</code></li>
</ul>
<h3 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>/etc/mysql/mysql.conf.d/mysqld.cnf</strong> 是mysql中mysqld配置项的配置文件</p>
<h3 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h3><p>通过<strong>apt-get install</strong> 方式安装完MySQL后，在 <strong>/etc/mysql/</strong> 目录下有一个<font color="red">debian.cnf</font>配置文件,文件内容是一个配置好权限的登录用户和密码;<br>不知道root用户密码，需要用这个配置好的用户名和密码登录到数据库中去修改root的用户名和密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br><span class="line">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+-------------------------+</span><br><span class="line">| version()               |</span><br><span class="line">+-------------------------+</span><br><span class="line">| 8.0.23-0ubuntu0.20.04.1 |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show grants for &#x27;debian-sys-maint&#x27;@&#x27;localhost&#x27;\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Grants for debian-sys-maint@localhost: GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE, CREATE ROLE, DROP ROLE ON *.* TO `debian-sys-maint`@`localhost` WITH GRANT OPTION</span><br><span class="line">    *************************** 2. row ***************************</span><br><span class="line">Grants for debian-sys-maint@localhost: GRANT APPLICATION_PASSWORD_ADMIN,AUDIT_ADMIN,BACKUP_ADMIN,BINLOG_ADMIN,BINLOG_ENCRYPTION_ADMIN,CLONE_ADMIN,CONNECTION_ADMIN,ENCRYPTION_KEY_ADMIN,FLUSH_OPTIMIZER_COSTS,FLUSH_STATUS,FLUSH_TABLES,FLUSH_USER_RESOURCES,GROUP_REPLICATION_ADMIN,INNODB_REDO_LOG_ARCHIVE,INNODB_REDO_LOG_ENABLE,PERSIST_RO_VARIABLES_ADMIN,REPLICATION_APPLIER,REPLICATION_SLAVE_ADMIN,RESOURCE_GROUP_ADMIN,RESOURCE_GROUP_USER,ROLE_ADMIN,SERVICE_CONNECTION_ADMIN,SESSION_VARIABLES_ADMIN,SET_USER_ID,SHOW_ROUTINE,SYSTEM_USER,SYSTEM_VARIABLES_ADMIN,TABLE_ENCRYPTION_ADMIN,XA_RECOVER_ADMIN ON *.* TO `debian-sys-maint`@`localhost` WITH GRANT OPTION</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>ubuntu</tag>
        <tag>nginx</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>redis基础篇之通用命令篇</title>
    <url>/article/redis-base-common-command/</url>
    <content><![CDATA[<p>记录一下redis的通用操作命令</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><blockquote>
<p>keys pattern</p>
<ul>
<li>遍历key,有3个通配符<ul>
<li>? 匹配单个字符</li>
<li>* 匹配任意多个字符</li>
<li>[] 匹配括号内的某一个字符</li>
</ul>
</li>
<li>keys命令一般不在生产环境使用，在主从节点的从节点上进行操作</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="dbsize"><a href="#dbsize" class="headerlink" title="dbsize"></a>dbsize</h3><blockquote>
<p>dbsize</p>
<ul>
<li>计算当前数据库的key的个数</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><blockquote>
<p>select dbNumber</p>
<ul>
<li>切换到其他（number）数据库，默认当前处于0号数据库</li>
</ul>
</blockquote>
<h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><blockquote>
<p>exists key</p>
<ul>
<li>检查key是否存在</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><blockquote>
<p>del key</p>
<ul>
<li>删除指定的key-value</li>
</ul>
</blockquote>
<h3 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h3><blockquote>
<p>expire key seconds</p>
<ul>
<li>设置key在second秒后过期</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="ttl"><a href="#ttl" class="headerlink" title="ttl"></a>ttl</h3><blockquote>
<p>ttl key</p>
<ul>
<li>查看key的过期时间，就是剩余多少秒过期<ul>
<li>-1 ，表示key存在，并且没有过期时间</li>
<li>-2 ，表示key已经不存在</li>
<li>5， 表示还有5秒就过期,这里的5指代的是大于0的整数</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><blockquote>
<p>type key</p>
<ul>
<li>返回key的类型</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="persist"><a href="#persist" class="headerlink" title="persist"></a>persist</h3><blockquote>
<p>persist key</p>
<ul>
<li>设置key永远不过期</li>
</ul>
</blockquote>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="keys-1"><a href="#keys-1" class="headerlink" title="keys"></a>keys</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line"> 1) &quot;k7&quot;</span><br><span class="line"> 2) &quot;k3&quot;</span><br><span class="line"> 3) &quot;k5&quot;</span><br><span class="line"> 4) &quot;kn1&quot;</span><br><span class="line"> 5) &quot;s2&quot;</span><br><span class="line"> 6) &quot;k4&quot;</span><br><span class="line"> 7) &quot;k2&quot;</span><br><span class="line"> 8) &quot;k1&quot;</span><br><span class="line"> 9) &quot;s1&quot;</span><br><span class="line">10) &quot;s3&quot;</span><br><span class="line">11) &quot;k6&quot;</span><br><span class="line">12) &quot;kn2&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys k?</span><br><span class="line">1) &quot;k7&quot;</span><br><span class="line">2) &quot;k3&quot;</span><br><span class="line">3) &quot;k5&quot;</span><br><span class="line">4) &quot;k4&quot;</span><br><span class="line">5) &quot;k2&quot;</span><br><span class="line">6) &quot;k1&quot;</span><br><span class="line">7) &quot;k6&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys k[1]</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys k[1,23,4,6]</span><br><span class="line">1) &quot;k3&quot;</span><br><span class="line">2) &quot;k4&quot;</span><br><span class="line">3) &quot;k2&quot;</span><br><span class="line">4) &quot;k1&quot;</span><br><span class="line">5) &quot;k6&quot;</span><br></pre></td></tr></table></figure>
<h3 id="dbsize-1"><a href="#dbsize-1" class="headerlink" title="dbsize"></a>dbsize</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 12</span><br></pre></td></tr></table></figure>
<h3 id="exists-1"><a href="#exists-1" class="headerlink" title="exists"></a>exists</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists k9</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; exists k7</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
<h3 id="ttl-1"><a href="#ttl-1" class="headerlink" title="ttl"></a>ttl</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; expire k1 12</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; expire k1 120</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 118</span><br><span class="line">127.0.0.1:6379&gt; persist k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure>
<h3 id="del-1"><a href="#del-1" class="headerlink" title="del"></a>del</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del kn2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get kn2</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<h3 id="select-1"><a href="#select-1" class="headerlink" title="select"></a>select</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379[1]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 11</span><br></pre></td></tr></table></figure>
<h3 id="expire-1"><a href="#expire-1" class="headerlink" title="expire"></a>expire</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set s2 helloworld</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl s2</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; expire s2 120</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl s2</span><br><span class="line">(integer) 118</span><br><span class="line">127.0.0.1:6379&gt; ttl s2</span><br><span class="line">(integer) -2</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis入门篇之命令与配置文件篇</title>
    <url>/article/redis-base-config-file/</url>
    <content><![CDATA[<h1 id="src目录命令"><a href="#src目录命令" class="headerlink" title="src目录命令"></a>src目录命令</h1><ul>
<li><p>redis-server</p>
<blockquote>
<p>redis服务启动命令，后面不追加配置文件名称，默认启动安装目录下生成的 redis.conf</p>
</blockquote>
</li>
<li><p>redis-cli</p>
<blockquote>
<p>redis命令行客户端，一般在命令行下连接服务器</p>
</blockquote>
</li>
<li><p>redis-benchmark</p>
<blockquote>
<p>redis性能测试工具</p>
</blockquote>
</li>
<li><p>redis-check-aof</p>
<blockquote>
<p>AOF文件修复工具,AOF是redis持久化的一种实现方式</p>
</blockquote>
</li>
<li><p>redis-check-rdb</p>
<blockquote>
<p>RDB文件检查工具，RDB是redis持久化的一种实现方式</p>
</blockquote>
</li>
<li><p>redis-sentinel</p>
<blockquote>
<p>redis搭建哨兵模式的启动命令，用于监控主从模式下，主服务器故障后实现自动切换主从角色保障主从复制功能可用性</p>
</blockquote>
</li>
<li><p>redis-trib.rb</p>
<blockquote>
<p>搭建redis集群时自动化创建集群的命令，需要ruby环境才可以执行</p>
</blockquote>
</li>
</ul>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="生成配置文件概览（默认配置文件为例）"><a href="#生成配置文件概览（默认配置文件为例）" class="headerlink" title="生成配置文件概览（默认配置文件为例）"></a>生成配置文件概览（默认配置文件为例）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd redis</span><br><span class="line">cat redis.conf | grep -v &quot;grep&quot; | grep -v &quot;#&quot; | grep -v &quot;^$&quot;</span><br></pre></td></tr></table></figure>
<h3 id="所有的配置项"><a href="#所有的配置项" class="headerlink" title="所有的配置项"></a>所有的配置项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1</span><br><span class="line">protected-mode yes</span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize no</span><br><span class="line">supervised no</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line">databases 16</span><br><span class="line">always-show-logo yes</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">rdb-del-sync-files no</span><br><span class="line">dir ./</span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line">replica-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-diskless-load disabled</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">replica-priority 100</span><br><span class="line">acllog-max-len 128</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line">lazyfree-lazy-user-del no</span><br><span class="line">oom-score-adj no</span><br><span class="line">oom-score-adj-values 0 200 800</span><br><span class="line">appendonly no</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">dynamic-hz yes</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line">jemalloc-bg-thread yes</span><br></pre></td></tr></table></figure>
<h2 id="配置项介绍"><a href="#配置项介绍" class="headerlink" title="配置项介绍"></a>配置项介绍</h2><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><blockquote>
<p> bind  &emsp; 127.0.0.1  </p>
</blockquote>
<p>redis服务默认监听地址，只能本地连接</p>
<blockquote>
<p>protected-mode  &emsp; yes</p>
</blockquote>
<p>redis的保护模式，开启后禁止公网访问redis</p>
<blockquote>
<p>port &emsp; 6379 </p>
</blockquote>
<p>redis服务默认端口</p>
<blockquote>
<p>requirepass  &emsp; some </p>
</blockquote>
<p>设置redis服务的连接密码,这里设置的密码是 some</p>
<h3 id="启动与管理模式"><a href="#启动与管理模式" class="headerlink" title="启动与管理模式"></a>启动与管理模式</h3><blockquote>
<p>daemonize  &emsp; no </p>
</blockquote>
<p>是否以后台模式运行, 默认是no ,终端运行 redis-server 后会显示当前redis的相关信息,关闭当前的终端redis服务也会退出；</p>
<p>设置成yes，执行完redis-server后当前终端可以关闭，redis实例会将当前的进程号pid写入默认配置的pid文件(/var/run/redis.pid)中</p>
<blockquote>
<p>supervised  &emsp; no</p>
</blockquote>
<p>可以使用 upstart和systemd管理redis守护进程，这个参数的取值取决于当前所使用的系统类型</p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><blockquote>
<p>tcp-backlog &emsp; 511</p>
</blockquote>
<p><a href="https://www.pianshen.com/article/3594269374/">参考链接</a></p>
<p>表示TCP完成三次握手后连接队列中的长度，当系统的并发量大并且客户端访问速度缓慢的时候可以设置，</p>
<p>/proc/sys/net/core/somaxconn 默认值是128，定义了系统中每一个端口最大的监听队列的长度</p>
<blockquote>
<p>tcp-keepalive &emsp; 300</p>
</blockquote>
<p>单位是秒，表示将周期性的使用SO_KEEPALIVE检测客户端是否处于健康状态，避免服务器一直阻塞，默认是300</p>
<h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><blockquote>
<p>pidfile &emsp; /var/run/redis_6379.pid</p>
</blockquote>
<p>生成pid文件的默认路径，redis以后台模式运行时，配置生成pid文件的路径</p>
<blockquote>
<p>logfile &emsp; “”</p>
</blockquote>
<p>生成redis的日志文件的路径，空字符串时，为标准输出，redis此时以守护进程启动，日志将会输出到 /dev/null</p>
<blockquote>
<p>loglevel &emsp; notice</p>
</blockquote>
<p>redis日志的级别</p>
<ul>
<li>debug &emsp; 会生成大量日志信息，适用于开发，测试阶段</li>
<li>verbose &emsp; 较多的日志信息</li>
<li>notice &emsp; 适量的日志信息，使用于生产环境</li>
<li>warning &emsp; 仅有部分重要，关键信息才会被记录</li>
</ul>
<blockquote>
<p>dir &emsp; ./</p>
</blockquote>
<p>redis的工作目录，配置完成后，生成的日志文件就会在配置的目录下生成</p>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis入门篇之环境搭建</title>
    <url>/article/redis-base-install-env/</url>
    <content><![CDATA[<p>搭建环境</p>
<ul>
<li>Ubuntu 20.04</li>
<li>redis 6.0.10</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>第一种安装方式 apt<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure></li>
<li>第二种安装方式 编译安装<br><a href="https://redis.io/download">官方下载地址</a><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-6.0.10.tar.gz</span><br><span class="line">tar -zxf redis-6.0.10.tar.gz </span><br><span class="line">cd redis-6.0.10</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行完 make install 命令后会在当前目录的src目录下生成redis的相关命令，自动会将命令拷贝到 /user/local/bin 目录下</p>
</blockquote>
</li>
</ul>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul>
<li>默认<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-server</span></span><br></pre></td></tr></table></figure></li>
<li>加配置文件方式<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-server redis.conf</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><ul>
<li><p>通过客户端方式停止</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-cli shutdown</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过杀死进程的方式停止</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef | grep -v <span class="string">&quot;grep&quot;</span> | grep redis-server</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> PID</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ul>
<li><p>默认</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-cli</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定IP与端口号方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-cli -h IP -p PORT</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-cli -h 192.168.56.101 -p 6380</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="客户端返回值"><a href="#客户端返回值" class="headerlink" title="客户端返回值"></a>客户端返回值</h2><ul>
<li><p>状态回复</p>
<blockquote>
<p>127.0.0.1:6379&gt; ping</p>
<p>pong</p>
</blockquote>
</li>
<li><p>错误回复</p>
<blockquote>
<p>127.0.0.1:6379&gt; hget hello field</p>
<p>(error) WRONGTYPE Operation aginst</p>
</blockquote>
</li>
<li><p>整数回复</p>
<blockquote>
<p>127.0.0.1:6379&gt; incr hello</p>
<p>(integer) 1</p>
</blockquote>
</li>
<li><p>字符串回复</p>
<blockquote>
<p>127.0.0.1:6379&gt; get hello</p>
<p>“world”</p>
</blockquote>
</li>
<li><p>多行字符串回复</p>
<blockquote>
<p>127.0.0.1:6379&gt; mget hello field</p>
<p>1) “world”<br>2) “bar”</p>
</blockquote>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>redis</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据结构篇之哈希篇</title>
    <url>/article/redis-data-struct-hash/</url>
    <content><![CDATA[<h2 id="键值结构"><a href="#键值结构" class="headerlink" title="键值结构"></a>键值结构</h2><ul>
<li>value是一个由2部分组成的，一个是field，一个是value</li>
<li>field不能相同，但是value可以相同</li>
<li>举例来说，描述一个学生的信息，包括有姓名，年龄，性别，等等， 姓名就是一个field，名称就是field对应的值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget user1 name</span><br><span class="line">&quot;jox&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall user1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;jox&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">5) &quot;sex&quot;</span><br><span class="line">6) &quot;N&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h3><blockquote>
<p>hget key field</p>
<ul>
<li>获取hash key对应field的value</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h3><blockquote>
<p>hset key field value</p>
<ul>
<li>设置hash key对应field的value</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h3><blockquote>
<p>hdel key field</p>
<ul>
<li>删除hash key对应field的value</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="hexists"><a href="#hexists" class="headerlink" title="hexists"></a>hexists</h3><blockquote>
<p>hexists key field</p>
<ul>
<li>判断hash key是否有field</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="hlen"><a href="#hlen" class="headerlink" title="hlen"></a>hlen</h3><blockquote>
<p>hlen key</p>
<ul>
<li>获取hash key的field数量</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="hmget"><a href="#hmget" class="headerlink" title="hmget"></a>hmget</h3><blockquote>
<p>hmget key field1 field2 ….fieldN</p>
<ul>
<li>批量获取hash key的指定所有field对应的值</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="hmset"><a href="#hmset" class="headerlink" title="hmset"></a>hmset</h3><blockquote>
<p>hmset key field1 value1 …. fieldN valueN</p>
<ul>
<li>批量设置hash key的field value</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h3><blockquote>
<p>hgetall key </p>
<ul>
<li>返回hash key对应的所有field和value</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="hvals"><a href="#hvals" class="headerlink" title="hvals"></a>hvals</h3><blockquote>
<p>hvals key</p>
<ul>
<li>获取hash key对应所有field的value</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h3><blockquote>
<p>hkeys key</p>
<ul>
<li>获取hash key对应所有field</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="hsetnx"><a href="#hsetnx" class="headerlink" title="hsetnx"></a>hsetnx</h3><blockquote>
<p>hsetnx key field value</p>
<ul>
<li>设置hash key 对应field的value，如果field已经存在，则会设置失败</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="hincrby"><a href="#hincrby" class="headerlink" title="hincrby"></a>hincrby</h3><blockquote>
<p>hincrby key field intCounter</p>
<ul>
<li>hash key 对应的field的value自增intCounter</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="hincrbyfloat"><a href="#hincrbyfloat" class="headerlink" title="hincrbyfloat"></a>hincrbyfloat</h3><blockquote>
<p>hincrbyfloat key field floatCounter</p>
<ul>
<li>hash key 对应的field的value自增floatCounter</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>记录网站每个用户个人主页的访问量</li>
<li>缓存一些信息，比如视频网站的单个视频信息，网站登录用户的相关信息</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="hget-hset"><a href="#hget-hset" class="headerlink" title="hget-hset"></a>hget-hset</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user2 name tom</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget user2 name</span><br><span class="line">&quot;tom&quot;</span><br></pre></td></tr></table></figure>
<h3 id="hmset-hmget"><a href="#hmset-hmget" class="headerlink" title="hmset-hmget"></a>hmset-hmget</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset user1 name jox age 20 sex N</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget user1 name age</span><br><span class="line">1) &quot;jox&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall user1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;jox&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;20&quot;</span><br></pre></td></tr></table></figure>
<h3 id="hdel-hgetall-hlen-hexists"><a href="#hdel-hgetall-hlen-hexists" class="headerlink" title="hdel-hgetall-hlen-hexists"></a>hdel-hgetall-hlen-hexists</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hdel user1 sex</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;jox&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; hlen user1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; hexists user1 sex</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hexists user1 name</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
<h3 id="hvals-hkeys"><a href="#hvals-hkeys" class="headerlink" title="hvals-hkeys"></a>hvals-hkeys</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget user1 name age</span><br><span class="line">1) &quot;jox&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals user1</span><br><span class="line">1) &quot;jox&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; hkeys user1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br></pre></td></tr></table></figure>
<h3 id="hincrby-hincrbyfloat"><a href="#hincrby-hincrbyfloat" class="headerlink" title="hincrby-hincrbyfloat"></a>hincrby-hincrbyfloat</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hincrby user3 age 11</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; hget user3 age</span><br><span class="line">&quot;11&quot;</span><br><span class="line">127.0.0.1:6379&gt; hincrbyfloat user3 age 89.5</span><br><span class="line">&quot;100.5&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget user3 age</span><br><span class="line">&quot;100.5&quot;</span><br><span class="line">127.0.0.1:6379&gt; hsetnx user3 age 2000</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hget user3 age</span><br><span class="line">&quot;100.5&quot;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis位图</title>
    <url>/article/redis-bitmap/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>BitMap也称位图，位图不是真正的数据类型，是定义在字符串类型中，一个字符串类型的值最多能存储512M字节的内容</li>
<li>位图其实就是byte[]数组，用二进制表示，只有0和1两个数字，是通过1个bit位来表示某个元素对应的值或者状态,也就是说一个bit能存储的最多信息是2</li>
<li>位数组是自动扩展的，如果设置了某个偏移位置超出了现有范围，就会自动将位数组进行零扩充</li>
<li>有符号数是指获取的位数组中第一个位是符号位，剩下的才是值。如果第一位是1，那就是负数。无符号数表示非负数，没有符号位，获取的位数组全部都是值。有符号数最多可以获取64位，无符号数只能获取63位，因为redis协议中的integer是有符号数，最大位64位，不能传递64位无符号值。</li>
</ol>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h3><blockquote>
<p>setbit key offset value</p>
</blockquote>
<ul>
<li>给位图指定索引设置值</li>
</ul>
<h3 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h3><blockquote>
<p>getbit key offset</p>
</blockquote>
<ul>
<li>获取位图指定索引的值</li>
</ul>
<h3 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a>bitcount</h3><blockquote>
<p>bitcount key [start end]</p>
</blockquote>
<ul>
<li>获取位图指定范围(start到end，单位为字节，如果不指定就是获取全部)位值为1的个数</li>
</ul>
<h3 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h3><blockquote>
<p>bitop op destkey key [key…..]</p>
</blockquote>
<ul>
<li>对一个或多个保存二进制位的字符串key进行位操作，并将结果保存在destkey上，op有以下四种值<ul>
<li>and，逻辑与</li>
<li>or，逻辑或</li>
<li>not，逻辑非</li>
<li>xor，逻辑异或</li>
</ul>
</li>
<li>除了not操作符外，其他操作都可以接受一个或多个key进行操作</li>
<li>bitop处理不同长度字符串时，较短的那个字符串所缺少的部分会被看做0，空的key也会被看作是包含0的字符串序列</li>
</ul>
<h3 id="bitpos"><a href="#bitpos" class="headerlink" title="bitpos"></a>bitpos</h3><blockquote>
<p>bitpos key targetBit [start] [end]</p>
</blockquote>
<ul>
<li>返回指定值是0或1在指定区间上首次出现的下标，(start到end，单位为字节，如果不指定就是获取全部)</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>独立用户统计,用时间作为缓存的key，然后用户id为offset，如果当日活跃过就设置为1。之后通过bitOp进行二进制计算算出在某段时间内用户的活跃情况</li>
<li>存储视频的属性信息</li>
<li>用户在线状态统计, 用户id为偏移量offset，如果在线就设置为1，不在线就设置为0</li>
<li>用户签到，key主要由uid组成，设定一个初始时间，往后没加一天即对应value中的offset的位置。</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>它的实质上还是字符串，最大只能存储512M字节的内容</li>
<li>如果setbit时偏移量比较大，设置时会产生非常大的耗时</li>
<li>位图不是绝对的好，有利也有弊</li>
</ol>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="setbit-1"><a href="#setbit-1" class="headerlink" title="setbit"></a>setbit</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set hello big</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;big&quot;</span><br><span class="line">127.0.0.1:6379&gt; setbit hello 7 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;cig&quot;</span><br></pre></td></tr></table></figure>
<p>我们可以看到原来存储的big变成了cig</p>
<h3 id="getbit-1"><a href="#getbit-1" class="headerlink" title="getbit"></a>getbit</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set hello big</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;big&quot;</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 3</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 4</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 5</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 6</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 7</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 8</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<h3 id="bitcount-1"><a href="#bitcount-1" class="headerlink" title="bitcount"></a>bitcount</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit k1 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;@&quot;</span><br><span class="line">127.0.0.1:6379&gt; setbit k1 7 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;A&quot;</span><br><span class="line">127.0.0.1:6379&gt; setbit k1 9 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;A@&quot;</span><br><span class="line">127.0.0.1:6379&gt; bitcount k1</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; bitcount k1 0 0 // 第一个字节</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; bitcount k1 0 1</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; bitcount k1 1 1 // 第二个字节</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; bitcount k1 2 2</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<h3 id="bitpos-1"><a href="#bitpos-1" class="headerlink" title="bitpos"></a>bitpos</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitpos k1 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; bitpos k1 1 0 0</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; bitpos k1 1 1 1</span><br><span class="line">(integer) 9</span><br></pre></td></tr></table></figure>
<h3 id="bitop-1"><a href="#bitop-1" class="headerlink" title="bitop"></a>bitop</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">27.0.0.1:6379&gt; setbit k1 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit k2 7 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; bitop and k3 k1k 2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br><span class="line">127.0.0.1:6379&gt; bitop and k3 k1 k2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;\x00&quot;</span><br><span class="line">127.0.0.1:6379&gt; bitop or k4 k1 k2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">&quot;A&quot;</span><br><span class="line">127.0.0.1:6379&gt; bitop not k5 k2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get k5</span><br><span class="line">&quot;\xfe&quot;</span><br><span class="line">127.0.0.1:6379&gt; bitop xor k6 k1 k2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get k6</span><br><span class="line">&quot;A&quot;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据结构篇之列表篇</title>
    <url>/article/redis-data-struct-list/</url>
    <content><![CDATA[<h2 id="键值结构"><a href="#键值结构" class="headerlink" title="键值结构"></a>键值结构</h2><ul>
<li>key-value构成，value是一个列表类型,里面包含多个元素</li>
<li>value中的元素是有序的,并且可以是重复的</li>
<li>value中的元素可以从两边添加或者弹出</li>
</ul>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h3><blockquote>
<p>rpush key value1 value2 … valueN</p>
<ul>
<li>从列表右端插入值</li>
<li>时间复杂度:O(1~n)</li>
</ul>
</blockquote>
<h3 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h3><blockquote>
<p>lpush key value1 value2 … valueN</p>
<ul>
<li>从列表左端插入值</li>
<li>时间复杂度:O(1~n)</li>
</ul>
</blockquote>
<h3 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h3><blockquote>
<p>linsert key before|after value newValue</p>
<ul>
<li>在list key指定的值前面或后面插入新的值</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h3><blockquote>
<p>lpop key</p>
<ul>
<li>从列表左侧弹出一个item</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="rpop"><a href="#rpop" class="headerlink" title="rpop"></a>rpop</h3><blockquote>
<p>rpop key</p>
<ul>
<li>从列表右侧弹出一个item</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h3><blockquote>
<p>lrem key count value</p>
<ul>
<li>从列表中删除指定count个value项<ul>
<li>count &gt; 0, 从左到右删除count个value项</li>
<li>count &lt; 0, 从右到左删除 |count|(绝对值)个value</li>
<li>count = 0, 删除所有value相对的项  </li>
</ul>
</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim"></a>ltrim</h3><blockquote>
<p>ltrim key [start end]</p>
<ul>
<li>保留索引范围内数据列表，包括 start 与 end </li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h3><blockquote>
<p>lrange key start end]</p>
<ul>
<li>获取列表指定索引范围的所有item,包含end</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h3><blockquote>
<p>lindex key index</p>
<ul>
<li>获取列表指定索引的item</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h3><blockquote>
<p>llen key</p>
<ul>
<li>获取列表长度</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h3><blockquote>
<p>lset key index newValue</p>
<ul>
<li>设置列表指定索引值为newValue</li>
<li>时间复杂度:O(n)</li>
</ul>
</blockquote>
<h3 id="blpop"><a href="#blpop" class="headerlink" title="blpop"></a>blpop</h3><blockquote>
<p>blpop key timeout</p>
<ul>
<li>阻塞版从左侧弹出一个item,timeout表示超时时间,值为0表示永不阻塞</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="brpop"><a href="#brpop" class="headerlink" title="brpop"></a>brpop</h3><blockquote>
<p>brpop key timeout</p>
<ul>
<li>阻塞版从右侧弹出一个item,timeout表示超时时间,值为0表示永不阻塞</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<font color='red'> LPUSH + BRPOP 可以实现消息队列 </font>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>关注的人更新帖子</li>
<li>消息队列</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="lpush-lrange-lpop"><a href="#lpush-lrange-lpop" class="headerlink" title="lpush-lrange-lpop"></a>lpush-lrange-lpop</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list1 a b c d e f g a b c d e f g</span><br><span class="line">(integer) 14</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line"> 1) &quot;g&quot;</span><br><span class="line"> 2) &quot;f&quot;</span><br><span class="line"> 3) &quot;e&quot;</span><br><span class="line"> 4) &quot;d&quot;</span><br><span class="line"> 5) &quot;c&quot;</span><br><span class="line"> 6) &quot;b&quot;</span><br><span class="line"> 7) &quot;a&quot;</span><br><span class="line"> 8) &quot;g&quot;</span><br><span class="line"> 9) &quot;f&quot;</span><br><span class="line">10) &quot;e&quot;</span><br><span class="line">11) &quot;d&quot;</span><br><span class="line">12) &quot;c&quot;</span><br><span class="line">13) &quot;b&quot;</span><br><span class="line">14) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop list1</span><br><span class="line">&quot;g&quot;</span><br></pre></td></tr></table></figure>
<h3 id="rpush-lrange-rpop"><a href="#rpush-lrange-rpop" class="headerlink" title="rpush-lrange-rpop"></a>rpush-lrange-rpop</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush list2 a b c d e f g g g d e df dddd sss a aa ee c c c d e f f a</span><br><span class="line">(integer) 25</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line"> 1) &quot;a&quot;</span><br><span class="line"> 2) &quot;b&quot;</span><br><span class="line"> 3) &quot;c&quot;</span><br><span class="line"> 4) &quot;d&quot;</span><br><span class="line"> 5) &quot;e&quot;</span><br><span class="line"> 6) &quot;f&quot;</span><br><span class="line"> 7) &quot;g&quot;</span><br><span class="line"> 8) &quot;g&quot;</span><br><span class="line"> 9) &quot;g&quot;</span><br><span class="line">10) &quot;d&quot;</span><br><span class="line">11) &quot;e&quot;</span><br><span class="line">12) &quot;df&quot;</span><br><span class="line">13) &quot;dddd&quot;</span><br><span class="line">14) &quot;sss&quot;</span><br><span class="line">15) &quot;a&quot;</span><br><span class="line">16) &quot;aa&quot;</span><br><span class="line">17) &quot;ee&quot;</span><br><span class="line">18) &quot;c&quot;</span><br><span class="line">19) &quot;c&quot;</span><br><span class="line">20) &quot;c&quot;</span><br><span class="line">21) &quot;d&quot;</span><br><span class="line">22) &quot;e&quot;</span><br><span class="line">23) &quot;f&quot;</span><br><span class="line">24) &quot;f&quot;</span><br><span class="line">25) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list2</span><br><span class="line">&quot;a&quot;</span><br></pre></td></tr></table></figure>
<h3 id="rpush-linsert"><a href="#rpush-linsert" class="headerlink" title="rpush-linsert"></a>rpush-linsert</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush list3 a b c d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list3 0 -1</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">4) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert list3 before b b2</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list3 0 -1</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b2&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert list3 after a a2</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list3 0 -1</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;a2&quot;</span><br><span class="line">3) &quot;b2&quot;</span><br><span class="line">4) &quot;b&quot;</span><br><span class="line">5) &quot;c&quot;</span><br><span class="line">6) &quot;d&quot;</span><br></pre></td></tr></table></figure>
<h3 id="lrem-1"><a href="#lrem-1" class="headerlink" title="lrem"></a>lrem</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line"> 1) &quot;f&quot;</span><br><span class="line"> 2) &quot;e&quot;</span><br><span class="line"> 3) &quot;d&quot;</span><br><span class="line"> 4) &quot;c&quot;</span><br><span class="line"> 5) &quot;b&quot;</span><br><span class="line"> 6) &quot;a&quot;</span><br><span class="line"> 7) &quot;g&quot;</span><br><span class="line"> 8) &quot;f&quot;</span><br><span class="line"> 9) &quot;e&quot;</span><br><span class="line">10) &quot;d&quot;</span><br><span class="line">11) &quot;c&quot;</span><br><span class="line">12) &quot;b&quot;</span><br><span class="line">13) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem list1 -1 a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line"> 1) &quot;f&quot;</span><br><span class="line"> 2) &quot;e&quot;</span><br><span class="line"> 3) &quot;d&quot;</span><br><span class="line"> 4) &quot;c&quot;</span><br><span class="line"> 5) &quot;b&quot;</span><br><span class="line"> 6) &quot;a&quot;</span><br><span class="line"> 7) &quot;g&quot;</span><br><span class="line"> 8) &quot;f&quot;</span><br><span class="line"> 9) &quot;e&quot;</span><br><span class="line">10) &quot;d&quot;</span><br><span class="line">11) &quot;c&quot;</span><br><span class="line">12) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem list1 1 a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line"> 1) &quot;f&quot;</span><br><span class="line"> 2) &quot;e&quot;</span><br><span class="line"> 3) &quot;d&quot;</span><br><span class="line"> 4) &quot;c&quot;</span><br><span class="line"> 5) &quot;b&quot;</span><br><span class="line"> 6) &quot;g&quot;</span><br><span class="line"> 7) &quot;f&quot;</span><br><span class="line"> 8) &quot;e&quot;</span><br><span class="line"> 9) &quot;d&quot;</span><br><span class="line">10) &quot;c&quot;</span><br><span class="line">11) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line"> 1) &quot;a&quot;</span><br><span class="line"> 2) &quot;b&quot;</span><br><span class="line"> 3) &quot;c&quot;</span><br><span class="line"> 4) &quot;d&quot;</span><br><span class="line"> 5) &quot;e&quot;</span><br><span class="line"> 6) &quot;f&quot;</span><br><span class="line"> 7) &quot;g&quot;</span><br><span class="line"> 8) &quot;g&quot;</span><br><span class="line"> 9) &quot;g&quot;</span><br><span class="line">10) &quot;d&quot;</span><br><span class="line">11) &quot;e&quot;</span><br><span class="line">12) &quot;df&quot;</span><br><span class="line">13) &quot;dddd&quot;</span><br><span class="line">14) &quot;sss&quot;</span><br><span class="line">15) &quot;a&quot;</span><br><span class="line">16) &quot;aa&quot;</span><br><span class="line">17) &quot;ee&quot;</span><br><span class="line">18) &quot;c&quot;</span><br><span class="line">19) &quot;c&quot;</span><br><span class="line">20) &quot;c&quot;</span><br><span class="line">21) &quot;d&quot;</span><br><span class="line">22) &quot;e&quot;</span><br><span class="line">23) &quot;f&quot;</span><br><span class="line">24) &quot;f&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem list2 0 g</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line"> 1) &quot;a&quot;</span><br><span class="line"> 2) &quot;b&quot;</span><br><span class="line"> 3) &quot;c&quot;</span><br><span class="line"> 4) &quot;d&quot;</span><br><span class="line"> 5) &quot;e&quot;</span><br><span class="line"> 6) &quot;f&quot;</span><br><span class="line"> 7) &quot;d&quot;</span><br><span class="line"> 8) &quot;e&quot;</span><br><span class="line"> 9) &quot;df&quot;</span><br><span class="line">10) &quot;dddd&quot;</span><br><span class="line">11) &quot;sss&quot;</span><br><span class="line">12) &quot;a&quot;</span><br><span class="line">13) &quot;aa&quot;</span><br><span class="line">14) &quot;ee&quot;</span><br><span class="line">15) &quot;c&quot;</span><br><span class="line">16) &quot;c&quot;</span><br><span class="line">17) &quot;c&quot;</span><br><span class="line">18) &quot;d&quot;</span><br><span class="line">19) &quot;e&quot;</span><br><span class="line">20) &quot;f&quot;</span><br><span class="line">21) &quot;f&quot;</span><br></pre></td></tr></table></figure>
<h3 id="ltrim-1"><a href="#ltrim-1" class="headerlink" title="ltrim"></a>ltrim</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; ltrim l1 0 4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;d&quot;</span><br></pre></td></tr></table></figure>
<h3 id="lindex-1"><a href="#lindex-1" class="headerlink" title="lindex"></a>lindex</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line"> 1) &quot;a&quot;</span><br><span class="line"> 2) &quot;b&quot;</span><br><span class="line"> 3) &quot;c&quot;</span><br><span class="line"> 4) &quot;d&quot;</span><br><span class="line"> 5) &quot;e&quot;</span><br><span class="line"> 6) &quot;f&quot;</span><br><span class="line"> 7) &quot;d&quot;</span><br><span class="line"> 8) &quot;e&quot;</span><br><span class="line"> 9) &quot;df&quot;</span><br><span class="line">10) &quot;dddd&quot;</span><br><span class="line">11) &quot;sss&quot;</span><br><span class="line">12) &quot;a&quot;</span><br><span class="line">13) &quot;aa&quot;</span><br><span class="line">14) &quot;ee&quot;</span><br><span class="line">15) &quot;c&quot;</span><br><span class="line">16) &quot;c&quot;</span><br><span class="line">17) &quot;c&quot;</span><br><span class="line">18) &quot;d&quot;</span><br><span class="line">19) &quot;e&quot;</span><br><span class="line">20) &quot;f&quot;</span><br><span class="line">21) &quot;f&quot;</span><br><span class="line">127.0.0.1:6379&gt; lindex list2 0</span><br><span class="line">&quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; lindex list2 -1</span><br><span class="line">&quot;f&quot;</span><br></pre></td></tr></table></figure>
<h3 id="lset-1"><a href="#lset-1" class="headerlink" title="lset"></a>lset</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; llen list2</span><br><span class="line">(integer) 21</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line"> 1) &quot;a&quot;</span><br><span class="line"> 2) &quot;b&quot;</span><br><span class="line"> 3) &quot;c&quot;</span><br><span class="line"> 4) &quot;d&quot;</span><br><span class="line"> 5) &quot;e&quot;</span><br><span class="line"> 6) &quot;f&quot;</span><br><span class="line"> 7) &quot;d&quot;</span><br><span class="line"> 8) &quot;e&quot;</span><br><span class="line"> 9) &quot;df&quot;</span><br><span class="line">10) &quot;dddd&quot;</span><br><span class="line">11) &quot;sss&quot;</span><br><span class="line">12) &quot;a&quot;</span><br><span class="line">13) &quot;aa&quot;</span><br><span class="line">14) &quot;ee&quot;</span><br><span class="line">15) &quot;c&quot;</span><br><span class="line">16) &quot;c&quot;</span><br><span class="line">17) &quot;c&quot;</span><br><span class="line">18) &quot;d&quot;</span><br><span class="line">19) &quot;e&quot;</span><br><span class="line">20) &quot;f&quot;</span><br><span class="line">21) &quot;f&quot;</span><br><span class="line">127.0.0.1:6379&gt; lset list2 0 a2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line"> 1) &quot;a2&quot;</span><br><span class="line"> 2) &quot;b&quot;</span><br><span class="line"> 3) &quot;c&quot;</span><br><span class="line"> 4) &quot;d&quot;</span><br><span class="line"> 5) &quot;e&quot;</span><br><span class="line"> 6) &quot;f&quot;</span><br><span class="line"> 7) &quot;d&quot;</span><br><span class="line"> 8) &quot;e&quot;</span><br><span class="line"> 9) &quot;df&quot;</span><br><span class="line">10) &quot;dddd&quot;</span><br><span class="line">11) &quot;sss&quot;</span><br><span class="line">12) &quot;a&quot;</span><br><span class="line">13) &quot;aa&quot;</span><br><span class="line">14) &quot;ee&quot;</span><br><span class="line">15) &quot;c&quot;</span><br><span class="line">16) &quot;c&quot;</span><br><span class="line">17) &quot;c&quot;</span><br><span class="line">18) &quot;d&quot;</span><br><span class="line">19) &quot;e&quot;</span><br><span class="line">20) &quot;f&quot;</span><br><span class="line">21) &quot;f&quot;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据结构篇之集合篇</title>
    <url>/article/redis-data-struct-set/</url>
    <content><![CDATA[<h2 id="键值结构"><a href="#键值结构" class="headerlink" title="键值结构"></a>键值结构</h2><ul>
<li>key-value构成，value是一个集合类型,里面包含多个元素</li>
<li>value中的元素是无序的,并且是不能重复的</li>
</ul>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h3><blockquote>
<p>sadd key element</p>
<ul>
<li>向集合key添加element,如果element已存在添加失败</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="srem"><a href="#srem" class="headerlink" title="srem"></a>srem</h3><blockquote>
<p>srem key element</p>
<ul>
<li>将集合中的element移除掉</li>
<li>时间复杂度:O(1)</li>
</ul>
</blockquote>
<h3 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h3><blockquote>
<p>scard key</p>
<ul>
<li>计算集合大小</li>
</ul>
</blockquote>
<h3 id="sismember"><a href="#sismember" class="headerlink" title="sismember"></a>sismember</h3><blockquote>
<p>sismember key element</p>
<ul>
<li>判断element是否在集合中</li>
</ul>
</blockquote>
<h3 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h3><blockquote>
<p>smembers key</p>
<ul>
<li>获取集合key中所有元素</li>
</ul>
</blockquote>
<h3 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h3><blockquote>
<p>srandmember key count</p>
<ul>
<li>从集合中随机输出count个element</li>
</ul>
</blockquote>
<h3 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h3><blockquote>
<p>spop key count</p>
<ul>
<li>从集合中随机弹出count个element</li>
</ul>
</blockquote>
<h3 id="sdiff"><a href="#sdiff" class="headerlink" title="sdiff"></a>sdiff</h3><blockquote>
<p>sdiff key1 key2</p>
<ul>
<li>计算两个集合key的差集</li>
</ul>
</blockquote>
<h3 id="sinter"><a href="#sinter" class="headerlink" title="sinter"></a>sinter</h3><blockquote>
<p>sinter key1 key2</p>
<ul>
<li>计算两个集合key的交集</li>
</ul>
</blockquote>
<h3 id="sunion"><a href="#sunion" class="headerlink" title="sunion"></a>sunion</h3><blockquote>
<p>sunion key1 key2</p>
<ul>
<li>计算两个集合key的并集</li>
</ul>
</blockquote>
<h3 id="sdiff-sunion-sinter-store"><a href="#sdiff-sunion-sinter-store" class="headerlink" title="sdiff(|sunion|sinter)store"></a>sdiff(|sunion|sinter)store</h3><blockquote>
<p>sdiff(sinter|sunion)store sourSet key1 key2 </p>
<ul>
<li>将两个集合的结果(sdiff差集,sinter交集,sunion并集)保存到目标集合中</li>
</ul>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>网站中给用户设置标签</li>
<li>网站中与其他用户的共同关注的列表</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="sadd-scard-sismember-srandmember"><a href="#sadd-scard-sismember-srandmember" class="headerlink" title="sadd-scard-sismember-srandmember"></a>sadd-scard-sismember-srandmember</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd s1 a b c d e f g</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; scard s1</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; sismember s1 a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; srandmember s1 1</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; srandmember s1 3</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;e&quot;</span><br><span class="line">3) &quot;c&quot;</span><br></pre></td></tr></table></figure>
<h3 id="smembers-1"><a href="#smembers-1" class="headerlink" title="smembers"></a>smembers</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers s1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">4) &quot;f&quot;</span><br><span class="line">5) &quot;g&quot;</span><br><span class="line">6) &quot;e&quot;</span><br><span class="line">7) &quot;c&quot;</span><br></pre></td></tr></table></figure>
<h3 id="spop-1"><a href="#spop-1" class="headerlink" title="spop"></a>spop</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers s1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">4) &quot;g&quot;</span><br><span class="line">5) &quot;e&quot;</span><br><span class="line">6) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop s1 2</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers s1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;g&quot;</span><br><span class="line">4) &quot;e&quot;</span><br></pre></td></tr></table></figure>
<h3 id="sadd-sdiff-sunion-sinter"><a href="#sadd-sdiff-sunion-sinter" class="headerlink" title="sadd-sdiff-sunion-sinter"></a>sadd-sdiff-sunion-sinter</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd s2 it music his sports</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; sadd s3 it news ent sports</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; sdiff s2 s3</span><br><span class="line">1) &quot;his&quot;</span><br><span class="line">2) &quot;music&quot;</span><br><span class="line">127.0.0.1:6379&gt; sinter s2 s3</span><br><span class="line">1) &quot;it&quot;</span><br><span class="line">2) &quot;sports&quot;</span><br><span class="line">127.0.0.1:6379&gt; sunion s2 s3</span><br><span class="line">1) &quot;ent&quot;</span><br><span class="line">2) &quot;his&quot;</span><br><span class="line">3) &quot;music&quot;</span><br><span class="line">4) &quot;news&quot;</span><br><span class="line">5) &quot;it&quot;</span><br><span class="line">6) &quot;sports&quot;</span><br><span class="line">127.0.0.1:6379&gt; sdiffstore s4 s2 s3</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; smembers s4</span><br><span class="line">1) &quot;his&quot;</span><br><span class="line">2) &quot;music&quot;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据结构篇之字符串篇</title>
    <url>/article/redis-data-struct-string/</url>
    <content><![CDATA[<h2 id="键值结构"><a href="#键值结构" class="headerlink" title="键值结构"></a>键值结构</h2><ul>
<li>是一个简单的key-value形式，</li>
<li>value最多可以容纳的数据长度是512M</li>
</ul>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><blockquote>
<p>set key value</p>
</blockquote>
<ul>
<li>设置key-value,不管key是否存在都会设置</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h3><blockquote>
<p>setnx key value</p>
</blockquote>
<ul>
<li>key不存在才会设置值</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="set-xx"><a href="#set-xx" class="headerlink" title="set xx"></a>set xx</h3><blockquote>
<p>set key value xx</p>
</blockquote>
<ul>
<li>key存在才会设置值,会覆盖原来的值</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="set-ex"><a href="#set-ex" class="headerlink" title="set ex"></a>set ex</h3><blockquote>
<p>set key value ex second</p>
</blockquote>
<ul>
<li>设置key多少秒后过期，过期后key会被自动删除</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><blockquote>
<p>get key</p>
</blockquote>
<ul>
<li>获取key对应的value</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><blockquote>
<p>del key</p>
</blockquote>
<ul>
<li>删除key-value</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h3><blockquote>
<p>incr key</p>
</blockquote>
<ul>
<li>key的值自增1，如果key不存在，自增后key的值为1</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h3><blockquote>
<p>decr key</p>
</blockquote>
<ul>
<li>key的值自减1，如果key不存在，自减后key的值为-1</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="incrby"><a href="#incrby" class="headerlink" title="incrby"></a>incrby</h3><blockquote>
<p>incrby key number</p>
</blockquote>
<ul>
<li>key的值增加number，如果key不存在，自增后key的值为number</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="decrby"><a href="#decrby" class="headerlink" title="decrby"></a>decrby</h3><blockquote>
<p>decrby key number</p>
</blockquote>
<ul>
<li>key的值自减number，如果key不存在，自减后key的值为-number</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h3><blockquote>
<p>mget key1 key2 key3 …</p>
</blockquote>
<ul>
<li>批量获取key，原子操作</li>
<li>时间复杂度:O(n)</li>
</ul>
<h3 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h3><blockquote>
<p>mset key1 value1 key2 value2 …</p>
</blockquote>
<ul>
<li>批量设置key-value</li>
<li>时间复杂度:O(n)</li>
</ul>
<h3 id="getset"><a href="#getset" class="headerlink" title="getset"></a>getset</h3><blockquote>
<p>getset key newvalue</p>
</blockquote>
<ul>
<li>设置key的值为newvalue，返回key原来的值</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><blockquote>
<p>append key value</p>
</blockquote>
<ul>
<li>将value追加到旧的value</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h3><blockquote>
<p>strlen key</p>
</blockquote>
<ul>
<li>返回字符串的长度，使用时需要注意中文</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="incrbyfloat"><a href="#incrbyfloat" class="headerlink" title="incrbyfloat"></a>incrbyfloat</h3><blockquote>
<p>incrbyfloat key floatNumber</p>
</blockquote>
<ul>
<li>key的值增加floatNumber，如果key不存在，自增后key的值为floatNumber</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h3><blockquote>
<p>getrange key [start end]</p>
</blockquote>
<ul>
<li>获取字符串指定下标的所有值，需要注意左边下标是从0开始，右边是从-1开始</li>
<li>时间复杂度:O(1)</li>
</ul>
<h3 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h3><blockquote>
<p>setrange key index value</p>
</blockquote>
<ul>
<li>设置指定下标对应的值</li>
<li>时间复杂度:O(1)</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>缓存</li>
<li>计数器</li>
<li>分布式锁</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="set-get"><a href="#set-get" class="headerlink" title="set-get"></a>set-get</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置key-value</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;v1&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># k2不存在才会被设置    </span><br><span class="line">127.0.0.1:6379&gt; setnx k2 v3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;v3&quot;</span><br><span class="line"># k2已存在设置新值失败了</span><br><span class="line">127.0.0.1:6379&gt; setnx k2 v2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;v3&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># k2已存在并且被修改了新值</span><br><span class="line">127.0.0.1:6379&gt; set k2 v3 xx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;v3&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># k3不存在    </span><br><span class="line">127.0.0.1:6379&gt; set k3 v3 xx</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置k4 12秒后过期</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4 ex 12</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl k4</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil) ， 此时k4已过期</span><br></pre></td></tr></table></figure>
<h3 id="incrbyfloat-1"><a href="#incrbyfloat-1" class="headerlink" title="incrbyfloat"></a>incrbyfloat</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># f1 增加 0.5</span><br><span class="line">127.0.0.1:6379&gt; incrbyfloat f1 0.5</span><br><span class="line">&quot;0.5&quot;</span><br><span class="line">127.0.0.1:6379&gt; get f1</span><br><span class="line">&quot;0.5&quot;</span><br></pre></td></tr></table></figure>
<h3 id="del-1"><a href="#del-1" class="headerlink" title="del"></a>del</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除f1</span><br><span class="line">127.0.0.1:6379&gt; del f1</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
<h3 id="incr-decr-decrby"><a href="#incr-decr-decrby" class="headerlink" title="incr-decr-decrby"></a>incr-decr-decrby</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 增加与减少数字 incr incrby decr decrby</span><br><span class="line">127.0.0.1:6379&gt; set kn1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get kn1</span><br><span class="line">&quot;100&quot;</span><br><span class="line">127.0.0.1:6379&gt; incr kn1</span><br><span class="line">(integer) 101</span><br><span class="line">127.0.0.1:6379&gt; get kn1</span><br><span class="line">&quot;101&quot;</span><br><span class="line">127.0.0.1:6379&gt; incrby kn1 200</span><br><span class="line">(integer) 301</span><br><span class="line">127.0.0.1:6379&gt; get kn1</span><br><span class="line">&quot;301&quot;</span><br><span class="line">127.0.0.1:6379&gt; decr kn1</span><br><span class="line">(integer) 300</span><br><span class="line">127.0.0.1:6379&gt; get kn1</span><br><span class="line">&quot;300&quot;</span><br><span class="line">127.0.0.1:6379&gt; decrby kn1 150</span><br><span class="line">(integer) 150</span><br><span class="line">127.0.0.1:6379&gt; get kn1</span><br><span class="line">&quot;150&quot;</span><br></pre></td></tr></table></figure>
<h3 id="getset-1"><a href="#getset-1" class="headerlink" title="getset"></a>getset</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#getset    </span><br><span class="line">127.0.0.1:6379&gt; getset s2 abcd</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get s2</span><br><span class="line">&quot;abcd&quot;</span><br></pre></td></tr></table></figure>
<h3 id="strlen-1"><a href="#strlen-1" class="headerlink" title="strlen"></a>strlen</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#strlen 字符串长度</span><br><span class="line">127.0.0.1:6379&gt; set s1 abcdefghijklmn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get s1</span><br><span class="line">&quot;abcdefghijklmn&quot;</span><br><span class="line">127.0.0.1:6379&gt; strlen s1</span><br><span class="line">(integer) 14</span><br><span class="line">127.0.0.1:6379&gt; set s3 哈哈</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get s3</span><br><span class="line">&quot;\xe5\x93\x88\xe5\x93\x88&quot;</span><br><span class="line">127.0.0.1:6379&gt; strlen s3</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure>
<h3 id="setrange-getrange"><a href="#setrange-getrange" class="headerlink" title="setrange-getrange"></a>setrange-getrange</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#setrange getrange 字符串索引设置</span><br><span class="line">127.0.0.1:6379&gt; get s1</span><br><span class="line">&quot;abcdefghijklmn&quot;</span><br><span class="line">127.0.0.1:6379&gt; getrange s1 0 -1</span><br><span class="line">&quot;abcdefghijklmn&quot;</span><br><span class="line">127.0.0.1:6379&gt; getrange s1 0 2</span><br><span class="line">&quot;abc&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange s1 0 q</span><br><span class="line">(integer) 14</span><br><span class="line">127.0.0.1:6379&gt; get s1</span><br><span class="line">&quot;qbcdefghijklmn&quot;</span><br></pre></td></tr></table></figure>
<h3 id="mget-mset"><a href="#mget-mset" class="headerlink" title="mget-mset"></a>mget-mset</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置与获取多个key的值</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; set k3 v2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3 k4</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v3&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">4) &quot;v4&quot;</span><br><span class="line">127.0.0.1:6379&gt; mset k5 v5 k6 v6 k7 v7</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k5 k6 k7</span><br><span class="line">1) &quot;v5&quot;</span><br><span class="line">2) &quot;v6&quot;</span><br><span class="line">3) &quot;v7&quot;</span><br></pre></td></tr></table></figure>
<h3 id="append-1"><a href="#append-1" class="headerlink" title="append"></a>append</h3><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 追加 append</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; append k1 va</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;v1va&quot;</span><br></pre></td></tr></table></figure></h2>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据结构篇之有序集合篇</title>
    <url>/article/redis-data-struct-zset/</url>
    <content><![CDATA[<h2 id="键值结构"><a href="#键值结构" class="headerlink" title="键值结构"></a>键值结构</h2><ul>
<li>由key-value构成,value由2部分组成, score+element</li>
<li>集合中的元素是有序的,score部分可以重复,element不能重复</li>
</ul>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h3><blockquote>
<p>zadd key score1 element1 … scoreN elementN</p>
<ul>
<li>添加有序集合的元素</li>
<li>时间复杂度: O(logN)</li>
</ul>
</blockquote>
<h3 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h3><blockquote>
<p>zrem key element</p>
<ul>
<li>删除元素</li>
<li>时间复杂度: O(1)</li>
</ul>
</blockquote>
<h3 id="zscore"><a href="#zscore" class="headerlink" title="zscore"></a>zscore</h3><blockquote>
<p>zscore key element</p>
<ul>
<li>返回element元素对应的分数</li>
<li>时间复杂度: O(1)</li>
</ul>
</blockquote>
<h3 id="zincrby"><a href="#zincrby" class="headerlink" title="zincrby"></a>zincrby</h3><blockquote>
<p>zincrby key increScore element</p>
<ul>
<li>增加或减少元素的分数</li>
<li>时间复杂度: O(1)</li>
</ul>
</blockquote>
<h3 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h3><blockquote>
<p>zrange key start end [withscores]</p>
<ul>
<li>获取有序集合key的所有element, withscores会将element对应的分数也会显示出来</li>
</ul>
</blockquote>
<h3 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h3><blockquote>
<p>zcard key </p>
<ul>
<li>返回有序集合key中的总个数</li>
</ul>
</blockquote>
<h3 id="zrank"><a href="#zrank" class="headerlink" title="zrank"></a>zrank</h3><blockquote>
<p>zrank key element</p>
<ul>
<li>返回有序集合中element的排名,不是按照score进行排序的</li>
</ul>
</blockquote>
<h3 id="zrevrank"><a href="#zrevrank" class="headerlink" title="zrevrank"></a>zrevrank</h3><blockquote>
<p>zrevrank key element</p>
<ul>
<li>逆序返回有序集合中element的排名,不是按照score进行排序的</li>
</ul>
</blockquote>
<h3 id="zrangebyscore"><a href="#zrangebyscore" class="headerlink" title="zrangebyscore"></a>zrangebyscore</h3><blockquote>
<p>zrangebyscore key minScore maxScore [withscores]</p>
<ul>
<li>获取指定分数段的集合元素</li>
</ul>
</blockquote>
<h3 id="zrevrangebyscore"><a href="#zrevrangebyscore" class="headerlink" title="zrevrangebyscore"></a>zrevrangebyscore</h3><blockquote>
<p>zrevrangebyscore key maxScore minScore [withscores]</p>
<ul>
<li>逆序获取指定分数段的集合元素</li>
</ul>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>榜单列表,热搜榜</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="zadd-zrem-zrange"><a href="#zadd-zrem-zrange" class="headerlink" title="zadd-zrem-zrange"></a>zadd-zrem-zrange</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zt 100 a 99 b 88 c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrem zt a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange zt 0 -1</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br></pre></td></tr></table></figure>
<h3 id="zscore-zcard-zrange"><a href="#zscore-zcard-zrange" class="headerlink" title="zscore-zcard-zrange"></a>zscore-zcard-zrange</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore zt a</span><br><span class="line">&quot;100&quot;</span><br><span class="line">127.0.0.1:6379&gt; zcard zt</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange zt 0 -1</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrange zt 0 -1 withscores</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;88&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;99&quot;</span><br><span class="line">5) &quot;a&quot;</span><br><span class="line">6) &quot;100&quot;</span><br></pre></td></tr></table></figure>
<h3 id="zincrby-1"><a href="#zincrby-1" class="headerlink" title="zincrby"></a>zincrby</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zincrby zt 1000 a</span><br><span class="line">&quot;1100&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrange zt 0 -1 withscores</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;88&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;99&quot;</span><br><span class="line">5) &quot;a&quot;</span><br><span class="line">6) &quot;1100&quot;</span><br></pre></td></tr></table></figure>
<h3 id="zrank-zrevrank-zrevrange"><a href="#zrank-zrevrank-zrevrange" class="headerlink" title="zrank-zrevrank-zrevrange"></a>zrank-zrevrank-zrevrange</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange zt 0 -1</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrange zt 0 -1 withscores</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;88&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;99&quot;</span><br><span class="line">5) &quot;a&quot;</span><br><span class="line">6) &quot;1100&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrank zt a</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; zrevrank zt a</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; zrevrange zt 0 -1 withscores</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;1100&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;99&quot;</span><br><span class="line">5) &quot;c&quot;</span><br><span class="line">6) &quot;88&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore zt 10 1000</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrevrangebyscore zt 1000 10 withscores</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;99&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">4) &quot;88&quot;</span><br></pre></td></tr></table></figure>
<h3 id="zinterstore"><a href="#zinterstore" class="headerlink" title="zinterstore"></a>zinterstore</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zc 100 a 99 b 88 c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zadd zb 101 a 99 b 88 c 77 d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; zinterstore zi 2 zc zb</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange zi 0 -1 withscores</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;176&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;198&quot;</span><br><span class="line">5) &quot;a&quot;</span><br><span class="line">6) &quot;201&quot;</span><br><span class="line">127.0.0.1:6379&gt; zadd zset1 1 one</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zset1 2 two</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange zset1 0 -1 withscores</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; zadd zset2 1 one 2 two 3 three</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange zset2 0 -1 withscores</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;three&quot;</span><br><span class="line">6) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; zunionstore out 2 zset1 zset2 weights 1 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange out 0 -1 withscores</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;8&quot;</span><br><span class="line">5) &quot;three&quot;</span><br><span class="line">6) &quot;9&quot;</span><br><span class="line">127.0.0.1:6379&gt; zunionstore out2 2 zset1 zset2 weights 2 3 # weights 2 3 表示第一个集合中元素*2，第二个集合中元素*3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange out2 0 -1 withscores</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">4) &quot;9&quot;</span><br><span class="line">5) &quot;two&quot;</span><br><span class="line">6) &quot;10&quot;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redisGEO</title>
    <url>/article/redis-geo/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>GEO(地理信息定位)：存储经纬度，计算两地距离，范围计算等。</li>
<li>这玩意本质上是一个有序集合，但是没有像有序集合那样有删除key的API操作</li>
</ul>
<p><a href="https://jingweidu.bmcx.com/," title="经纬度查询">获取经纬度</a></p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="geoadd"><a href="#geoadd" class="headerlink" title="geoadd"></a>geoadd</h3><blockquote>
<p>geoadd key longitude latitude member</p>
</blockquote>
<ul>
<li>用于存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中</li>
</ul>
<h3 id="geopos"><a href="#geopos" class="headerlink" title="geopos"></a>geopos</h3><blockquote>
<p>geopos key member</p>
</blockquote>
<ul>
<li>用于从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil</li>
</ul>
<h3 id="geodist"><a href="#geodist" class="headerlink" title="geodist"></a>geodist</h3><blockquote>
<p>geodist key member1 member2 [m|km|ft|mi]</p>
</blockquote>
<ul>
<li>获取两个地理位置的距离,最后一个是距离单位说明如下<ul>
<li>m：米，默认单位</li>
<li>km：千米</li>
<li>ft：英尺， 1ft = 0.3048m</li>
<li>mi：英里, 1mi=1609.344m</li>
</ul>
</li>
</ul>
<h3 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h3><blockquote>
<p>georadiuskey longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key]   </p>
<p>[STOREDIST   key]</p>
</blockquote>
<ul>
<li>以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素</li>
</ul>
<blockquote>
<p>georadiusbymember key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</p>
</blockquote>
<ul>
<li>以给定的位置元素为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素<ul>
<li>WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回</li>
<li>WITHCOORD: 将位置元素的经度和维度也一并返回</li>
<li>WITHHASH: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大</li>
<li>COUNT：限定返回的记录数</li>
<li>ASC: 查找结果根据距离从近到远排序</li>
<li>DESC: 查找结果根据从远到近排序</li>
</ul>
</li>
</ul>
<h3 id="geohash"><a href="#geohash" class="headerlink" title="geohash"></a>geohash</h3><blockquote>
<p>geohash key member [member….]</p>
</blockquote>
<ul>
<li>用于获取一个或多个位置元素的 geohash 值</li>
<li>我们可以使用<a href="http://geohash.org/">http://geohash.org/</a> + geohash值来逆向查询经纬度的值</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>附近人，就是在APP上可以看见附近人距离你多少米远，</li>
<li>外卖中，显示骑手距离你还有多少米远</li>
<li><a href="https://segmentfault.com/a/1190000018440806">案例</a></li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="geoadd-1"><a href="#geoadd-1" class="headerlink" title="geoadd"></a>geoadd</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd city 116.23128 40.22077 beijing</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd city 121.48941 31.40527 shanghai</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd city 108.93425 34.23053 xian</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
<h3 id="geopos-1"><a href="#geopos-1" class="headerlink" title="geopos"></a>geopos</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos city xian</span><br><span class="line">1) 1) &quot;108.93425256013870239&quot;</span><br><span class="line">   2) &quot;34.23053097599082406&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos city beijing shanghai xian</span><br><span class="line">1) 1) &quot;116.23128265142440796&quot;</span><br><span class="line">   2) &quot;40.22076905438526495&quot;</span><br><span class="line">2) 1) &quot;121.48941010236740112&quot;</span><br><span class="line">   2) &quot;31.40526993848380499&quot;</span><br><span class="line">3) 1) &quot;108.93425256013870239&quot;</span><br><span class="line">   2) &quot;34.23053097599082406&quot;</span><br></pre></td></tr></table></figure>
<h3 id="geodist-1"><a href="#geodist-1" class="headerlink" title="geodist"></a>geodist</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist city beijing xian km</span><br><span class="line">&quot;927.5371&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist city beijing shanghai km</span><br><span class="line">&quot;1088.6444&quot;</span><br></pre></td></tr></table></figure>
<h3 id="georadius-1"><a href="#georadius-1" class="headerlink" title="georadius"></a>georadius</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadius city 100 30 1000 km</span><br><span class="line">1) &quot;xian&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadius city 100 30 1000 km withcoord</span><br><span class="line">1) 1) &quot;xian&quot;</span><br><span class="line">   2) 1) &quot;108.93425256013870239&quot;</span><br><span class="line">      2) &quot;34.23053097599082406&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadius city 100 30 1000 km withdist</span><br><span class="line">1) 1) &quot;xian&quot;</span><br><span class="line">   2) &quot;963.6929&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadiusbymember city beijing 1000 km</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;xian&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember city beijing 1000 km withcoord</span><br><span class="line">1) 1) &quot;beijing&quot;</span><br><span class="line">   2) 1) &quot;116.23128265142440796&quot;</span><br><span class="line">      2) &quot;40.22076905438526495&quot;</span><br><span class="line">2) 1) &quot;xian&quot;</span><br><span class="line">   2) 1) &quot;108.93425256013870239&quot;</span><br><span class="line">      2) &quot;34.23053097599082406&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember city beijing 1000 km withdist</span><br><span class="line">1) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;0.0000&quot;</span><br><span class="line">2) 1) &quot;xian&quot;</span><br><span class="line">   2) &quot;927.5371&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember city beijing 2000 km withcoord</span><br><span class="line">1) 1) &quot;xian&quot;</span><br><span class="line">   2) 1) &quot;108.93425256013870239&quot;</span><br><span class="line">      2) &quot;34.23053097599082406&quot;</span><br><span class="line">2) 1) &quot;shanghai&quot;</span><br><span class="line">   2) 1) &quot;121.48941010236740112&quot;</span><br><span class="line">      2) &quot;31.40526993848380499&quot;</span><br><span class="line">3) 1) &quot;beijing&quot;</span><br><span class="line">   2) 1) &quot;116.23128265142440796&quot;</span><br><span class="line">      2) &quot;40.22076905438526495&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember city beijing 2000 km withdist</span><br><span class="line">1) 1) &quot;xian&quot;</span><br><span class="line">   2) &quot;927.5371&quot;</span><br><span class="line">2) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;1088.6444&quot;</span><br><span class="line">3) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;0.0000&quot;</span><br></pre></td></tr></table></figure>
<h3 id="geohash-1"><a href="#geohash-1" class="headerlink" title="geohash"></a>geohash</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash city beijing</span><br><span class="line">1) &quot;wx4sucvncn0&quot;</span><br><span class="line">127.0.0.1:6379&gt; geohash city xian</span><br><span class="line">1) &quot;wqj6wz7x210&quot;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis案例</title>
    <url>/article/redis-examples/</url>
    <content><![CDATA[<p>案例一： 针对页面显示天气情况</p>
<p>&emsp;&emsp;优化是可以先从API接口中获取特定城市的天气,然后将城市与天气的对应信息存储到缓存中,当第二次请求时可以先判断缓存中是否有对应城市<br>的天气信息, 如果有可以直接从缓存中获取,否则再调用API接口</p>
<font color="red">&emsp;&emsp;redis的数据类型可以使用hash类型,  ``` hset city:weather bj '晴' ```</font>

<p>案例二： 页面PV显示优化</p>
<p>&emsp;&emsp;用户每访问一次页面，都是需要将页面的访问PV数加一记录到数据库中对应的字段上去;如果同时好多人来访问页面就会造成数据库的处理繁忙,<br>页面内容也有可能无法正常显示;我们可以将这个计数放入redis中, 减少直接写数据库的压力</p>
<p>&emsp;&emsp;如果需要将PV的记录值更新到数据库中，我们可以写一个定时任务，在每天的凌晨时分去跑定时脚本将redis缓存中数据更新到数据库中</p>
<font color="red">&emsp;&emsp;redis的数据类型直接使用string类型就可以, ``` incr site:info:pv  1 ```</font>


<p>案例三： 榜单列表</p>
<p>&emsp;&emsp;在一些网页经常能看到一些热搜榜,人气榜,贡献榜等列表显示的内容.我们可以使用redis的zset类型来存储榜单信息,因为redis的zset自带排序<br>的操作设置，可以在redis对数据进行直接处理而不需要读取出来在调用排序方法对其数据内容二次处理</p>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-HyperLogLog</title>
    <url>/article/redis-hyperloglog/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>
</li>
<li><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>
</li>
<li><p>这玩意本质上还是字符串</p>
</li>
<li><p>所有HyperLogLog结构都是固定的16384个桶（2的14次方），并且有两种存储格式：</p>
<ul>
<li><strong>稀疏格式</strong>：HyperLogLog算法在刚开始的时候，大多数桶其实都是0，稀疏格式通过存储连续的0的数目，而不是每个0存一遍，大大减小了HyperLogLog刚开始时需要占用的内存</li>
<li><strong>紧凑格式</strong>：用6个bit表示一个桶，需要占用12KB内存</li>
</ul>
</li>
</ul>
<h2 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h2><p>对于一个数据集{1,3,4,5,8,8,9,11,5}，这个数据集的基数集为{1,3,4,5,8,9,11},基数(不重复元素数)为5。基数估计就是在误差可接受的范围内，快速计算基数</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="pfadd"><a href="#pfadd" class="headerlink" title="pfadd"></a>pfadd</h3><blockquote>
<p>pfadd key element [element….]</p>
</blockquote>
<ul>
<li>向hyperloglog添加元素</li>
</ul>
<h3 id="pfcount"><a href="#pfcount" class="headerlink" title="pfcount"></a>pfcount</h3><blockquote>
<p>pfcount key [key…]</p>
</blockquote>
<ul>
<li>返回给定 HyperLogLog 的基数估算值， 如果是多个key的话，返回所有给定 HyperLogLog 的并集的近似基数，这个近似基数是通过将所有给定 HyperLogLog 合并至一个临时 HyperLogLog 来计算得出的</li>
</ul>
<h3 id="pfmerge"><a href="#pfmerge" class="headerlink" title="pfmerge"></a>pfmerge</h3><blockquote>
<p>pfmerge destkey sourcekey [sourcekey….]</p>
</blockquote>
<ul>
<li>合并多个hyperloglog</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>使用hyperloglog存在一定的误差，并不是百分之百的重复计数，标准误差是0.81%</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li><p>统计UV，即所谓的独立访客（Unique Visitor，简称UV）是指有多少个自然人，例如，即使我今天点了五次Item01，我对Item01的UV贡献也是1，而不是5。</p>
</li>
<li><p>计算日活，7日活，月活跃用户数</p>
</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd db &quot;redis&quot; &quot;mysql&quot; &quot;postgresql&quot; &quot;db2&quot; &quot;mongodb&quot; &quot;redis&quot; &quot;mysql&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; type db</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; pfcount db</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd no-db &quot;redis&quot; &quot;memcache&quot; &quot;mongodb&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; pfadd dbs &quot;mysql&quot; &quot;postgresql&quot; &quot;oracle&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; pfmerge db-nodbs dbs no-db</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount db-nodbs</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis杂记篇</title>
    <url>/article/redis-others/</url>
    <content><![CDATA[<h2 id="内部编码"><a href="#内部编码" class="headerlink" title="内部编码"></a>内部编码</h2><p><a href="https://nullcc.github.io/2018/01/23/redis%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81%E7%9A%84%E5%85%B3%E7%B3%BB/">参考1</a></p>
<p><a href="https://blog.csdn.net/sunhuiliang85/article/details/74157048">参考2</a></p>
<h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p><img src="https://s3.jpg.cm/2021/03/04/0BjwE.png" alt="0BjwE.png"></p>
<font color="red">该图是redis3 以前版本的</font>

<p>我们可以通过 object encoding 命令查询内部编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; type k1</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; object encoding k1</span><br><span class="line">&quot;embstr&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~$ redis-server -v</span><br><span class="line">redis server v=6.0.10 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=fd7b80e02ff17276</span><br></pre></td></tr></table></figure>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>字符串类型的内部编码有3种：</p>
<ul>
<li>raw：大于44个字节的字符串</li>
<li>int：8个字节的长整型</li>
<li>embstr：小于等于44个字节的字符串</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k6 abcdefabcdefabcdefabcdefabcdefabcdefabcaacdv</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; strlen k6</span><br><span class="line">(integer) 44</span><br><span class="line">127.0.0.1:6379&gt; object encoding k6</span><br><span class="line">&quot;embstr&quot;</span><br><span class="line">127.0.0.1:6379&gt; set k7 abcdefabcdefabcdefabcdefabcdefabcdefabcaacdva</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; strlen k7</span><br><span class="line">(integer) 45</span><br><span class="line">127.0.0.1:6379&gt; object encoding k7</span><br><span class="line">&quot;raw&quot;</span><br></pre></td></tr></table></figure>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash类型的内部编码方式有2种：</p>
<ul>
<li><p>hashtable(哈希表)：</p>
<blockquote>
<p>当哈希类型无法满足ziplist的条件时，redis会使用hashtable作为哈希的内部实现;因为此时ziplist的读写效率会下降，而hashtable的读写时间复杂度为O(1)。</p>
</blockquote>
</li>
<li><p>ziplist(压缩列表)</p>
<blockquote>
<p>当哈希类型元素个数小于hash-max-ziplist-entries配置（默认512个）,同时所有值都小于hash-max-ziplist-value 配置（默认64个字节）时,redis会使用ziplist作为哈希的内部实现;</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get hash-max-ziplist-entries</span><br><span class="line">1) &quot;hash-max-ziplist-entries&quot;</span><br><span class="line">2) &quot;512&quot;</span><br><span class="line">127.0.0.1:6379&gt; config get hash-max-ziplist-value</span><br><span class="line">1) &quot;hash-max-ziplist-value&quot;</span><br><span class="line">2) &quot;64&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hmset user1:info name tom age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; object encoding user1:info</span><br><span class="line">&quot;ziplist&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset user2:info name Jack desc &quot;人非要经历一番不同平时的劫难才能脱胎换骨，成为真正能解决问题的人。&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall user2:info</span><br><span class="line">1) &quot;desc&quot;</span><br><span class="line">2) &quot;\xe4\xba\xba\xe9\x9d\x9e\xe8\xa6\x81\xe7\xbb\x8f\xe5\x8e\x86\xe4\xb8\x80\xe7\x95\xaa\xe4\xb8\x8d\xe5\x90\x8c\xe5\xb9\xb3\xe6\x97\xb6\xe7\x9a\x84\xe5\x8a\xab\xe9\x9a\xbe\xe6\x89\x8d\xe8\x83\xbd\xe8\x84\xb1\xe8\x83\x8e\xe6\x8d\xa2\xe9\xaa\xa8\xef\xbc\x8c\xe6\x88\x90\xe4\xb8\xba\xe7\x9c\x9f\xe6\xad\xa3\xe8\x83\xbd\xe8\xa7\xa3\xe5\x86\xb3\xe9\x97\xae\xe9\xa2\x98\xe7\x9a\x84\xe4\xba\xba\xe3\x80\x82&quot;</span><br><span class="line">3) &quot;name&quot;</span><br><span class="line">4) &quot;Jack&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~$ redis-cli --raw</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall user2:info</span><br><span class="line">desc</span><br><span class="line">人非要经历一番不同平时的劫难才能脱胎换骨，成为真正能解决问题的人。</span><br><span class="line">name</span><br><span class="line">Jack</span><br><span class="line">127.0.0.1:6379&gt; object encoding user2:info</span><br><span class="line">hashtable</span><br></pre></td></tr></table></figure>
<p>  总结一下：</p>
<ul>
<li><font color="red">field的元素个数超过512(默认)时,哈希的内部编码就会转换成hashtable</font></li>
<li><font color="red">value的字节大于64(默认)个字节时,哈希的内部编码就会转换成hashtable</font>

</li>
</ul>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>列表类型的编码方式有3种：</p>
<ul>
<li>ziplist</li>
<li>hashtable</li>
<li>quicklist</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get list-max-ziplist-size</span><br><span class="line">1) &quot;list-max-ziplist-size&quot;</span><br><span class="line">2) &quot;-2&quot;</span><br><span class="line">127.0.0.1:6379&gt; config get list-compress-depth</span><br><span class="line">1) &quot;list-compress-depth&quot;</span><br><span class="line">2) &quot;0&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange ls1 0 -1</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">4) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; object encoding ls1</span><br><span class="line">&quot;quicklist&quot;</span><br></pre></td></tr></table></figure>
<p>使用quicklist来作为list类型的底层实现，其中的每个节点都是一个ziplist,这里list-max-ziplist-size的值为-2就表示每个ziplist的大小不能超过8kb</p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>集合类型的编码方式有2种：</p>
<ul>
<li><p>hashtable</p>
<blockquote>
<p>集合中的元素不满足intset时，内部实现使用hashtable</p>
</blockquote>
</li>
<li>intset<blockquote>
<p>针对的是整数集合，set中的元素都是整数且个数小于set-max-intset-entries,默认512</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get set-max-intset-entries</span><br><span class="line">1) &quot;set-max-intset-entries&quot;</span><br><span class="line">2) &quot;512&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd st3 1 2 3 4 5 6</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers st3</span><br><span class="line"> 1) &quot;1&quot;</span><br><span class="line"> 2) &quot;2&quot;</span><br><span class="line"> 3) &quot;3&quot;</span><br><span class="line"> 4) &quot;4&quot;</span><br><span class="line"> 5) &quot;5&quot;</span><br><span class="line"> 6) &quot;6&quot;</span><br><span class="line"> 7) &quot;7&quot;</span><br><span class="line"> 8) &quot;8&quot;</span><br><span class="line"> 9) &quot;9&quot;</span><br><span class="line">10) &quot;10&quot;</span><br><span class="line">11) &quot;11&quot;</span><br><span class="line">12) &quot;12&quot;</span><br><span class="line">13) &quot;13&quot;</span><br><span class="line">14) &quot;14&quot;</span><br><span class="line">15) &quot;15&quot;</span><br><span class="line">16) &quot;16&quot;</span><br><span class="line">127.0.0.1:6379&gt; object encoding st3</span><br><span class="line">&quot;intset&quot;</span><br><span class="line">127.0.0.1:6379&gt; sadd st2 a a b c</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers st2</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; object encoding st2</span><br><span class="line">&quot;hashtable&quot;</span><br></pre></td></tr></table></figure>
<h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>集合类型的编码方式有2种：</p>
<ul>
<li>skiplist</li>
<li>ziplist</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get zset-max-ziplist-entries</span><br><span class="line">1) &quot;zset-max-ziplist-entries&quot;</span><br><span class="line">2) &quot;128&quot;</span><br><span class="line">127.0.0.1:6379&gt; config get zset-max-ziplist-value</span><br><span class="line">1) &quot;zset-max-ziplist-value&quot;</span><br><span class="line">2) &quot;64&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd user1:score 99 yuwen 100 shuxue 100 yingyue</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange user1:score 0 -1 withscores</span><br><span class="line">1) &quot;yuwen&quot;</span><br><span class="line">2) &quot;99&quot;</span><br><span class="line">3) &quot;shuxue&quot;</span><br><span class="line">4) &quot;100&quot;</span><br><span class="line">5) &quot;yingyue&quot;</span><br><span class="line">6) &quot;100&quot;</span><br><span class="line">127.0.0.1:6379&gt; type user1:score</span><br><span class="line">zset</span><br><span class="line">127.0.0.1:6379&gt; object encoding user1:score</span><br><span class="line">&quot;ziplist&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><h3 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h3><blockquote>
<p>redis客户端对服务端的每次调用都经历了发送命令，执行命令，返回结果三个过程。 其中执行命令阶段，由于redis是单线程来处理命令的，所有每一条到达服务端的命令不会立刻执行，所有的命令都会进入一个队列中，然后逐个被执行。并且多个客户端发送的命令的执行顺序是不确定的。但是可以确定的是不会有两条命令被同时执行，不会产生并发问题，这就是redis的单线程基本模型。</p>
</blockquote>
<h3 id="执行快的原因"><a href="#执行快的原因" class="headerlink" title="执行快的原因"></a>执行快的原因</h3><ol>
<li>redis的大多数操作都是在内存中完成的，内存的读写是非常快的</li>
<li>redis采用单线程，避免了不必要的上下文切换和竞争条件</li>
<li>非阻塞IO-IO多路复用，redis采用epoll作为IO多路复用技术</li>
</ol>
<p><a href="https://imagelol.com/image/0JGNW"><img src="https://s3.jpg.cm/2021/03/02/0JGNW.png" alt="0JGNW.png"></a></p>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis内存管理</title>
    <url>/article/redis-memory/</url>
    <content><![CDATA[<h2 id="内存消耗"><a href="#内存消耗" class="headerlink" title="内存消耗"></a>内存消耗</h2><h3 id="内存使用统计"><a href="#内存使用统计" class="headerlink" title="内存使用统计"></a>内存使用统计</h3><div class="table-container">
<table>
<thead>
<tr>
<th>属性名</th>
<th>属性说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>used_memory</td>
<td>Redis分配器分配的内存量，也就是实际存储数据的内存总量</td>
</tr>
<tr>
<td>used_memory_human</td>
<td>以可读格式返回Redis使用的内存总量</td>
</tr>
<tr>
<td>used_memory_rss</td>
<td>从操作系统的角度，Redis进程占用的总物理内存</td>
</tr>
<tr>
<td>used_memory_peak</td>
<td>内存分配器分配的最大内存，代表used_memory的历史峰值</td>
</tr>
<tr>
<td>used_memory_peak_human</td>
<td>已可读格式显示内存消耗峰值</td>
</tr>
<tr>
<td>used_memory_lua</td>
<td>Lua引擎所消耗的内存</td>
</tr>
<tr>
<td>mem_fragmentation_ratio</td>
<td>used_memory_rss/used_memory比值，表示内存碎片率</td>
</tr>
<tr>
<td>mem_allocator</td>
<td>Redis所使用的内存分配器。默认jemalloc</td>
</tr>
</tbody>
</table>
</div>
<h3 id="内存消耗划分"><a href="#内存消耗划分" class="headerlink" title="内存消耗划分"></a>内存消耗划分</h3><h3 id="子进程内存消耗"><a href="#子进程内存消耗" class="headerlink" title="子进程内存消耗"></a>子进程内存消耗</h3><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h2 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h2><hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis持久化之aof</title>
    <url>/article/redis-persist-aof/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>&emsp;&emsp;我们已经了解过RDB存在丢失最后一次操作数据记录，因此redis又提供了另外一种机制叫AOF来解决上述问题，AOF是以日志形式记录对redis的所有写操作，当redis处理一个写操作，不会直接写入到磁盘文件中，而是将写操作以协议方式追加到aof_buffr(aof缓冲区中)和写入aof文件中，同时会根据配置的fsync策略决定如何将文件同步到磁盘上。Redis在重启的时候通过读取该日志文件来构造最新的数据</p>
<p>&emsp;&emsp;aof,Append Only File,只追加文件，也就是每次处理完请求命令后将此次的命令追加到aof文件的末尾，而RDB是压缩成二进制等待子进程去写入</p>
<p>&emsp;&emsp;这玩意默认是关闭的哦</p>
<font color="red">

aof文件是在Redis启动的过程中创建的，在运行过程中Redis不会创建aof文件的，所以如果在启动之后删除了aof文件，那么所有命令都将丢失。

</font>

<h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><h3 id="always"><a href="#always" class="headerlink" title="always"></a>always</h3><p>同步进行持久化，每一次发生数据变更会被立即记录到磁盘，性能比较差但数据完整性比较好</p>
<p><a href="https://imgtu.com/i/cODfcd"><img src="https://z3.ax1x.com/2021/04/23/cODfcd.png" alt="cODfcd.png"></a></p>
<h3 id="everysec"><a href="#everysec" class="headerlink" title="everysec"></a>everysec</h3><p>异步操作，每秒记录一次，如果一秒内宕机，会丢失1秒数据</p>
<p><a href="https://imgtu.com/i/cODxun"><img src="https://z3.ax1x.com/2021/04/23/cODxun.png" alt="cODxun.png"></a></p>
<h3 id="no"><a href="#no" class="headerlink" title="no"></a>no</h3><p>这个由操作系统的策略决定</p>
<p><a href="https://imgtu.com/i/cOrSH0"><img src="https://z3.ax1x.com/2021/04/23/cOrSH0.png" alt="cOrSH0.png"></a></p>
<h2 id="策略比较"><a href="#策略比较" class="headerlink" title="策略比较"></a>策略比较</h2><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>always</th>
<th>everysec</th>
<th>no</th>
</tr>
</thead>
<tbody>
<tr>
<td>优点</td>
<td>不丢失数据</td>
<td>每秒一次fsync，会丢失一秒数据</td>
<td>无</td>
</tr>
<tr>
<td>缺点</td>
<td>IO开销较大，一般的sata盘只有几百TPS</td>
<td>丢1秒数据</td>
<td>不可控</td>
</tr>
</tbody>
</table>
</div>
<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>&emsp;&emsp;由于 AOF以命令方式保存数据，所以很容易导致文件过大，因此Redis提供 了重写机制，当aof文件超过指定的阔值时(或通过bgrewriteaof命令)，Redis将fork出一个子进程，由子进程将其内存中的数据以命令的形式保存到一个新的aop文件中，再覆盖掉旧的aof文件。由于重写aof并不会读取旧aof文件中的内容，而是把当前内存中的数据，以命令的形式记录到新的aof文件，所以新的aof文件中只会保留可恢复数据的最小指令集。整个过程其实和bgsave很类似，只是AOF以命令方式存储，而RDB存储的是数据而已。<br>　　由于bgrewriteaof会涉及到大量的磁盘操作，而且持续时间一般比较长，在子进程往新aof文件中写入数据的过程中，如果父进程有新的写操作也需要写入到原aof中，就可能产生两个问题：1新的写操作无法被子进程得知；2两者由于竞争I/O可能导致停顿延迟，对了父进程而言由于还要处理其它命令相对来说延迟影响更加大。<br>　　为了解决这种情况，Redis为aof的重写也提供了重写缓冲区，以及一个配置no-appendfsync-on-rewrite来控制在rewrite过程中，父进程如何处理写操作。在rewrite过程中，Redis会把写操作同时追加到aof缓冲区和aof重写缓冲区，aof缓冲区中的内容仍会根据fsync同步策略被同步到原aof磁盘文件中，对原有aof文件的处理照常进行。对于重写缓冲区中的数据，在重写完成后子进程会向父进程发送一个信号，父进程接收到该信号后再将aof重写缓冲区中的内容写入新aof文件中，最后重命名新的aof文件覆盖原有aof。（注：重写过程中，对于列表类型的数据，当项多于64个时，会分多次追加SADD或RPUSH等命令）</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><a href="https://imgtu.com/i/cOsFdP"><img src="https://z3.ax1x.com/2021/04/23/cOsFdP.png" alt="cOsFdP.png"></a></p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>减少硬盘占用量</li>
<li>加快恢复速度</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="bgrewriteof"><a href="#bgrewriteof" class="headerlink" title="bgrewriteof"></a>bgrewriteof</h4><p>客户端手动执行bgrewriteof命令，这个命令会立即返回</p>
<p><a href="https://imgtu.com/i/cXt3Q0"><img src="https://z3.ax1x.com/2021/04/23/cXt3Q0.png" alt="cXt3Q0.png"></a></p>
<ul>
<li>aof_rewrite_buf：rewrite(重写)缓冲区、aof_buf：写命令存放的缓冲区</li>
<li>开始bgrewriteaof的时候，判断当前有没有bgsave/bgrewriteaof在执行，若有，则不执行，没有继续往下执行</li>
<li>主进程fork()出子进程，在执行fork()这个方法的时候是阻塞的，子进程创建完毕后就不阻塞了</li>
<li>主进程fork完子进程后，主进程能继续接收客户端的请求，所有写命令依然是写入AOF文件缓冲区并根据配置文件的策略同步到磁盘的。</li>
<li>因为fork的子进程仅仅共享主进程fork()时的内存，后期主进程在更改内存数据，子进程是不可见的。因此Redis采取重写缓冲区（aof_rewite_buf）保存fork之后的客户端请求。防止新AOF文件生成期间丢失主进程执行的新命令所生成的数据。所以此时客户端的写请求不仅仅写入原来的aof_buf缓冲区，还写入了重写缓冲区。</li>
<li>子进程通过内存快照的形式，开始生成新的aof文件。</li>
<li>新aof文件生成完后，子进程向主进程发信号。</li>
<li>主进程收到信号后，会把重写缓冲区(aof_rewite_buf)中的数据写入到新的AOF文件（主要是避免这部分数据丢失）</li>
<li>使用新的AOF文件覆盖旧的AOF文件，且标记AOF重写完成。</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><div class="table-container">
<table>
<thead>
<tr>
<th>配置名</th>
<th>含义</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto-aof-rewrite-min-size</td>
<td>AOF文件重写需要的尺寸</td>
<td>64mb</td>
</tr>
<tr>
<td>auto-aof-rewrite-percentage</td>
<td>AOF文件增长率</td>
<td>100</td>
</tr>
</tbody>
</table>
</div>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>持久化的速度快，因为每次都只是追加，rdb每次都全量持久化</li>
<li>数据相对更可靠，丢失少，因可以配置每秒持久化、每个命令执行完就持久化</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>灾难性恢复的时候过慢，因为aof每次都只追加原命令，导致aof文件过大，但是后面会rewrite，但是相对于rdb也是慢的</li>
<li>会对主进程对外提供请求的效率造成影响，接收请求、处理请求、写aof文件这三步是串行原子执行的。而非异步多线程执行的。Redis单线程！</li>
</ul>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><blockquote>
<p>appendonly yes</p>
</blockquote>
<p>打开aof持久化</p>
<blockquote>
<p>appendfilename “6379.aof”</p>
</blockquote>
<p>生成aof文件的名称</p>
<blockquote>
<p>appendfsync everysec</p>
</blockquote>
<p>fsync刷新策略，有3个值分别是：always，everysec和no</p>
<blockquote>
<p>auto-aof-rewrite-percentage 100</p>
<p>auto-aof-rewrite-min-size 64mb</p>
</blockquote>
<p>aof重写触发条件，第一个意思是当前文件的大小是上一次文件rewrite大小的一倍</p>
<blockquote>
<p>no-appendfsync-on-rewrite no</p>
</blockquote>
<p>bgrewriteaof会在一个子进程中去进行aof的重写,从而不会阻塞主进程对其它命令的处理。由于bgrewriteaof通常都会涉及到大量的磁盘操作,而且持续时间也比较长,当父进程也需要操作磁盘时，两者就可能产生竞争，从而可能导致父进程停顿,</p>
<p>设为yes的情况下相当于将appendfsync设置为no,并不会立刻执行磁盘操作,而只是写入了缓冲区,因此这样并不会造成阻塞,但是如果这个时候redis挂掉,就会丢失数据。(在Linux系统中默认最多会丢失30s的数据)</p>
<p>默认no的情况下，不会产生丢失，但却有可能阻塞。目前官方建议除非延迟到影响性能的程度,否则应该采用默认no</p>
<blockquote>
<p>aof-load-truncated yes</p>
</blockquote>
<p>设置为yes, Redis在加载aof文件时，如果aof文件中的最后一条命令不完整或者有误，redis会自动截取只成功加载前面正确的数据</p>
<p>设置为no,那么Redis将启动失败，这种情况需要手动用redis-check-aof 工具对aof文件进行修复</p>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis消息队列</title>
    <url>/article/redis-message-queue/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>消息队列是消息的顺序集合</li>
<li>常用场景和解决的问题：<ul>
<li>应对流量峰值</li>
<li>异步消费(不定速的插入，生产和匀速的处理,消费)</li>
<li>解耦应用(不同来源的生产和不同去向的消费)</li>
</ul>
</li>
</ul>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul>
<li>基于list</li>
<li>基于 publish/subscribe(发布/订阅方式)</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>现在的网站几乎都会做一个pv的统计功能,下面就让我们用这个例子来入手说一下如何利用redis实现消息队列</p>
<h3 id="数据库方式"><a href="#数据库方式" class="headerlink" title="数据库方式"></a>数据库方式</h3><p>&emsp;&emsp;针对这个问题,第一个想到的解决问题的方式可能是在MySQL数据库中创建一个表来记录对应的页面的pv值,下面来简单实现一下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table `pv` (</span><br><span class="line">    `id` int not null auto_increment primary key,</span><br><span class="line">    `name` varchar(30) not null comment &#x27;页面标题&#x27;, </span><br><span class="line">    `value` int not null default 1 comment &#x27;pv值&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>当用户进入这个页面的时候需要给首页的pv值加一<br>addpv.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$connect</span> = mysqli_connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">mysqli_select_db(<span class="variable">$connect</span>, <span class="string">&#x27;phpers&#x27;</span>);</span><br><span class="line">mysqli_query(<span class="variable">$connect</span>, <span class="string">&quot;update pv set value=value+1 where name=&#x27;index&#x27; limit 1&quot;</span>);</span><br><span class="line">mysqli_close(<span class="variable">$connect</span>);</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;这种方式在用户访问量情况不太大下,直接更新数据库的内容是没有问题,要是网站一引流,很多人访问的话,数据库压力过大,可能不仅仅首页的pv无法计算,还会造成其他的问题</p>
<h3 id="redis之set方式"><a href="#redis之set方式" class="headerlink" title="redis之set方式"></a>redis之set方式</h3><p>&emsp;&emsp;在redis的数据结构中,我们学到过字符串类型,我们可以使用string类型来把计数结果放到redis中,然后在从redis中将结果写回到数据库中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;select(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="string">&#x27;pv:index&#x27;</span>;</span><br><span class="line"><span class="variable">$redis</span>-&gt;incrBy(<span class="variable">$key</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>到此incrBy基本上可以实现计算pv的功能了,但是incrBy也是有流量限制的,超过太多的同时并发请求来访问的话,还是会造成504</p>
<h3 id="redis之list方式"><a href="#redis之list方式" class="headerlink" title="redis之list方式"></a>redis之list方式</h3><p>&emsp;&emsp;下面,我们可以接着说list方式了,这玩意不用管那么多,你可以疯狂的往队列里面添加内容,实现list方式需要两个条件,一个是添加,一个是消费,消费我们可以使用定时任务来解决<br>addpv.php , 这个只负责计数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;select(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="string">&#x27;listpv:index&#x27;</span>;</span><br><span class="line"><span class="variable">$redis</span>-&gt;rPush(<span class="variable">$key</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><br>cron.php , 这个就是定时去看队列中是否有任务,就去消费,这个定时脚本需要一直执行<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;select(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="string">&#x27;listpv:index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$redis</span>-&gt;lPop(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="variable">$redis</span>-&gt;incr(<span class="string">&#x27;pv:index&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="redis之发布订阅方式"><a href="#redis之发布订阅方式" class="headerlink" title="redis之发布订阅方式"></a>redis之发布订阅方式</h3><p>&emsp;&emsp;再来说另一种通过发布订阅的方式来实现的,这个了和我们看电视一样,我们选择不同的电视台,电视台会给我们推送不同的画面信息,我们可以将每一个页面 当成一个频道来理解， 我们订阅了频道就可以接收到频道发布的信息了</p>
<p>pub.php  发布逻辑<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;select(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页pv</span></span><br><span class="line"><span class="variable">$channelPvIndex</span> = <span class="string">&#x27;pv:index&#x27;</span>;</span><br><span class="line"><span class="comment">// 列表页pv</span></span><br><span class="line"><span class="variable">$channelPvList</span> = <span class="string">&#x27;pv:list&#x27;</span>;</span><br><span class="line"><span class="comment">// 内容页pv</span></span><br><span class="line"><span class="variable">$channelPvArticle</span> = <span class="string">&#x27;pv:article&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;pv&#x27;</span> == <span class="variable">$action</span>) &#123;</span><br><span class="line">    <span class="comment">// pv统计</span></span><br><span class="line">    <span class="variable">$from</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;from&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;index&#x27;</span> == <span class="variable">$from</span>) &#123;</span><br><span class="line">        <span class="variable">$redis</span>-&gt;publish(<span class="variable">$channelPvIndex</span>, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="string">&#x27;list&#x27;</span> == <span class="variable">$from</span>) &#123;</span><br><span class="line">        <span class="variable">$tid</span> = intval(<span class="variable">$_GET</span>[<span class="string">&#x27;tid&#x27;</span>]);</span><br><span class="line">        <span class="variable">$redis</span>-&gt;publish(<span class="variable">$channelPvList</span>, <span class="variable">$tid</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span>(<span class="string">&#x27;article&#x27;</span> == <span class="variable">$from</span>) &#123;</span><br><span class="line">        <span class="variable">$aid</span> = intval(<span class="variable">$_GET</span>[<span class="string">&#x27;aid&#x27;</span>]);</span><br><span class="line">        <span class="variable">$redis</span>-&gt;publish(<span class="variable">$channelPvArticle</span>, <span class="variable">$aid</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>sub.php 订阅逻辑,和list一样,这个页面也需要设置成定时任务,一直运行<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;select(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页pv</span></span><br><span class="line"><span class="variable">$channelPvIndex</span> = <span class="string">&#x27;pv:index&#x27;</span>;</span><br><span class="line"><span class="comment">// 列表页pv</span></span><br><span class="line"><span class="variable">$channelPvList</span> = <span class="string">&#x27;pv:list&#x27;</span>;</span><br><span class="line"><span class="comment">// 内容页pv</span></span><br><span class="line"><span class="variable">$channelPvArticle</span> = <span class="string">&#x27;pv:article&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//频道和pv的key的映射</span></span><br><span class="line"><span class="variable">$keyMap</span> = [</span><br><span class="line">    <span class="variable">$channelPvIndex</span> =&gt; <span class="string">&#x27;realTimePv:index&#x27;</span>,</span><br><span class="line">    <span class="variable">$channelPvList</span> =&gt; <span class="string">&#x27;realTimePv:list&#x27;</span>,</span><br><span class="line">    <span class="variable">$channelPvArticle</span> =&gt; <span class="string">&#x27;realTimePv:article&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$redis</span>-&gt;setOption(redis::OPT_READ_TIMEOUT, -<span class="number">1</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;subscribe([<span class="variable">$channelPvIndex</span>, <span class="variable">$channelPvList</span>, <span class="variable">$channelPvArticle</span>], <span class="function"><span class="keyword">function</span> (<span class="params">redis <span class="variable">$redisInstance</span>, <span class="variable">$channelName</span>, <span class="variable">$message</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$keyMap</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 只要客户端发起订阅后除了这几个命令外，其余命令无法执行,分别是 subscribe,psubscribe,unsubscribe,punsubscribe,ping,reset,quit,当然可以重新创建一个redis实例</span></span><br><span class="line"><span class="comment">//    echo &quot;&#123;$channelName&#125;\n&quot;;</span></span><br><span class="line"><span class="comment">//    $redisInstance-&gt;unsubscribe([$channelName]);</span></span><br><span class="line"><span class="comment">//    return;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    echo &quot;&#123;$channelName&#125; -&gt; &#123;$message&#125; \n&quot;;</span></span><br><span class="line">    <span class="variable">$redis2</span> = <span class="keyword">new</span> redis();</span><br><span class="line">    <span class="variable">$redis2</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="variable">$redis2</span>-&gt;select(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$keyMap</span>[<span class="variable">$channelName</span>])) &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$redis2</span>-&gt;incrBy(<span class="variable">$keyMap</span>[<span class="variable">$channelName</span>], <span class="number">1</span>);</span><br><span class="line">        var_dump(<span class="variable">$res</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>官网链接说明地址：<a href="https://redis.io/commands/subscribe">直达地址</a></p>
<font color="red">这里要提一下的是,在订阅的回调中redis的示例是只能执行几个特定的命令，其余的命令是无法执行的,我们可以通过重新创建redis的实例来完成接下来的操作</font>

<p><font color="red"> 只要客户端发起订阅后除了这几个命令外，其余命令无法执行,分别是: </font></p>
<ul>
<li>subscribe</li>
<li>psubscribe</li>
<li>unsubscribe</li>
<li>punsubscribe</li>
<li>ping</li>
<li>reset</li>
<li>quit</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis持久化之RDB</title>
    <url>/article/redis-persist-rdb/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>&emsp;&emsp;我们都清楚，redis的数据都是保存在内存中的，因此数据会有丢失的风险，redis对此提供了数据持久化的功能，简单来说就是对数据的更新异步地保存到磁盘上</p>
<p>&emsp;&emsp;redis持久化方式支持两种，一种是RDB方式，另一种是AOF方式</p>
<p>&emsp;&emsp;RDB，就是快照，在某一个时刻对数据库数据的一种保存，拿MySQL来说的话就是mysqldump在某一个时刻对数据库生成的一份备份文件</p>
<p>&emsp;&emsp;AOF，这个是写日志，是将对数据库中的操作都写入日志文件中来记录，对比MySQL的话就是Binlog日志文件喽</p>
<h2 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h2><p>主要有以下方式触发：</p>
<ul>
<li>save命令</li>
<li>bgsave命令</li>
<li>自动</li>
<li>全量复制</li>
<li>debug reload</li>
<li>shutdown</li>
</ul>
<h2 id="save"><a href="#save" class="headerlink" title="save"></a>save</h2><p><a href="https://imgtu.com/i/cLG4W6"><img src="https://z3.ax1x.com/2021/04/22/cLG4W6.png" alt="cLG4W6.png"></a></p>
<ol>
<li><p>save命令会阻塞当前redis服务器，执行save命令期间，redis不能处理其他命令，知道save的命令执行完成才能接收其他客户端的命令，会造成客户端的阻塞</p>
</li>
<li><p>如果之前已经存在了rdb文件，新生成的rdb文件会将老的替换掉</p>
</li>
</ol>
<h2 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h2><p><a href="https://imgtu.com/i/cLJH3V"><img src="https://z3.ax1x.com/2021/04/22/cLJH3V.png" alt="cLJH3V.png"></a></p>
<ul>
<li>执行bgsave命令，redis进程会fork一个子进程，由这个子进程去实现持久化过程，命令执行完成后子进程会自动退出，在fork阶段也会发生阻塞，但是这个时间会很短，因此这个命令不会阻塞其他的客户端对服务器的连接处理</li>
</ul>
<h2 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h2><p>在reids的配置中有以下三个默认的配置项来决定是否生成RDB文件</p>
<blockquote>
<p>save 900  1</p>
</blockquote>
<p>表示在900秒之内如果至少1个key的值变化，则生成rdb文件</p>
<blockquote>
<p>save 300 10</p>
</blockquote>
<p>表示在300秒之内如果至少有10个key的值变化，则生成rdb文件</p>
<blockquote>
<p>save 60 1000</p>
</blockquote>
<p>表示在60秒内如果至少有1000个key的值变化，则生成rdb文件</p>
<blockquote>
<p>stop-write-on-bgsave-error  yes</p>
</blockquote>
<p>在bgsave执行失败时是否停止写入，默认值是yes</p>
<blockquote>
<p>rdbcompression yes</p>
</blockquote>
<p>生成rdb文件时是否压缩，默认是yes</p>
<blockquote>
<p>rdbchecksum yes</p>
</blockquote>
<p>生成rdb文件后是否进行文件校验和的验证，默认值是yes</p>
<p>rdb文件生成策略是会先生成一个临时文件，直到命令执行完成然后用临时文件的内容更新已存在的rdb文件</p>
<p>文件名称一般是port.rdb来区分，这在单个服务器上部署多个redis服务器非常有必要</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="save-1"><a href="#save-1" class="headerlink" title="save"></a>save</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt;save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<h3 id="bgsave-1"><a href="#bgsave-1" class="headerlink" title="bgsave"></a>bgsave</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt;save</span><br><span class="line">Background saving started</span><br></pre></td></tr></table></figure>
<h2 id="优劣势"><a href="#优劣势" class="headerlink" title="优劣势"></a>优劣势</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>它是全量备份，非常适用于进行备份和灾难恢复</li>
<li>使用bgsave生成rdb文件时，redis主进程会fork一个子进程来处理保存的任务，主进程不需要进行任何的磁盘IO操作</li>
<li>rdb在恢复大数据集时速度比AOF的恢复速度要快</li>
</ul>
<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul>
<li>进行全量备份会非常耗时</li>
<li>fork子进程时消耗内存</li>
<li>生成rdb文件时会消耗磁盘IO性能</li>
<li>还有可能会造成数据的丢失</li>
</ul>
<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>save</th>
<th>bgsave</th>
</tr>
</thead>
<tbody>
<tr>
<td>IO类型</td>
<td>同步</td>
<td>异步</td>
</tr>
<tr>
<td>是否阻塞</td>
<td>是</td>
<td>是，阻塞发生在fork</td>
</tr>
<tr>
<td>复杂度</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>优点</td>
<td>不会消耗额外的内存</td>
<td>不阻塞客户端命令</td>
</tr>
<tr>
<td>缺点</td>
<td>阻塞客户端命令</td>
<td>需要fork消耗内存</td>
</tr>
</tbody>
</table>
</div>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>RDB是Redis内存到硬盘的快照，用于持久化</li>
<li>save通常会堵塞Redis</li>
<li>bgsave不会阻塞Redis，但是会fork进程</li>
<li>save自动配置满足任意一项就会被执行</li>
<li>有些其他的触发机制不允许忽视</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis持久化总结</title>
    <url>/article/redis-persist-summary/</url>
    <content><![CDATA[<h2 id="RDBorAOF"><a href="#RDBorAOF" class="headerlink" title="RDBorAOF"></a>RDBorAOF</h2><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>RDB</th>
<th>AOF</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动优先级</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>体积</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>恢复速度</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>数据安全性</td>
<td>丢失数据</td>
<td>根据策略决定</td>
</tr>
<tr>
<td>轻重</td>
<td>重</td>
<td>轻</td>
</tr>
</tbody>
</table>
</div>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>操作：</p>
<ul>
<li>同步操作</li>
<li>与内存量息息相关：内存越大，耗时越长，与机器类型有关</li>
<li>info：latest_fork_usec</li>
</ul>
<p>改善：</p>
<ul>
<li>优先使用物理机或者高效支持fork操作的虚拟化技术</li>
<li>控制Redis实例最大可用内存：maxmemory</li>
<li>合理配置Linux内存分配策略：vm.overcommit_memory=1</li>
<li>降低fork频率：例如放宽AOF重写自动触发时机，不必要的全量复制</li>
</ul>
<h3 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h3><p>CPU：</p>
<ul>
<li>开销：RDB和AOF文件生成，属于CPU密集型</li>
<li>优化：不做CPU绑定，不和CPU密集型部署</li>
</ul>
<p>内存：</p>
<ul>
<li>开销：fork内存开销，copy-on-write</li>
<li>优化：echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</li>
</ul>
<p>硬盘：</p>
<ul>
<li>开销：AOF和RDB文件写入可以结合iostat，iotop分析</li>
<li>优化：<ul>
<li>不要和高硬盘负载服务部署一起：存储服务、消息队列等</li>
<li>no-appendfsync-no-rewrite=yes</li>
<li>根据写入量决定磁盘类型，例如使用ssd</li>
<li>单机多实例持久化文件目录可以考虑分盘</li>
</ul>
</li>
</ul>
<h3 id="aof追加阻塞"><a href="#aof追加阻塞" class="headerlink" title="aof追加阻塞"></a>aof追加阻塞</h3><p><a href="https://imgtu.com/i/cXUgGd"><img src="https://z3.ax1x.com/2021/04/23/cXUgGd.png" alt="cXUgGd.png"></a></p>
<p>AOF文件fsync同步时间大于2秒，Redis主进程就会阻塞</p>
<p>AOF文件fsync同步时间小于2秒，Redis主进程就会返回</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>由此可能会产生以下两个问题：</p>
<ol>
<li>如果fsync大于2秒，redis主进程会被阻塞，但是我们都知道redis主进程是用来接收处理客户端的命令的是不能被阻塞的</li>
<li>虽然有每秒的刷盘策略，但是实际上有可能丢失2秒的数据</li>
</ol>
<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>第一种方式是通过查看redis的日志来进行定位，出现以下的日志记录需要我们去解决</p>
<p><a href="https://imgtu.com/i/cXd0AO"><img src="https://z3.ax1x.com/2021/04/23/cXd0AO.png" alt="cXd0AO.png"></a></p>
<p>第二种是通过redis提供的命令去查看， info persistence</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info persistence</span><br><span class="line">...........</span><br><span class="line">...........</span><br><span class="line">aof_delayed_fsync: 100</span><br><span class="line">...........</span><br><span class="line">...........</span><br></pre></td></tr></table></figure>
<p>第三种是通过linux的top命令</p>
<p><a href="https://imgtu.com/i/cXw2RJ"><img src="https://z3.ax1x.com/2021/04/23/cXw2RJ.png" alt="cXw2RJ.png"></a></p>
<p>%wa指CPU等待磁盘写入完成的时间，可以表明磁盘IO负载情况， 一般发生这种问题都是磁盘IO太高导致的问题</p>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis管道</title>
    <url>/article/redis-pipeline/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;&emsp;我们都知道redis客户端执行一条命令分为 发送命令-&gt;命令排队-&gt;命令执行-&gt;结果返回。单独执行一条命令的所需要的时间=1次命令网络时间+1次命令执行时间，那么执行n次呢，n次时间=n次网络时间+n次命令时间。那么有什么办法可以优化这个不合理的情况了，redis中提供了一个pipeline(管道)来优化这个问题。</p>
<p>&emsp;&emsp;有一个问题，redis客户端命令行是没有pipeline的命令的，但是redis是支持pipeline的，在我们使用的编程语言中的client都是有对应的实现的，我们只需要调用就行了。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;pipeline有的文章里面称为管道，有的是流水线，那么使用这个有什么好处呢？还是以背景中说到的执行n次命令来举例说明，我们已经了解到在不使用pipeline的情况下执行n次命令是非常耗费时间的，pipeline它可以一次性地发送多条命令并且在多条命令都执行完毕后一次性地将结果返回，pipeline是通过减少客户端会redis的通信次数来实现减少往返时间，在使用pipeline的情况下，执行n次命令的时间=1次网络时间+n次命令时间，按照这个结论来看，在执行多次命令的情况下使用pipeline性能要提高很多。</p>
<p>&emsp;&emsp;需要注意的是pipeline是先将所有的命令打包到一起然后缓存起来等待打包结束后发送给服务器端然后执行返回结果。打包的命令越多，缓存对应消耗的内存也越多，因此并不能盲目的使用，也不是打包的命令越多越好，这个要取决于当前服务器的性能和命令的个数</p>
<p>&emsp;&emsp;还有一条，pipeline不是原子性的操作，而redis提供的原生的M操作是原子性的</p>
<h2 id="原生批命令"><a href="#原生批命令" class="headerlink" title="原生批命令"></a>原生批命令</h2><p>&emsp;&emsp;redis服务端提供了很多的原生的批命令，比方说 mget,mset,hmset等，这些命令都是原子性，简单说一下原子性，是一个不可分割的最小工作单位，要么都执行成功，要么都执行失败，不存在只执行其中的一部分操作。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>下面来开一个示例来对比使用pipeline前后的耗时</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redis $redis</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeList</span>(<span class="params">redis <span class="variable">$redis</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$startTime</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&quot;list:normal&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">20000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$redis</span>-&gt;lPush(<span class="variable">$key</span>, <span class="string">&quot;key_&quot;</span> . (<span class="variable">$i</span> + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$endTime</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$costTime</span> = <span class="variable">$endTime</span> - <span class="variable">$startTime</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;normal coast time:&quot;</span> . <span class="variable">$costTime</span> . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;start normal...............&quot;</span>. PHP_EOL;</span><br><span class="line">writeList(<span class="variable">$redis</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;end normal...............&quot;</span>. PHP_EOL;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redis $redis</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writePipelineList</span>(<span class="params">redis <span class="variable">$redis</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$startTime</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&quot;list:pipeline&quot;</span>;</span><br><span class="line">    <span class="variable">$redis</span>-&gt;multi(redis::PIPELINE);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">20000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$redis</span>-&gt;lPush(<span class="variable">$key</span>, <span class="string">&quot;key_&quot;</span> . (<span class="variable">$i</span> + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$redis</span>-&gt;exec();</span><br><span class="line">    <span class="variable">$endTime</span> = microtime(<span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$costTime</span> = <span class="variable">$endTime</span> - <span class="variable">$startTime</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;pipeline coast time:&quot;</span> . <span class="variable">$costTime</span> . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;start pipeline.........&quot;</span> . PHP_EOL;</span><br><span class="line">writePipelineList(<span class="variable">$redis</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;end pipeline.........&quot;</span> . PHP_EOL;</span><br></pre></td></tr></table></figure>
<p>以下是执行结果： </p>
<blockquote>
<p>normal coast time:0.60160994529724</p>
<p>pipeline coast time:0.018090009689331</p>
</blockquote>
<p>是在PHP8.0下执行的，当然你的结果可能会跟我不一致， 我们可以看到时间大概提升了30多倍</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>减少I/O的调用时间，提升性能</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>打包的命令过多会产生过多的内存消耗</li>
<li>不能保证原子性操作，也就意味着打包内的多条命令其中可能会有执行失败的命令</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis慢查询</title>
    <url>/article/redis-slowquery/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>&emsp;&emsp;我们现在使用的存储数据的系统比如说MySQL都有提供了慢查询日志的功能来帮助开发和运维人员定位系统访问变慢的功能。慢查询和字面意思一样，就是执行非常慢的操作喽，在我们的系统中就是一条命令本来假定的期望时间是2秒之内执行完成表示都是ok的，现在当前的命令的执行时间超过了我们设置的2秒的阈值，系统会将这条命令的相关信息(比如说，发生时间，耗时，具体执行的操作，参数等信息)记录下来，当然了redis也有类似的功能。</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>&emsp;&emsp;redis执行一条命令的生命周期大概可以分为4个阶段：</p>
<ul>
<li>第一阶段，由客户端发送执行的命令，这里的客户端不仅仅是redis-cli,也可以是其他开发语音的客户端</li>
<li>第二阶段，服务器端接收到来自客户端的命令后，会将命令写入一个队列中进行排队，由于redis是单线程的不能同时执行多个命令</li>
<li>第三阶段，这一阶段是真正开始执行命令的阶段，会执行来自客户端的命令</li>
<li>第四个阶段，将命令的执行结果发送给客户端</li>
</ul>
<font color="red">

1. 慢查询是发生在第三阶段
2. 客户端超时不一定有慢查询，但是慢查询是客户端超时的一个可能因素

</font>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="slowlog-max-len"><a href="#slowlog-max-len" class="headerlink" title="slowlog-max-len"></a>slowlog-max-len</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/redis.conf | grep -v &quot;#&quot; | grep -v &quot;^$&quot; | grep slowlog-max-len</span><br><span class="line">slowlog-max-len 128</span><br></pre></td></tr></table></figure>
<ul>
<li>这个参数的意识是慢查询日志最多可以存储多少条，这个是使用一个列表来保存慢查询日志的，当新插入列表的记录达到列表的长度上限后，最先开始插入的那条记录就会被删除</li>
<li>先进先出队列</li>
<li>固定长度</li>
<li>保存在内存</li>
</ul>
<h4 id="slowlog-log-slower-than"><a href="#slowlog-log-slower-than" class="headerlink" title="slowlog-log-slower-than"></a>slowlog-log-slower-than</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/redis.conf | grep -v &quot;#&quot; | grep -v &quot;^$&quot; | grep slowlog-log-slower-than</span><br><span class="line">slowlog-log-slower-than 10000</span><br></pre></td></tr></table></figure>
<ul>
<li>慢查询阈值，单位是微妙</li>
<li>slowlog-log-slower-than = 0,记录所有命令</li>
<li>slowlog-log-slower-than &lt; 0,不记录任何命令</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol>
<li>第一种方法是修改配置文件对应的配置项修改后，然后重启redis服务器</li>
<li>第二种方法是动态修改喽，使用以下命令进行修改</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config set slowlog-max-len 1000</span><br><span class="line">config set slowlog-log-slower-than 1000</span><br><span class="line">config rewrite </span><br></pre></td></tr></table></figure>
<p>使用动态修改后，必须使用 config rewrite命令，会将配置持久化到本地的配置文件中，否则只会对当前的有效</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><blockquote>
<p>> slowlog get[n]</p>
</blockquote>
<p>获取慢查询队列</p>
<blockquote>
<p> > slowlog len</p>
</blockquote>
<p>获取慢查询队列长度</p>
<blockquote>
<p>> slowlog reset</p>
</blockquote>
<p>清空慢查询队列</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>每一个慢查询日志都有4个属性构成，分别是慢查询的识别id，发生的时间戳，命令的执行耗时，执行命令和参数</p>
<p><a href="https://imgtu.com/i/cozrJH"><img src="https://z3.ax1x.com/2021/04/19/cozrJH.png" alt="cozrJH.png"></a></p>
<h2 id="运维经验"><a href="#运维经验" class="headerlink" title="运维经验"></a>运维经验</h2><ol>
<li>slowlog-log-slower-than不要设置过大，默认10ms,通常设置为1ms</li>
<li>slowlog-max-len不要设置过小，通常设置1000左右</li>
<li>定期持久化慢查询, 我们可以使用 slowlog get 命令获取慢查询日志列表然后将其持久化存储到其他存储中比如说MySQL中，然后可以写一个简单的web界面进行查询</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis发布订阅</title>
    <url>/article/redis-publish-subscribe/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;发布订阅呢，类似于我们在观看电视是一样的，播放的电视有电视台指定播放，我们需要调整到指定的电视频道才会呈现特定的电视内容，这里有3中角色，电视台，频道以及观看电视的我们，对应于redis的发布订阅中的发布者，订阅者以及频道，在这里，发布者就相当于电视台，订阅者就相当于我们观众，channel就相当于观看的频道。</p>
<p>&emsp;&emsp;有一点要说明，订阅者是从订阅的那一刻开始才能接收到消息，订阅以前是接收不到消息的</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><blockquote>
<p>publish  channel message</p>
</blockquote>
<ul>
<li>向频道发布消息，返回当前频道订阅的人数</li>
</ul>
<blockquote>
<p>subscribe [channel]</p>
</blockquote>
<ul>
<li>channel可以是多个，订阅频道消息</li>
</ul>
<blockquote>
<p>psubscribe [pattern…]</p>
</blockquote>
<ul>
<li>订阅模式,订阅一个或多个符合给定模式的频道。模式符包含以下几个：<ul>
<li>h?llo , 匹配任意一个字符，例如 hello,hallo,hxllo</li>
<li>h*llo,匹配零个或多个字符，例如hllo,hxxxxxxxxxllo</li>
<li>h[ae]llo,匹配括号中的任意一个字符，例如 hallo，hello</li>
</ul>
</li>
</ul>
<blockquote>
<p>pubsub channels [pattern]</p>
</blockquote>
<ul>
<li>列出至少有一个订阅者的频道列表，订阅模式的客户端是不会被统计的</li>
<li>pattern：频道通配符<ul>
<li>如果不给出pattern参数，那么列出订阅与发布系统中的所有活跃频道</li>
<li>如果给出pattern参数，那么列出和给定模式pattern相匹配的活跃频道</li>
</ul>
</li>
<li>复杂度：O(N) ， <code>N</code> 为活跃频道的数量（对于长度较短的频道和模式来说，将进行模式匹配的复杂度视为常数）</li>
</ul>
<blockquote>
<p>pubsub numsub [channel]</p>
</blockquote>
<ul>
<li>列出给定频道的订阅者数量, 订阅模式的客户端不计算在内</li>
</ul>
<blockquote>
<p>pubsub numpat</p>
</blockquote>
<ul>
<li>列出订阅模式的数量</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li><p>异步消息通知，订单支付时接收支付信息，<code>pay_notice_wk</code>+orderNo</p>
</li>
<li><p>消息队列</p>
</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="subscribe-publish"><a href="#subscribe-publish" class="headerlink" title="subscribe-publish"></a>subscribe-publish</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish c1 hello</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe c1 c2</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;c1&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;c2&quot;</span><br><span class="line">3) (integer) 2</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;c1&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br></pre></td></tr></table></figure>
<h3 id="psubscribe-publish"><a href="#psubscribe-publish" class="headerlink" title="psubscribe-publish"></a>psubscribe-publish</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish c1 c1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; publish c2 c2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; publish message m1</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; psubscribe c* message</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;c*&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;message&quot;</span><br><span class="line">3) (integer) 2</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;c*&quot;</span><br><span class="line">3) &quot;c1&quot;</span><br><span class="line">4) &quot;c1&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;c*&quot;</span><br><span class="line">3) &quot;c2&quot;</span><br><span class="line">4) &quot;c2&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;message&quot;</span><br><span class="line">3) &quot;message&quot;</span><br><span class="line">4) &quot;m1&quot;</span><br></pre></td></tr></table></figure>
<h3 id="pubsub"><a href="#pubsub" class="headerlink" title="pubsub"></a>pubsub</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe news.it news.sport</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;news.it&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;news.sport&quot;</span><br><span class="line">3) (integer) 2</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe news.it news.internet</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;news.it&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;news.internet&quot;</span><br><span class="line">3) (integer) 2</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; psubscribe new* c1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;new*&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;c1&quot;</span><br><span class="line">3) (integer) 2</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pubsub channels  // 列出所有活跃的频道列表</span><br><span class="line">1) &quot;news.it&quot;</span><br><span class="line">2) &quot;news.internet&quot;</span><br><span class="line">3) &quot;news.sport&quot;</span><br><span class="line">127.0.0.1:6379&gt; pubsub channels n* // 列出包含n开头的活跃的频道列表</span><br><span class="line">1) &quot;news.it&quot;</span><br><span class="line">2) &quot;news.internet&quot;</span><br><span class="line">3) &quot;news.sport&quot;</span><br><span class="line">127.0.0.1:6379&gt; pubsub numsub news.it // 统计订阅news.it频道的订阅者数量</span><br><span class="line">1) &quot;news.it&quot;</span><br><span class="line">2) (integer) 2</span><br><span class="line">127.0.0.1:6379&gt; pubsub numsub c1</span><br><span class="line">1) &quot;c1&quot;</span><br><span class="line">2) (integer) 0</span><br><span class="line">127.0.0.1:6379&gt; pubsub numpat // 列出订阅模式的数量</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>单点登录</title>
    <url>/article/single-sign-on/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;SSO(Single Sign On)，单点登录，简单来说就是在一个具有多个子系统的系统中，只用登录一个子系统，然后访问其他子系统时不需要再次登录，即“一次登录，多处访问”，能够有效的提升用户体验。</p>
<p>&emsp;&emsp;实现单点登录必须有一个认证中心，这个认证中心去统一负责用户身份的有效性，生成一个全局的session记录用户已经成功的登录了系统，然后给请求验证的子系统发送ticket去验证当前子系统用户的合法性，这样就可以实现用户登录A系统后不需要去登录B系统也能访问B系统的内容</p>
<font color="red">
&emsp;&emsp; 由于浏览器的同源策略,Cookie是不能跨域的，所以子系统和认证中心的域名应该在同一个一级域名下面才可以


</font>


<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><font color="blue">

大概的流程如下：

1. 用户首次访问任意一个子系统，系统会监测当前用户访问是否携带token，如果有并且校验通过怎会正常允许访问，没有token，会将用户的浏览页面重定向到认证中心并携带当前系统的请求url，在认证中心进行用户的登录验证

2. 用户在认证中心系统中输入自己的用户名和密码，认证中心进行身份校验，认证失败会有响应的提示。如果认证成功后认证中心会生成一个全局的session来记录当前的用户已成功登陆系统，然后生成一个ticket，重定向到来源的子系统并且会携带上生成的ticket

3. 子系统收到认证中心的回调后，会将当前收到的ticket向认证中心发起一个请求来验证这个ticket是否正确，校验成功后，子系统在本地生成一个局部的会话，记录用户的信息，生成一个token下发给用户，用户访问再一次A系统时就只需要校验token的有效性了

4. 用户访问另一个子系统时，子系统发现当前用户没有登录，会将用户重定向到认证中心进行登录并携带当前子系统的url，因为用户已经在认证中心成功登录了，认证中心的全局session中有当前用户信息，因此认证中心会生成一个ticket，重定向到请求的url，url中会携带生成的ticket，当子系统收到认证中心的请求后会再一次给认证中心发起一个请求，这个请求会携带上url中传递的ticket，来验证ticket的有效性，认证中心的验证通过后，子系统会在本地生成token并返回给当前客户端这样用户就实现了在另一个子系统上不用登陆就已经是登录的状态了。

5. 有一个点需要注意的就是，当用户在一个子系统发起注销登录的请求操作后，需要对该用户已经登录的所有的子系统进行注销操作，然后在认证中心销毁用户的会话信息

</font>

<p><img src="https://img.imgdb.cn/item/6066d08e8322e6675cd51454.png" alt=""></p>
<p><img src="https://img.imgdb.cn/item/6066d1cb8322e6675cd6b8e5.png" alt=""></p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>说一下怎么去实现不涉及具体的代码</p>
<blockquote>
<p>认证中心</p>
</blockquote>
<ol>
<li><p>首先，肯定要有一个提供用户登录的页面和处理登录的接口</p>
</li>
<li><p>其次，在用户输入正确的用户名和密码的前提下，需要生成一个全局的session来记录当前用户的一些基本信息，并且要生成ticket，通过header方法重定向到用户登录的子系统中</p>
</li>
<li><p>另外，还需要有一个验证ticket有效性的方法，来保证传递给子系统的ticket不被劫持和篡改，来进一步保证系统的安全性</p>
</li>
<li><p>我们可以将生成的ticket保存在缓存系统中，通常是使用的redis来记录；</p>
</li>
<li><p>最后，除了记录用户的一些基础信息外，也要记录用户已经登录了哪些子系统，当用户退出登录时需要把所有的子系统相关的登录信息都需要注销</p>
</li>
</ol>
<blockquote>
<p>子系统A</p>
</blockquote>
<ol>
<li><p>首先，有一个判断用户token是否有效的方法，来检测用户是否已经登录</p>
</li>
<li><p>其次，发起校验ticket有效性的方法，保证系统的安全性</p>
</li>
<li><p>最后，需要有一个生成token的方法，来记录用户已经登录了当前的系统，用户下一次访问系统时必须携带子系统生成的token，只有token校验通过后才能对用户放行</p>
</li>
</ol>
<blockquote>
<p>子系统B</p>
</blockquote>
<p>同子系统A</p>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>redis开发规范</title>
    <url>/article/redis-use-standard/</url>
    <content><![CDATA[<h2 id="键值设计"><a href="#键值设计" class="headerlink" title="键值设计"></a>键值设计</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>名称的设计：</p>
<ul>
<li>可读性和可管理性：以业务名(或数据库名)为前缀(防止key冲突)，用冒号分割，比如业务名:表名:id,如:ug:video:1</li>
<li>简洁性：保证语义的前提下，控制key的长度，当key较多时，内存占用也应当重视</li>
<li>不要包含特殊字符</li>
</ul>
<h3 id="value"><a href="#value" class="headerlink" title="value"></a>value</h3><ul>
<li>拒绝bigkey</li>
<li>选择合适的数据结构</li>
<li>过期设计</li>
</ul>
<h4 id="bigke"><a href="#bigke" class="headerlink" title="bigke"></a>bigke</h4><blockquote>
<p> 标准</p>
</blockquote>
<ul>
<li>string类型控制在10KB以内</li>
<li>hash、list、set、zset元素个数不要超过5000</li>
</ul>
<blockquote>
<p> 危害</p>
</blockquote>
<ul>
<li>网络阻塞</li>
<li>Redis阻塞</li>
<li>集群节点数据不均衡</li>
<li>频繁序列化：应用服务器CPU消耗</li>
</ul>
<blockquote>
<p> 发现</p>
</blockquote>
<ul>
<li>应用异常</li>
<li>redis-cli —bigkeys</li>
<li>scan+debug object</li>
<li>主动报警：网络流量监控、客户端监控</li>
<li>内核热点key问题优化</li>
</ul>
<blockquote>
<p>删除</p>
</blockquote>
<ul>
<li>阻塞：注意隐性删除(过期，rename等)</li>
<li>lazy delete命令</li>
</ul>
<blockquote>
<p> 预防</p>
</blockquote>
<ul>
<li>优化数据结果：例如二级拆分</li>
<li>物理隔离或者万兆网卡</li>
<li>命令优化</li>
<li>报警和定期优化</li>
</ul>
<h2 id="命令优化"><a href="#命令优化" class="headerlink" title="命令优化"></a>命令优化</h2><ol>
<li>O(N)以上的命令需要关注N的数量，例如hgetall，lrange，smembers，zrange，sinter等不能说不能使用，但是需要明确N的值，有遍历的需求可以使用hscan，sscan，zscan代替</li>
<li>禁用命令，禁止使用keys，flushall，flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理</li>
<li>合理使用select<ol>
<li>redis的多数据较弱，使用数字进行区分</li>
<li>很多客户端支持较差</li>
<li>同时多业务用多数据库实际还是单线程处理，会有干扰</li>
</ol>
</li>
<li>Redis事务功能较弱，不建议过多使用<ol>
<li>redis事务功能不支持回滚</li>
<li>集群版本要求一次事务操作的key必须在一个solt上(可以使用hashtag功能解决)</li>
</ol>
</li>
<li>Redis集群版本在使用lua上有特殊要求<ol>
<li>所有key，必须在1个solt上否则直接返回error</li>
</ol>
</li>
<li>必要情况下使用monitor命令时，要注意不要长时间使用</li>
</ol>
<h2 id="客户端优化"><a href="#客户端优化" class="headerlink" title="客户端优化"></a>客户端优化</h2><ul>
<li>避免多个应用使用一个redis实例，不相干的业务拆分，公共数据做服务化</li>
<li>使用连接池</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>composer</title>
    <url>/article/composer/</url>
    <content><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://getcomposer.org/" title="getcomposer.org">官方参考</a></p>
<p><a href="https://laravel-china.org/docs/composer/2018" title="laravel-china">翻译参考</a></p>
<p><a href="https://www.phpcomposer.com/" title="php-composer">中文网</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>composer是PHP的扩展包安装工具，安装composer时PHP需要已成功加载openssl扩展</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~$ php -m | grep openssl</span><br><span class="line">openssl</span><br></pre></td></tr></table></figure>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><ol>
<li>访问 composer官网</li>
<li>下载composer的安装器, <a href="https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos,&quot;Composer-Setup.exe&quot;">点我直达</a></li>
<li>软件安装，下一步就行了</li>
<li>验证</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer -v</span><br></pre></td></tr></table></figure>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> php -r <span class="string">&quot;copy(&#x27;https://getcomposer.org/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> php -r <span class="string">&quot;if (hash_file(&#x27;sha384&#x27;, &#x27;composer-setup.php&#x27;) === &#x27;756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3&#x27;) &#123; echo &#x27;Installer verified&#x27;; &#125; else &#123; echo &#x27;Installer corrupt&#x27;; unlink(&#x27;composer-setup.php&#x27;); &#125; echo PHP_EOL;&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> php composer-setup.php</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> php -r <span class="string">&quot;unlink(&#x27;composer-setup.php&#x27;);&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> php composer.phar</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> composer // 就可以正常使用了</span></span><br></pre></td></tr></table></figure>
<h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install composer</span></span><br></pre></td></tr></table></figure>
<h2 id="配置加速"><a href="#配置加速" class="headerlink" title="配置加速"></a>配置加速</h2><p>下面演示配置的是阿里云镜像，其他的镜像只需要修改镜像地址就可以了</p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>
<p>取消设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config -g --unset repos.packagist</span><br></pre></td></tr></table></figure>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>
<p>取消设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer config --unset repos.packagist</span><br></pre></td></tr></table></figure>
<h3 id="调式"><a href="#调式" class="headerlink" title="调式"></a>调式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> composer -vvv</span> </span><br></pre></td></tr></table></figure>
<h2 id="composer-json"><a href="#composer-json" class="headerlink" title="composer.json"></a>composer.json</h2><h3 id="根项目"><a href="#根项目" class="headerlink" title="根项目"></a>根项目</h3><ul>
<li>根项目是由当前项目目录下的 composer.json 定义的项目，composer.json 中定义了您当前项目的依赖项。某些字段仅在根项目中的上下文中应用，举个例子， config 字段，只有根项目才能定义和配置，依赖项的配置将会被忽略，这代表 config 字段是 root-only</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="name-名称"><a href="#name-名称" class="headerlink" title="name 名称"></a>name 名称</h4><ul>
<li><p>包的名称，由<strong>作者名称</strong>和<strong>项目名称</strong>组成，使用 / 分割，例如：<br>&gt;</p>
<blockquote>
<pre><code> monolog/monolog
 igorw/event-source
</code></pre></blockquote>
</li>
<li><p>包名称可以包含任何字符，包括空格，并且不区分大小写 ( foo/bar 和 Foo/Bar 会被认为是同一个包)。为了简化安装，建议定义一个不包含非字母数字字符或空格的短名称。</p>
</li>
<li>发布一个包（库）的必要条件</li>
</ul>
<h4 id="description-描述"><a href="#description-描述" class="headerlink" title="description 描述"></a>description 描述</h4><ul>
<li>包的简短描述，通常这是一行介绍就行。</li>
<li>发布一个包（库）的必要条件</li>
</ul>
<h4 id="version-版本"><a href="#version-版本" class="headerlink" title="version 版本"></a>version 版本</h4><ul>
<li>包的版本，在大多数情况下，这不是必须的，应该省略（参考下文）。</li>
<li>必须遵循  X.Y.Z 或 vX.Y.Z，可选后缀 -dev, -patch ( -p ), -alpha ( -a ), -beta ( -b ) 或 -RC， patch, alpha , beta 和 RC 后缀也可以跟一个数字。</li>
<li>例如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.0.0</span><br><span class="line">1.0.2</span><br><span class="line">1.1.0</span><br><span class="line">0.2.5</span><br><span class="line">1.0.0-dev</span><br><span class="line">1.0.0-alpha3</span><br><span class="line">1.0.0-beta2</span><br><span class="line">1.0.0-RC5</span><br><span class="line">v2.0.4-p1</span><br></pre></td></tr></table></figure></li>
<li>如果包仓库可以从某个位置推断出版本，则可填，例如 VCS 仓库中的 VCS 标记名称，这种情况还是建议省略掉。</li>
</ul>
<h4 id="type-类型"><a href="#type-类型" class="headerlink" title="type 类型"></a>type 类型</h4><ul>
<li>包的类型，默认为库 library 。</li>
<li>包类型用于自定义安装逻辑。如果您有一个包需要一个特殊逻辑，您可以定义一个自定义类型。 这可以是 symfony-bundle， wordpress-plugin 或者 typo3-module。这些类型都将用于某些特定的项目。而对应的项目将要提供一种能够安装该类型包的安装程序</li>
<li>原生的支持类型:<ul>
<li>library: 默认类型，它只需要将文件复制到 vendor 目录。</li>
<li>project: 当前包是一个项目，而不是一个库。例：框架应用程序 Symfony standard edition，内容管理系统  SilverStripe installer 或者完全成熟的分布式应用程序。使用 IDE 创建一个新的工作区时，这可以为其提供项目列表的初始化。</li>
<li>metapackage: 包含需求并将触发其安装的空包，但不包含文件，并且不会向系统写入任何内容。因此这种安装类型并不需要一个 dist 或 source。</li>
<li>composer-plugin: 一个安装类型为 composer-plugin 的包，它有一个自定义安装类型，可以为其它包提供一个 installler。详细请查看自定义安装类型。</li>
</ul>
</li>
</ul>
<h4 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h4><ul>
<li>一组用于搜索与筛选的与包相关的关键字。</li>
<li>非必须。</li>
<li>例如:<br>&gt;<blockquote>
<p>logging<br>events<br>database<br>redis<br>templating</p>
</blockquote>
</li>
</ul>
<h4 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h4><ul>
<li>项目网站的URL地址</li>
<li>非必须</li>
</ul>
<h4 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h4><ul>
<li>README 文档的绝对路径</li>
<li>非必须</li>
</ul>
<h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><ul>
<li>版本的发布日期，必须是YYYY-MM-DD 或 YYYY-MM-DD HH:MM:SS 格式。</li>
<li>非必须</li>
</ul>
<h4 id="license"><a href="#license" class="headerlink" title="license"></a>license</h4><ul>
<li>包的许可证，可以是一个字符串或者是一个字符串数组。</li>
<li><p>最常见的许可证推荐表示法如下（按字母排序）：<a href="https://spdx.org/licenses/" title="SPDX Open Source License Registry">标识符</a><br>&gt;</p>
<blockquote>
<p>Apache-2.0<br>BSD-2-Clause<br>BSD-3-Clause<br>BSD-4-Clause<br>GPL-2.0-only / GPL-2.0-or-later<br>GPL-3.0-only / GPL-3.0-or-later<br>LGPL-2.1-only / LGPL-2.1-or-later<br>LGPL-3.0-only / LGPL-3.0-or-later<br>MIT</p>
</blockquote>
</li>
<li><p>对于闭源软件，你可能需要使用 “proprietary” 作为许可标识符。</p>
</li>
<li>对于一个包来说，当在多个许可证之间进行选择时（『析取许可证』），可以将多个许可指定为一个数组。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;license&quot;</span>: [</span><br><span class="line">       <span class="string">&quot;LGPL-2.1-only&quot;</span>,</span><br><span class="line">       <span class="string">&quot;GPL-3.0-or-later&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;license&quot;</span>: <span class="string">&quot;(LGPL-2.1-only or GPL-3.0-or-later)&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>当需要使用多个许可证时（『合取许可证』），它们应该在括号内使用 “and” 分隔<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;license&quot;</span> : <span class="string">&quot;(LGPL-2.1-only and GPL-3.0-or-later)&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="authors"><a href="#authors" class="headerlink" title="authors"></a>authors</h4><ul>
<li>包的作者，这是一个对象数组。</li>
<li>每一个作者对象可以包含以下属性：<ul>
<li>name: 作者的名字。通常是真实姓名。</li>
<li>email: 作者的邮件地址。</li>
<li>homepage: 作者个人网站的 URL 地址。</li>
<li>role: 作者在项目中担任的角色（如：开发者或者译者）。</li>
</ul>
</li>
<li>示例:<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;authors&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Nils Adermann&quot;</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>: <span class="string">&quot;naderman@naderman.de&quot;</span>,</span><br><span class="line">            <span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;http://www.naderman.de&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Developer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jordi Boggiano&quot;</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>: <span class="string">&quot;j.boggiano@seld.be&quot;</span>,</span><br><span class="line">            <span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;https://seld.be&quot;</span>,</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;Developer&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>可选项，但是强烈建议写上。</li>
</ul>
<h4 id="support"><a href="#support" class="headerlink" title="support"></a>support</h4><ul>
<li>获取对项目支持的信息对象。</li>
<li>对象信息必须包括以下属性：<ul>
<li>email: 项目支持 email 地址。</li>
<li>issues: 跟踪问题的 URL 地址。</li>
<li>forum: 论坛 URL 地址。</li>
<li>wiki:  Wiki URL 地址。</li>
<li>irc: IRC 聊天频道地址，as irc://server/channel.</li>
<li>source: 网址浏览或下载源。</li>
<li>docs: 文件的 URL 。</li>
<li>rss: RSS 源的 URL </li>
</ul>
</li>
<li>示例<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;support&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: <span class="string">&quot;support@example.org&quot;</span>,</span><br><span class="line">        <span class="string">&quot;irc&quot;</span>: <span class="string">&quot;irc://irc.freenode.org/composer&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="require"><a href="#require" class="headerlink" title="require"></a>require</h4></li>
</ul>
<p>-必须安装的依赖包列表，这些包必须满足条件，否则不会安装。</p>
<h4 id="require-dev-root-only"><a href="#require-dev-root-only" class="headerlink" title="require-dev(root-only)"></a>require-dev(root-only)</h4><ul>
<li>开发或运行测试时的依赖包列表。根目录下的 composer.json 即 root 包，root 包需要的 dev 依赖默认安装， 安装和更新都支持 —no-dev 选项，以避免 dev 依赖被安装。</li>
</ul>
<h4 id="conflict"><a href="#conflict" class="headerlink" title="conflict"></a>conflict</h4><ul>
<li>列表中的包与当前包冲突，不允许同时安装。</li>
</ul>
<h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><ul>
<li>列表中的包将被当前包替换。所以你可以 fork 一个包，以不同的名称、版本号发布<br>。之后如果有其他任何包依赖原包，将依赖于你 fork 的包。</li>
<li>这对于一个内部包含子包的主包很有用。例如 symfony/symfony 这个主包，包含了 Symfony 的所有组件，而这些组件又可以单独的发布。如果你 require 了主包，那么它就会自动完成其下各个子包的依赖，因为主包取代了子包。<blockquote>
<p>请注意，在上述方法取代子包时，你应该只对子包使用 self.version 这一个版本约束，以确保主包仅替换子包的准确版本，而不是其他版本。</p>
</blockquote>
</li>
</ul>
<h4 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h4><ul>
<li>此程序包提供了一个其他程序包列表。 这对于通用接口非常有用， 一个包可能依赖于一些虚拟的logger包，任何实现这个logger接口的库都可以在provide中列出来。</li>
</ul>
<h4 id="suggest"><a href="#suggest" class="headerlink" title="suggest"></a>suggest</h4><ul>
<li>建议的包可以增强或者适用于当前的包，这些信息，在这个包安装完成之后显示，以便给用户提供可供安装的更多包的信息，即使他们不是被严格要求的。</li>
<li>格式如同上面包的链接，除了值是纯文本，且不包含版本信息。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;suggest&quot;: &#123;</span><br><span class="line">        &quot;monolog/monolog&quot;: &quot;Allows more advanced logging of the application flow&quot;,</span><br><span class="line">        &quot;ext-xml&quot;: &quot;Needed to support XML format in class Foo&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="autoload"><a href="#autoload" class="headerlink" title="autoload"></a>autoload</h4><ul>
<li>PHP 自动加载的映射。</li>
<li>支持 PSR-4 和 PSR-0 自动加载，class 映射 和 files 引用。</li>
<li>推荐使用 PSR-4 规范（添加类时，无需重新生成自动加载映射）。</li>
</ul>
<h4 id="PSR-4"><a href="#PSR-4" class="headerlink" title="PSR-4"></a>PSR-4</h4><ul>
<li>使用 PSR-4 时，你可以定义从命名空间到路径的映射。</li>
<li>命名空间前缀必须以 \\ 结尾，以避免类似前缀间的冲突。例如，前缀 Foo 可能匹配 ForBar 命名空间的类，因此尾部的反斜杠解决了这种问题。</li>
<li>在安装、更新时，PSR-4的引用都被生成单个 key=&gt;value 的数组，该数组可以在生成文件 vendor/composer/autoload_psr4.php 中查看。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-4&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Monolog\\&quot;</span>: <span class="string">&quot;src/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Vendor\\Namespace\\&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>需要在多个目录中加载相同前缀，可以指定为数组。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-4&quot;</span>: &#123; <span class="string">&quot;Monolog\\&quot;</span>: [<span class="string">&quot;src/&quot;</span>, <span class="string">&quot;lib/&quot;</span>] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>需要加载目录中所有命名空间的类，可以使用一个空前缀，如：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-4&quot;</span>: &#123; <span class="string">&quot;&quot;</span>: <span class="string">&quot;src/&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="PSR-0"><a href="#PSR-0" class="headerlink" title="PSR-0"></a>PSR-0</h4><ul>
<li>使用 PSR-0 时，可以定义相对于包的根目录，命名空间到路径的映射。也支持 PEAR-style 的非命名空间约定。</li>
<li>在安装、更新时，PSR-0 的引用都被生成单个 key=&gt;value 的数组，该数组可以在生成文件 vendor/composer/autoload_namespaces.php 中查看。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-0&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Monolog\\&quot;</span>: <span class="string">&quot;src/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Vendor\\Namespace\\&quot;</span>: <span class="string">&quot;src/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Vendor_Namespace_&quot;</span>: <span class="string">&quot;src/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>如果需要在多个目录中加载相同前缀，可以指定为数组：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-0&quot;</span>: &#123; <span class="string">&quot;Monolog\\&quot;</span>: [<span class="string">&quot;src/&quot;</span>, <span class="string">&quot;lib/&quot;</span>] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>PSR-0 不仅可以用于命名空间的声明，还可以直接指定到类。这对于在全局命名空间中只有一个类的包非常有用。例如，只有一个 php 文件位于包的根目录中，则可能声明为：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-0&quot;</span>: &#123; <span class="string">&quot;UniqueGlobalClass&quot;</span>: <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>需要加载目录中所有命名空间的类，可以使用一个空前缀，如：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-0&quot;</span>: &#123; <span class="string">&quot;&quot;</span>: <span class="string">&quot;src/&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="classmap"><a href="#classmap" class="headerlink" title="classmap"></a>classmap</h4><ul>
<li>在安装或更新的时候，classmap 被组合成单个键值对数组（key=&gt;value）的形式，这个数组可以在 vendor/composer/autoload_classmap.php 中找到。这个映射是通过扫描给定的 文件夹/文件中所有的.php和.inc来生成的。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;classmap&quot;</span>: [<span class="string">&quot;src/&quot;</span>, <span class="string">&quot;lib/&quot;</span>, <span class="string">&quot;Something.php&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h4><ul>
<li>在每个请求中引入某个文件，那么你可以使用 files 自动加载机制。这有利于加载包中无法自动加载的php函数。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;files&quot;</span>: [<span class="string">&quot;src/MyLibrary/functions.php&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Exclude-files-from-classmaps"><a href="#Exclude-files-from-classmaps" class="headerlink" title="Exclude files from classmaps"></a>Exclude files from classmaps</h4><ul>
<li>我们可以使用 exclude-from-classmap 从类库映射中排查某些文件或文件夹。这很方便我们在生成环境中排查测试类</li>
<li>类映射生成器将忽略此处配置的路径中的所有文件。这些路径是包根目录（即composer.json位置）的绝对路径，并且支持 <em> 来匹配除斜杠之外的任何东西，并且 <em>* 来匹配任何东西。 </em></em>隐含地添加到路径的末尾。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;exclude-from-classmap&quot;</span>: [<span class="string">&quot;/Tests/&quot;</span>, <span class="string">&quot;/test/&quot;</span>, <span class="string">&quot;/tests/&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="autoload-dev-root-only"><a href="#autoload-dev-root-only" class="headerlink" title="autoload-dev(root-only)"></a>autoload-dev(root-only)</h4><ul>
<li>这个节点允许为开发阶段自定义加载规则。</li>
<li>运行测试套件所需的类不应包含在主自动加载规则中，以避免在生产中污染自动加载器以及其他人将您的包用作依赖项。</li>
<li>使用专用路径进行单元测试，并将其添加到 autoload-dev 部分。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-4&quot;</span>: &#123; <span class="string">&quot;MyLibrary\\&quot;</span>: <span class="string">&quot;src/&quot;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;autoload-dev&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-4&quot;</span>: &#123; <span class="string">&quot;MyLibrary\\Tests\\&quot;</span>: <span class="string">&quot;tests/&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="include-path-弃用"><a href="#include-path-弃用" class="headerlink" title="include-path 弃用"></a>include-path 弃用</h4><blockquote>
<p>弃用:这里仅仅用于支持遗留项目，所有的新代码最好使用自动加载。因此，这是一种弃用的做法，但该功能本身不会从 Composer 中消失。</p>
<ul>
<li>应该附加到PHP的 include_path 的路径列表。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;include-path&quot;</span>: [<span class="string">&quot;lib/&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>可选</li>
</ul>
</blockquote>
<h4 id="target-dir"><a href="#target-dir" class="headerlink" title="target-dir"></a>target-dir</h4><blockquote>
<p>弃用：这仅用于支持传统的 PSR-0 样式自动加载，并且所有新代码最好是没有使用 target-dir 的 PSR-4，鼓励使用 PHP 命名空间的 PSR-0 项目转移到PSR-4。</p>
<ul>
<li>可选</li>
</ul>
</blockquote>
<h4 id="minimun-stability-root-only"><a href="#minimun-stability-root-only" class="headerlink" title="minimun-stability(root-only)"></a>minimun-stability(root-only)</h4><blockquote>
<p>这定义了按稳定性过滤包的默认值，默认为stable。所以如果你依赖dev 包，你应该在你的文件中指定。所有包都将根据稳定性检出相应的版本，那些低于 minimum-stability 设置的版本将被自动忽略。（请注意，你还可以使用在 require 中指定的版本约束来定义每个包的稳定性要求（请参阅package links）。<br>可用选项（按稳定性排序）是 dev，alpha，beta，RC 和 stable。</p>
</blockquote>
<h4 id="prefer-stable-root-only"><a href="#prefer-stable-root-only" class="headerlink" title="prefer-stable (root-only)"></a>prefer-stable (root-only)</h4><ul>
<li>启用此项后，如果可以找到兼容的稳定包，Composer将优先选择比不稳定包更稳定的包。如果您需要开发版本或者某个软件包只有alpha可用，那么仍然会选择那些允许最小稳定性允许的包。使用 “prefer-stable”: true 来开启此项.</li>
</ul>
<h4 id="repositories-root-only"><a href="#repositories-root-only" class="headerlink" title="repositories (root-only)"></a>repositories (root-only)</h4><ul>
<li>使用自定义的安装源</li>
<li>Composer 默认只使用 packagist 的安装源. 通过定义 repositories 你可以从任何其他地方获取包.</li>
<li>存储库不会递归解析，您只能将它们添加到主 composer.json 中。依赖项中 composer.json 的 repositories 配置被忽略。</li>
<li>安装源类型：<ul>
<li>composer: Composer 存储库只是通过网络（HTTP，FTP，SSH）提供的 packages.json 文件，其中包含带有额外 dist 或 source 信息的 composer.json 对象列表。 packages.json 文件使用PHP流加载。您可以使用 options 参数在该流上设置额外选项。</li>
<li>vcs: 版本控制系统存储库可以从git, svn, fossil 或 hg repositories。</li>
<li>pear: 通过 pear，可以将任何 pear 存储库导入 Composer 项目。</li>
<li>package: 如果依赖于一个不支持 composer 的项目，可以使用 package 来定义包。只需要内联 composer.json 对象。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;repositories&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;composer&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://packages.example.com&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;composer&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://packages.example.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;verify_peer&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;vcs&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/Seldaek/monolog&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pear&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://pear2.php.net&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;package&quot;</span>,</span><br><span class="line">            <span class="string">&quot;package&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;smarty/smarty&quot;</span>,</span><br><span class="line">                <span class="string">&quot;version&quot;</span>: <span class="string">&quot;3.1.7&quot;</span>,</span><br><span class="line">                <span class="string">&quot;dist&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.smarty.net/files/Smarty-3.1.7.zip&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;zip&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;source&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://smarty-php.googlecode.com/svn/&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;svn&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;reference&quot;</span>: <span class="string">&quot;tags/Smarty_3_1_7/distribution/&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="config-root-only"><a href="#config-root-only" class="headerlink" title="config (root-only)"></a>config (root-only)</h4><ul>
<li>一组配置选项。它仅用于项目。</li>
</ul>
<h4 id="scripts-root-only"><a href="#scripts-root-only" class="headerlink" title="scripts (root-only)"></a>scripts (root-only)</h4><ul>
<li>Composer 允许再安装过程的各个部分中执行脚本。</li>
</ul>
<h4 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h4><ul>
<li>scripts 使用的任意扩展数据</li>
</ul>
<h4 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h4><ul>
<li>一组被链接到 bin-dir 的二进制文件（来自config）。</li>
</ul>
<h4 id="archive"><a href="#archive" class="headerlink" title="archive"></a>archive</h4><ul>
<li>一组用于创建包归档的选项<ul>
<li>exclude:允许配置一组需要排除的路径，语法与 .gitignore 文件一致。如果开头使用（!）将代表包含任意匹配文件，即使它们之前被排除了。/ 表示从项目相对路径的根目录进行匹配，* 不会扩展到目录分隔符。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;archive&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;/foo/bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;/*.test&quot;</span>, <span class="string">&quot;!/foo/bar/baz&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个例子将会包含 /dir/foo/bar/file, /foo/bar/baz, /file.php, /foo/my.test 并且排除 /foo/bar/any, /foo/baz, 和 /my.test.</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="abandoned-弃用"><a href="#abandoned-弃用" class="headerlink" title="abandoned(弃用)"></a>abandoned(弃用)</h4><ul>
<li>标记此包是否已经被弃用,它可以是布尔值也可以指向推荐替代的包名称或 URL。<blockquote>
<p>使用 “abandoned”: true 来定义这个包已经被弃用了。<br>使用 “abandoned”: “monolog/monolog”来定义这个包已经被弃用，并且它的替代包是 monolog/monolog。默认为 false。</p>
</blockquote>
</li>
</ul>
<h4 id="non-feature-branches（非功能分支）"><a href="#non-feature-branches（非功能分支）" class="headerlink" title="non-feature-branches（非功能分支）"></a>non-feature-branches（非功能分支）</h4><ul>
<li>一组非数字（例如 “latest” 或其他类似的标记）命名的分支的正则表达式列表，<br>不会作为功能分支处理。这是一个字符串数组。</li>
</ul>
<hr>
<h2 id="composer-lock"><a href="#composer-lock" class="headerlink" title="composer.lock"></a>composer.lock</h2><h2 id="在安装依赖后，Composer-将把安装时确切的版本号列表写入-composer-lock-文件。这将锁定该项目的特定版本。确保了该库的每个使用者都能得到相同的依赖版本。"><a href="#在安装依赖后，Composer-将把安装时确切的版本号列表写入-composer-lock-文件。这将锁定该项目的特定版本。确保了该库的每个使用者都能得到相同的依赖版本。" class="headerlink" title="- 在安装依赖后，Composer 将把安装时确切的版本号列表写入 composer.lock 文件。这将锁定该项目的特定版本。确保了该库的每个使用者都能得到相同的依赖版本。"></a>- 在安装依赖后，Composer 将把安装时确切的版本号列表写入 composer.lock 文件。这将锁定该项目的特定版本。确保了该库的每个使用者都能得到相同的依赖版本。</h2><h2 id="包版本"><a href="#包版本" class="headerlink" title="包版本"></a>包版本</h2><ul>
<li>确切的版本号 1.0.2</li>
<li>范围<ul>
<li>$&gt;=1.0 </li>
<li>$&gt;=1.0,&lt;2.0  </li>
<li>$&gt;=1.0,<1.1|>=1.2&gt;<blockquote>
<p>有效的运算符：&gt;、&gt;=、&lt;、&lt;=、!=。<br>可以定义多个范围，用逗号隔开，这将被视为一个逻辑AND处理。一个管道符号|将作为逻辑OR处理。AND 的优先级高于 OR。</p>
</blockquote>
</li>
</ul>
</li>
<li>通配符 1.0.* &lt;=&gt; &gt;=1.0,&lt;1.1</li>
<li>赋值运算符 ~1.2 &lt;=&gt; &gt;=1.2,&lt;2.0</li>
</ul>
<hr>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="全局参数"><a href="#全局参数" class="headerlink" title="全局参数"></a>全局参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--verbose (-v): 增加提示信息。</span><br><span class="line">  -v  正常输出</span><br><span class="line">  -vv 表示更详细的输出</span><br><span class="line">  -vvv debug</span><br><span class="line">--help (-h): 查看帮助信息。</span><br><span class="line">--quiet (-q): 不输出任何信息。</span><br><span class="line">--no-interaction (-n): 不询问任何相关的问题。</span><br><span class="line">--no-plugins: 取消插件。</span><br><span class="line">--working-dir (-d): 指定工作目录，默认为当前目录。</span><br><span class="line">--profile: 查看耗时和内存使用情况。</span><br><span class="line">--ansi: 强制输出为ANSI编码格式。</span><br><span class="line">--no-ansi: 取消ANSI编码格式输出。</span><br><span class="line">--version (-V): 查看版本号。</span><br></pre></td></tr></table></figure>
<h3 id="进程退出代码"><a href="#进程退出代码" class="headerlink" title="进程退出代码"></a>进程退出代码</h3><ul>
<li>0 正常</li>
<li>1 通用/未知错误</li>
<li>2 依赖关系处理错误</li>
</ul>
<h3 id="composer-show-—platform"><a href="#composer-show-—platform" class="headerlink" title="composer show —platform"></a>composer show —platform</h3><p> 获取本地可用的平台包</p>
<h3 id="composer-init"><a href="#composer-init" class="headerlink" title="composer init"></a>composer init</h3><ul>
<li>初始化 composer.json 文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">composer init</span> </span><br><span class="line">  Welcome to the Composer config generator</span><br><span class="line">This command will guide you through creating your composer.json config.</span><br><span class="line">// 包名称</span><br><span class="line">Package name (&lt;vendor&gt;/&lt;name&gt;) [administrator/test]: xiaoxiao/test</span><br><span class="line">// 包解释</span><br><span class="line">Description []: test test</span><br><span class="line">// 包作者</span><br><span class="line">Author [xiaoixao &lt;jixiaoxiao0301@163.com&gt;, n to skip]:</span><br><span class="line">// 稳定性过滤包值，默认stable</span><br><span class="line">Minimum Stability []:</span><br><span class="line">// 项目类型</span><br><span class="line">Package Type (e.g. library, project, metapackage, composer-plugin) []: library</span><br><span class="line">//授权类型</span><br><span class="line">License []: MIT</span><br><span class="line"></span><br><span class="line">Define your dependencies.</span><br><span class="line">// 是否有需要的依赖，如有依赖则输入要安装的依赖</span><br><span class="line">Would you like to define your dependencies (require) interactively [yes]?</span><br><span class="line">Search for a package: php</span><br><span class="line">Enter the version constraint to require (or leave blank to use the latest version): &gt;=7.1.0</span><br><span class="line">Search for a package:</span><br><span class="line">// 是否需要 dev 包</span><br><span class="line">Would you like to define your dev dependencies (require-dev) interactively [yes]?</span><br><span class="line">Search for a package:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;xiaoxiao/test&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;test test&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;library&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;php&quot;: &quot;&gt;=7.1.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;xiaoixao&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;jixiaoxiao0301@163.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Do you confirm generation [yes]?</span><br></pre></td></tr></table></figure>
<h3 id="composer-install"><a href="#composer-install" class="headerlink" title="composer install"></a>composer install</h3><ul>
<li>install 命令从当前目录读取 composer.json 文件，处理了依赖关系，<br>并把其安装到 vendor 目录下。</li>
<li>如果当前目录下存在 composer.lock文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。如果没有 composer.lock 文件，composer 将在处理完依赖关系后创建它。</li>
<li>参数<ul>
<li>—prefer-source: 下载包的方式有两种： source 和 dist。对于稳定版本 composer 将默认使用 dist 方式。而 source 表示版本控制源 。如果—prefer-source 是被启用的，composer 将从 source 安装（如果有的话）。如果想要使用一个 bugfix 到你的项目，这是非常有用的。并且可以直接从本地的版本库直接获取依赖关系。</li>
<li>—prefer-dist: 与 —prefer-source 相反，composer 将尽可能的从 dist 获取，这将大幅度的加快在 build servers 上的安装。这也是一个回避 git 问题的途径，如果你不清楚如何正确的设置。</li>
<li>—dry-run: 如果你只是想演示而并非实际安装一个包，你可以运行 —dry-run 命令，它将模拟安装并显示将会发生什么。</li>
<li>—dev: 安装 require-dev 字段中列出的包（这是一个默认值）。</li>
<li>—no-dev: 跳过 require-dev 字段中列出的包</li>
<li>—no-scripts: 跳过 composer.json 文件中定义的脚本。</li>
<li>—no-plugins: 关闭 plugins。</li>
<li>—no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。</li>
<li>—optimize-autoloader (-o): 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。</li>
</ul>
</li>
</ul>
<h3 id="compsoer-update"><a href="#compsoer-update" class="headerlink" title="compsoer update"></a>compsoer update</h3><h3 id="composer-require"><a href="#composer-require" class="headerlink" title="composer require"></a>composer require</h3><h3 id="composer-global"><a href="#composer-global" class="headerlink" title="composer global"></a>composer global</h3><h3 id="composer-search"><a href="#composer-search" class="headerlink" title="composer search"></a>composer search</h3><h3 id="composer-show"><a href="#composer-show" class="headerlink" title="composer show"></a>composer show</h3><h3 id="composer-depends"><a href="#composer-depends" class="headerlink" title="composer depends"></a>composer depends</h3><h3 id="composer-validate"><a href="#composer-validate" class="headerlink" title="composer validate"></a>composer validate</h3><h3 id="composer-status"><a href="#composer-status" class="headerlink" title="composer status"></a>composer status</h3><h3 id="composer-self-update"><a href="#composer-self-update" class="headerlink" title="composer self-update"></a>composer self-update</h3><ul>
<li>将 Composer 自身升级到最新版本</li>
</ul>
<h3 id="composer-config"><a href="#composer-config" class="headerlink" title="composer config"></a>composer config</h3><h3 id="composer-create-project"><a href="#composer-create-project" class="headerlink" title="composer create-project"></a>composer create-project</h3><ul>
<li>你可以使用 Composer 从现有的包中创建一个新的项目。这相当于执行了一个 git clone 或 svn checkout 命令后将这个包的依赖安装到它自己的 vendor 目录。</li>
</ul>
<h3 id="composer-dump-autoload"><a href="#composer-dump-autoload" class="headerlink" title="composer dump-autoload"></a>composer dump-autoload</h3><h3 id="composer-license-—format-json"><a href="#composer-license-—format-json" class="headerlink" title="composer license —format=json"></a>composer license —format=json</h3><h3 id="composer-run-script"><a href="#composer-run-script" class="headerlink" title="composer run-script"></a>composer run-script</h3><h3 id="composer-diagnose"><a href="#composer-diagnose" class="headerlink" title="composer diagnose"></a>composer diagnose</h3><h3 id="composer-archive"><a href="#composer-archive" class="headerlink" title="composer archive"></a>composer archive</h3><ul>
<li>对指定包的指定版本进行 zip/tar 归档。它也可以用来归档你的整个项目，不包括 excluded/ignored（排除/忽略）的文件。</li>
<li>php composer.phar archive [—format=zip] [—dir=/foo] [package [version]]</li>
</ul>
<h3 id="composer-help-install"><a href="#composer-help-install" class="headerlink" title="composer help install"></a>composer help install</h3><h3 id="composer-browse-home"><a href="#composer-browse-home" class="headerlink" title="composer browse(home)"></a>composer browse(home)</h3><ul>
<li>打开或者浏览包的安装地址</li>
</ul>
<h3 id="composer-check-platform-reqs"><a href="#composer-check-platform-reqs" class="headerlink" title="composer check-platform-reqs"></a>composer check-platform-reqs</h3><ul>
<li>检测 PHP 版本和扩展是否支持安装包</li>
</ul>
<h3 id="composer-clear-cache-clearcache"><a href="#composer-clear-cache-clearcache" class="headerlink" title="composer clear-cache(clearcache)"></a>composer clear-cache(clearcache)</h3><ul>
<li>清除 install 安装的缓存</li>
</ul>
<h3 id="composer-exec"><a href="#composer-exec" class="headerlink" title="composer exec"></a>composer exec</h3><ul>
<li>运行脚本</li>
</ul>
<h3 id="composer-info-package"><a href="#composer-info-package" class="headerlink" title="composer info package"></a>composer info package</h3><ul>
<li>显示包的详细信息</li>
</ul>
<h3 id="composer-outdated"><a href="#composer-outdated" class="headerlink" title="composer outdated"></a>composer outdated</h3><ul>
<li>等价与  composer show -lo</li>
<li>列出可以安装最新版本的packages，包括最新的版本</li>
</ul>
<h3 id="composer-remove"><a href="#composer-remove" class="headerlink" title="composer remove"></a>composer remove</h3><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="COMPOSER"><a href="#COMPOSER" class="headerlink" title="COMPOSER"></a>COMPOSER</h4><ul>
<li>环境变量 COMPOSER 可以为 composer.json 文件指定其它的文件名。</li>
</ul>
<h4 id="COMPOSER-ROOT-VERSION"><a href="#COMPOSER-ROOT-VERSION" class="headerlink" title="COMPOSER_ROOT_VERSION"></a>COMPOSER_ROOT_VERSION</h4><ul>
<li>可以指定 root 包的版本，如果程序不能从 VCS 上猜测出版本号，并且未在 composer.json 文件中申明。</li>
</ul>
<h4 id="COMPOSER-VENDOR-DIR"><a href="#COMPOSER-VENDOR-DIR" class="headerlink" title="COMPOSER_VENDOR_DIR"></a>COMPOSER_VENDOR_DIR</h4><ul>
<li>你可以指定 composer 将依赖安装在 vendor 以外的其它目录中。</li>
</ul>
<h4 id="COMPOSER-BIN-DIR"><a href="#COMPOSER-BIN-DIR" class="headerlink" title="COMPOSER_BIN_DIR"></a>COMPOSER_BIN_DIR</h4><ul>
<li>可以指定 bin（Vendor Binaries）目录到 vendor/bin 以外的其它目录。</li>
</ul>
<h4 id="http-proxy-or-HTTP-PROXY"><a href="#http-proxy-or-HTTP-PROXY" class="headerlink" title="http_proxy or HTTP_PROXY"></a>http_proxy or HTTP_PROXY</h4><h4 id="no-proxy"><a href="#no-proxy" class="headerlink" title="no_proxy"></a>no_proxy</h4><h4 id="HTTP-PROXY-REQUEST-FULLURI"><a href="#HTTP-PROXY-REQUEST-FULLURI" class="headerlink" title="HTTP_PROXY_REQUEST_FULLURI"></a>HTTP_PROXY_REQUEST_FULLURI</h4><h4 id="HTTPS-PROXY-REQUEST-FULLURI"><a href="#HTTPS-PROXY-REQUEST-FULLURI" class="headerlink" title="HTTPS_PROXY_REQUEST_FULLURI"></a>HTTPS_PROXY_REQUEST_FULLURI</h4><h4 id="COMPOSER-HOME"><a href="#COMPOSER-HOME" class="headerlink" title="COMPOSER_HOME"></a>COMPOSER_HOME</h4><h4 id="COMPOSER-CACHE-DIR"><a href="#COMPOSER-CACHE-DIR" class="headerlink" title="COMPOSER_CACHE_DIR"></a>COMPOSER_CACHE_DIR</h4><h4 id="COMPOSER-PROCESS-TIMEOUT"><a href="#COMPOSER-PROCESS-TIMEOUT" class="headerlink" title="COMPOSER_PROCESS_TIMEOUT"></a>COMPOSER_PROCESS_TIMEOUT</h4><ul>
<li>Composer 执行命令的等待时间（例如：git 命令）。默认值为300秒（5分钟）。</li>
</ul>
<h4 id="COMPOSER-DISCARD-CHANGES"><a href="#COMPOSER-DISCARD-CHANGES" class="headerlink" title="COMPOSER_DISCARD_CHANGES"></a>COMPOSER_DISCARD_CHANGES</h4><h4 id="COMPOSER-NO-INTERACTION"><a href="#COMPOSER-NO-INTERACTION" class="headerlink" title="COMPOSER_NO_INTERACTION"></a>COMPOSER_NO_INTERACTION</h4><ul>
<li>如果设置为1，这个环境变量将使 Composer 在执行每一个命令时都放弃交互，<br>相当于对所有命令都使用了 —no-interaction。 可以在搭建 虚拟机/持续集成服务器 时这样设置。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/article/data-struct-stack/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>栈是一种有次序的数据项的集合，在栈中，数据项的加入和移除都仅发生在同一端，这一端叫栈顶top，另一端叫栈底base</li>
<li>距离栈底越近的数据项留在栈中的时间就越长，而最新加入栈的数据项会被最先移除，这种次序通常叫做后进先出LIFO(Last In First Out)</li>
<li>栈是一种线性结构，相比较数组，栈对应的操作是数组的子集</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>栈定义以下的操作：</p>
<ul>
<li>Stack()：创建一个空栈，不包含任何数据项</li>
<li>push(item)：将item加入栈顶，无返回值</li>
<li>pop()：将栈顶数据项移除，并返回</li>
<li>peek()：返回栈顶的数据项但不移除，栈不会被修改</li>
<li>isEmpty()：返回栈是否为空</li>
<li>size()：返回栈中有多少个数据项</li>
</ul>
<p>ArrayClass.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">stack</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ArrayClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> stack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">array</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ArrayClass constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = [];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSize</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向所有元素后添加一个新元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addLastElement</span>(<span class="params"><span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addElement(<span class="keyword">$this</span>-&gt;size, <span class="variable">$element</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在所有元素前添加一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFirstElement</span>(<span class="params"><span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addElement(<span class="number">0</span>, <span class="variable">$element</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置插入一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed|object $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addElement</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$index</span>, <span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> &lt; <span class="number">0</span> || <span class="variable">$index</span> &gt; <span class="keyword">$this</span>-&gt;size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;添加失败，索引位置错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="keyword">$this</span>-&gt;size - <span class="number">1</span>; <span class="variable">$i</span> &gt;= <span class="variable">$index</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span> + <span class="number">1</span>] = <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="variable">$index</span>] = <span class="variable">$element</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirstElement</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getIndexElement(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数组最后一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLastElement</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getIndexElement(<span class="keyword">$this</span>-&gt;size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取索引位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIndexElement</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$index</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> &lt; <span class="number">0</span> || <span class="variable">$index</span> &gt; <span class="keyword">$this</span>-&gt;size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;索引位置错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$index</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新索引位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setIndexElement</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$index</span>, <span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> &lt; <span class="number">0</span> || <span class="variable">$index</span> &gt; <span class="keyword">$this</span>-&gt;size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;索引位置错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="variable">$index</span>] = <span class="variable">$element</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组中是否包含元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">containsElement</span>(<span class="params"><span class="variable">$element</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="keyword">$this</span>-&gt;size; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>] == <span class="variable">$element</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找元素在数组中的位置，查找失败则返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findElement</span>(<span class="params"><span class="variable">$element</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="keyword">$this</span>-&gt;size; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>] == <span class="variable">$element</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数组中删除第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFirstElement</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;removeIndexElement(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数组中删除最后一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeLastElement</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;removeIndexElement(<span class="keyword">$this</span>-&gt;size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数组中删除元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params"><span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$elementIndex</span> = <span class="keyword">$this</span>-&gt;findElement(<span class="variable">$element</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$elementIndex</span> != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;removeIndexElement(<span class="variable">$elementIndex</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定位置上的元素并返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeIndexElement</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$index</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> &lt; <span class="number">0</span> || <span class="variable">$index</span> &gt; <span class="keyword">$this</span>-&gt;size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;索引位置错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$element</span> = <span class="keyword">$this</span>-&gt;data[<span class="variable">$index</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$index</span> + <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="keyword">$this</span>-&gt;size; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span> - <span class="number">1</span>] = <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$element</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * echo $obj 时触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = sprintf(<span class="string">&quot;Array:size=%d&quot;</span>, <span class="keyword">$this</span>-&gt;size);</span><br><span class="line">        <span class="variable">$result</span> .= <span class="string">&quot;,data is [&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="keyword">$this</span>-&gt;size; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="keyword">$this</span>-&gt;data[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> != <span class="keyword">$this</span>-&gt;size - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span> .= <span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span> .= <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Stack.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">stack</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface Stack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> stack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params"><span class="variable">$element</span></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">peek</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSize</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayStack.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">stack</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;ArrayClass.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;Stack.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里实现栈基于上一次实现的数组类，并且将栈顶设置为数组的末尾，栈底是数组的开始</span></span><br><span class="line"><span class="comment"> * 栈只能从一端插入和读取,这里设定从数组的末尾开始</span></span><br><span class="line"><span class="comment"> * Class ArrayStack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> stack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span> <span class="keyword">implements</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> ArrayClass</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ArrayClass <span class="variable">$arrayClass</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arrayClass = <span class="keyword">new</span> ArrayClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往栈添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params"><span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arrayClass-&gt;addLastElement(<span class="variable">$element</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出栈中的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;arrayClass-&gt;removeLastElement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取栈顶的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">peek</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;arrayClass-&gt;getLastElement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断栈内是否是空栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;arrayClass-&gt;isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取栈的大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSize</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;arrayClass-&gt;getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$size</span> = <span class="keyword">$this</span>-&gt;arrayClass-&gt;getSize();</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&quot;stack data: [&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="keyword">$this</span>-&gt;arrayClass-&gt;getSize(); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="keyword">$this</span>-&gt;arrayClass-&gt;getIndexElement(<span class="variable">$i</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> != <span class="variable">$size</span> - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$result</span> .= <span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span> .= <span class="string">&#x27;]top&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用一下的代码来测试一下我们实现的栈是否ok：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;ArrayStack.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stack</span> = <span class="keyword">new</span> \stack\ArrayStack();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$stack</span>-&gt;push(rand(<span class="number">0</span>, pow(<span class="variable">$i</span> + <span class="number">1</span>, <span class="number">2</span>)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;add element to stack err: &quot;</span> . <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stack</span> . PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;栈顶元素:&quot;</span> . <span class="variable">$stack</span>-&gt;peek() . PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stack</span>-&gt;pop() . PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stack</span>-&gt;pop() . PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stack</span> . PHP_EOL;</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<blockquote>
<p>stack data: [0, 4, 3, 5, 15, 19, 45, 2, 18, 15]top<br>栈顶元素:15<br>15<br>18<br>stack data: [0, 4, 3, 5, 15, 19, 45, 2]top</p>
</blockquote>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul>
<li>push, 均摊时间复杂度是$O(1)$</li>
<li>pop,均摊时间复杂度是$O(1)$</li>
<li>peek,时间复杂度是$O(1)$</li>
<li>getSize,时间复杂度是$O(1)$</li>
<li>isEmpty,时间复杂度是$O(1)$</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>undo操作，编辑器中的Ctrl+Z</li>
<li>系统调用栈，操作系统</li>
<li>括号匹配-编译器</li>
</ul>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validStr</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$str</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$leftSymbolStr</span> = [<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>];</span><br><span class="line">    <span class="variable">$rightSymbolStr</span> = [<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$stack</span> = <span class="keyword">new</span> \stack\ArrayStack();</span><br><span class="line">    <span class="variable">$flag</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$str</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (in_array(<span class="variable">$str</span>[<span class="variable">$i</span>], <span class="variable">$leftSymbolStr</span>)) &#123;</span><br><span class="line">           <span class="variable">$stack</span>-&gt;push(<span class="variable">$str</span>[<span class="variable">$i</span>]);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (in_array(<span class="variable">$str</span>[<span class="variable">$i</span>], <span class="variable">$rightSymbolStr</span>)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$stack</span>-&gt;isEmpty()) &#123;</span><br><span class="line">               <span class="comment">// 说明已经把左边的括号匹配完了，右括号多了</span></span><br><span class="line">               <span class="variable">$flag</span> = <span class="literal">false</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="variable">$leftElement</span> = <span class="variable">$stack</span>-&gt;pop();</span><br><span class="line">               <span class="keyword">if</span> (!checkStrMatch(<span class="variable">$leftElement</span>, <span class="variable">$str</span>[<span class="variable">$i</span>])) &#123;</span><br><span class="line">                   <span class="variable">$flag</span> = <span class="literal">false</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$flag</span> &amp;&amp; <span class="variable">$stack</span>-&gt;isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$str&#125;</span> 匹配&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$str&#125;</span> 不匹配&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用数组下标判断是否相等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $leftStr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $rightStr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStrMatch</span>(<span class="params"><span class="variable">$leftStr</span>, <span class="variable">$rightStr</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$leftSymbolStr</span> = [<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>];</span><br><span class="line">    <span class="variable">$rightSymbolStr</span> = [<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$leftSymbolStr</span>[<span class="variable">$leftStr</span>] == <span class="variable">$rightSymbolStr</span>[<span class="variable">$rightStr</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;()[]&#123;&#125;&#x27;</span>;</span><br><span class="line">validStr(<span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$testStr2</span> = <span class="string">&quot;(3*5)+(4+6)-(7-8)/)&quot;</span>;</span><br><span class="line">validStr(<span class="variable">$testStr2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$testStr3</span> = <span class="string">&quot;(3*5)+(4+6)-(7-8)&quot;</span>;</span><br><span class="line">validStr(<span class="variable">$testStr3</span>);</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<blockquote>
<p>()[]{} 匹配<br>(3*5)+(4+6)-(7-8)/) 不匹配<br>(3*5)+(4+6)-(7-8) 匹配</p>
</blockquote>
<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>十进制数字转换成二进制，八进制，十六进制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  进制转换， 十进制转换成其他进制比如 二，八，十六进制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">stack</span>\<span class="title">ArrayStack</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;ArrayStack.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stack</span> = <span class="keyword">new</span> ArrayStack();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将给定的数字转换成特定的进制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $system</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ArrayStack $stack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExchangeNumber</span>(<span class="params"><span class="variable">$system</span>, <span class="variable">$number</span>, ArrayStack <span class="variable">$stack</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$system</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            <span class="variable">$result</span> = getBinaryNumberSystem(<span class="variable">$number</span>, <span class="variable">$stack</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;8&quot;</span>:</span><br><span class="line">            <span class="variable">$result</span> = getOctalNumberSystem(<span class="variable">$number</span>, <span class="variable">$stack</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;16&quot;</span>:</span><br><span class="line">            <span class="variable">$result</span> = getHexadecimalNumber(<span class="variable">$number</span>, <span class="variable">$stack</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ArrayStack $stack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBinaryNumberSystem</span>(<span class="params"><span class="variable">$number</span>, ArrayStack <span class="variable">$stack</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$number</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$number</span> % <span class="number">2</span> ;</span><br><span class="line">        <span class="variable">$stack</span>-&gt;push(<span class="variable">$temp</span>);</span><br><span class="line">        <span class="variable">$number</span> = (<span class="keyword">int</span>)<span class="variable">$number</span> / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable">$stack</span>-&gt;isEmpty()) &#123;</span><br><span class="line">        <span class="variable">$result</span> .= <span class="variable">$stack</span>-&gt;pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ArrayStack $stack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOctalNumberSystem</span>(<span class="params"><span class="variable">$number</span>, ArrayStack <span class="variable">$stack</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$number</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$number</span> % <span class="number">8</span> ;</span><br><span class="line">        <span class="variable">$stack</span>-&gt;push(<span class="variable">$temp</span>);</span><br><span class="line">        <span class="variable">$number</span> = (<span class="keyword">int</span>)<span class="variable">$number</span> / <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable">$stack</span>-&gt;isEmpty()) &#123;</span><br><span class="line">        <span class="variable">$result</span> .= <span class="variable">$stack</span>-&gt;pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ArrayStack $stack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHexadecimalNumber</span>(<span class="params"><span class="variable">$number</span>, ArrayStack <span class="variable">$stack</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$number</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$number</span> % <span class="number">16</span> ;</span><br><span class="line">        <span class="variable">$stack</span>-&gt;push(<span class="variable">$temp</span>);</span><br><span class="line">        <span class="variable">$number</span> = (<span class="keyword">int</span>)<span class="variable">$number</span> / <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable">$stack</span>-&gt;isEmpty()) &#123;</span><br><span class="line">        <span class="variable">$result</span> .= <span class="variable">$stack</span>-&gt;pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $base</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ArrayStack $stack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBaseConvertNumber</span>(<span class="params"><span class="variable">$number</span>, <span class="variable">$base</span>, ArrayStack <span class="variable">$stack</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$digits</span> = [<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$number</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$mode</span> = <span class="variable">$number</span> % <span class="variable">$base</span>;</span><br><span class="line">        <span class="variable">$stack</span>-&gt;push(<span class="variable">$mode</span>);</span><br><span class="line">        <span class="variable">$number</span> = (<span class="keyword">int</span>)(<span class="variable">$number</span> / <span class="variable">$base</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable">$stack</span>-&gt;isEmpty()) &#123;</span><br><span class="line">        <span class="variable">$result</span> .= <span class="variable">$digits</span>[<span class="variable">$stack</span>-&gt;pop()];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$number</span> = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;十进制8转换二进制数是:&quot;</span> . getExchangeNumber(<span class="string">&quot;2&quot;</span>, <span class="variable">$number</span>, <span class="variable">$stack</span>) . PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;十进制8转换八进制数是:&quot;</span> . getExchangeNumber(<span class="string">&quot;8&quot;</span>, <span class="variable">$number</span>, <span class="variable">$stack</span>) . PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;十进制8转换十六进制数是:&quot;</span> . getExchangeNumber(<span class="string">&quot;16&quot;</span>, <span class="variable">$number</span>, <span class="variable">$stack</span>) . PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;十进制128转换二进制数是:&quot;</span> . getBaseConvertNumber(<span class="variable">$number</span>, <span class="number">2</span>, <span class="variable">$stack</span>) . PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;十进制128转换八进制数是:&quot;</span> . getBaseConvertNumber(<span class="variable">$number</span>, <span class="number">8</span>, <span class="variable">$stack</span>) . PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;十进制128转换十六进制数是:&quot;</span> . getBaseConvertNumber(<span class="variable">$number</span>, <span class="number">16</span>, <span class="variable">$stack</span>) . PHP_EOL;</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;err:&quot;</span> . <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表达式转换"><a href="#表达式转换" class="headerlink" title="表达式转换"></a>表达式转换</h3><p>中缀转后缀</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">stack</span>\<span class="title">ArrayStack</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;ArrayStack.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stack</span> = <span class="keyword">new</span> ArrayStack();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表达式转换，将中缀表达式（a*b+2）转换成后缀表达式(ab*2+)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $expr 需要转换的中缀表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ArrayStack $exprStack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeExpr</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$expr</span>, ArrayStack <span class="variable">$exprStack</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 运算符优先级</span></span><br><span class="line">    <span class="variable">$exprLevel</span> = [<span class="string">&quot;*&quot;</span> =&gt; <span class="number">3</span>, <span class="string">&quot;/&quot;</span> =&gt; <span class="number">3</span>, <span class="string">&quot;+&quot;</span> =&gt; <span class="number">2</span>, <span class="string">&quot;-&quot;</span> =&gt; <span class="number">2</span>, <span class="string">&quot;)&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;(&quot;</span> =&gt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$formatExpr</span> = str_split(<span class="variable">$expr</span>);</span><br><span class="line">    <span class="comment">// 存储操作数</span></span><br><span class="line">    <span class="variable">$numberList</span> = [];</span><br><span class="line">    <span class="comment">// 存储操作符</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$formatExpr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/\d/&quot;</span>, <span class="variable">$item</span>)  || preg_match(<span class="string">&quot;/\w/&quot;</span>, <span class="variable">$item</span>)) &#123;</span><br><span class="line">            <span class="variable">$numberList</span>[] = <span class="variable">$item</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$item</span> == <span class="string">&quot;(&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$exprStack</span>-&gt;push(<span class="variable">$item</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$item</span> == <span class="string">&quot;)&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$topItem</span> = <span class="variable">$exprStack</span>-&gt;pop();</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$topItem</span> != <span class="string">&quot;(&quot;</span>) &#123;</span><br><span class="line">                <span class="variable">$numberList</span>[] = <span class="variable">$topItem</span>;</span><br><span class="line">                <span class="variable">$topItem</span> = <span class="variable">$exprStack</span>-&gt;pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 比较栈顶的运算符与当前的运算符的优先级</span></span><br><span class="line">            <span class="keyword">while</span> (!<span class="variable">$exprStack</span>-&gt;isEmpty() &amp;&amp; <span class="variable">$exprLevel</span>[<span class="variable">$exprStack</span>-&gt;peek()] &gt;= <span class="variable">$exprLevel</span>[<span class="variable">$item</span>]) &#123;</span><br><span class="line">                <span class="variable">$numberList</span>[] = <span class="variable">$exprStack</span>-&gt;pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$exprStack</span>-&gt;push(<span class="variable">$item</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable">$exprStack</span>-&gt;isEmpty()) &#123;</span><br><span class="line">        <span class="variable">$numberList</span>[] = <span class="variable">$exprStack</span>-&gt;pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> join(<span class="string">&quot;&quot;</span>, <span class="variable">$numberList</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$expr</span> = <span class="string">&quot;(a+b)/(c+d)&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$expr</span> .PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> changeExpr(<span class="variable">$expr</span>, <span class="variable">$stack</span>);</span><br></pre></td></tr></table></figure>
<p>计算后缀表达式的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">stack</span>\<span class="title">ArrayStack</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;ArrayStack.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stack</span> = <span class="keyword">new</span> ArrayStack();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算后缀表达式值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $expr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ArrayStack $exprStack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExprResult</span>(<span class="params"><span class="variable">$expr</span>, ArrayStack <span class="variable">$exprStack</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$exprFormat</span> = str_split(<span class="variable">$expr</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$exprFormat</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/\d/&quot;</span>, <span class="variable">$item</span>)) &#123;</span><br><span class="line">            <span class="comment">// 操作数存放栈中，先取出来的是右操作数</span></span><br><span class="line">            <span class="variable">$exprStack</span>-&gt;push(<span class="variable">$item</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 取出第一个操作数，是右操作数</span></span><br><span class="line">            <span class="variable">$rightNumber</span> = <span class="variable">$exprStack</span>-&gt;pop();</span><br><span class="line">            <span class="comment">// 取出第二个操作数，是左操作数</span></span><br><span class="line">            <span class="variable">$leftNumber</span> = <span class="variable">$exprStack</span>-&gt;pop();</span><br><span class="line">            <span class="variable">$result</span> = doMath((<span class="keyword">int</span>)<span class="variable">$leftNumber</span>, (<span class="keyword">int</span>)<span class="variable">$rightNumber</span>, <span class="variable">$item</span>);</span><br><span class="line">            <span class="variable">$exprStack</span>-&gt;push(<span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$exprStack</span>-&gt;pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $left</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $right</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $operation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doMath</span>(<span class="params"><span class="variable">$left</span>, <span class="variable">$right</span>, <span class="variable">$operation</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$operation</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$left</span> + <span class="variable">$right</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$left</span> - <span class="variable">$right</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$left</span> * <span class="variable">$right</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$left</span> / <span class="variable">$right</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后缀表达式求值</span></span><br><span class="line"><span class="variable">$expr</span> = <span class="string">&quot;145*+9+&quot;</span>;</span><br><span class="line">var_dump(getExprResult(<span class="variable">$expr</span>, <span class="variable">$stack</span>));</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS</title>
    <url>/article/https/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>HTTPS是超文本传输安全协议(Hypertext Transfer Protocol Secure),也称HTTP over TLS,HTTP over SSL或HTTP Secure，是通过计算机<br>网络进行安全通信的传输协议。</li>
<li>HTTPS的默认端口是443，提供网站服务器的安全认证，保护交换数据的隐私和安全性。</li>
<li>HTTPS在OSI模型中处于应用层协议，也隶属于TCP/IP协议族，它是HTTP协议的安全版本。</li>
</ol>
<h3 id="与HTTP相同点"><a href="#与HTTP相同点" class="headerlink" title="与HTTP相同点"></a>与HTTP相同点</h3><ul>
<li>同属于TCP/IP协议族的应用层协议，具有TCP协议面向连接，可靠传输，流量控制等特点</li>
<li>协议是无状态的，需要通过COOKIE或SESSION等会话机制来保存状态</li>
<li>请求与响应格式相同，请求行+请求头+空行+请求数据 &amp; 响应行+响应头+空行+响应数据</li>
<li>广泛用于互联网上数据传输，支持B/S,C/S架构的应用</li>
</ul>
<h3 id="与HTTP不同点"><a href="#与HTTP不同点" class="headerlink" title="与HTTP不同点"></a>与HTTP不同点</h3><ul>
<li>协议头和端口号不一致，HTTP是<a href="http://:[80],而HTTPS是https://:[443">http://:[80],而HTTPS是https://:[443</a>]</li>
<li>HTTPS协议需要使用安全证书，安全证书由证书颁发结构(Certificate Authority,简称CA)签发</li>
<li>协议栈不同，HTTPS多了安全传输层</li>
<li>资源消耗上，HTTP协议是要少于HTTPS协议的</li>
<li>内容传输方式不同，HTTPS是加密传输而HTTP是明文传输</li>
<li>应用的场景不同，HTTPS适用于普通+特殊(安全，私密等)应用场景，而HTTP只适用于普通应用场景</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>身份认证，第三方无法伪造服务端/客户端身份</li>
<li>实用性强，提供安全，隐私的信息传输，应用场景丰富</li>
</ul>
<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul>
<li>成本高，增加证书购置成本，提高应用配置部署成本</li>
<li>性能损耗，增加延时，消耗更多的系统资源</li>
</ul>
<h2 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h2><p>严格地讲，HTTPS并不是一个单独的协议而是对工作在一加密连接(SSL或TLS)之上的常规HTTP协议的称呼</p>
<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><blockquote>
<p>HTTP/0.9</p>
</blockquote>
<ul>
<li>1991年发布</li>
<li>主要规定了通信格式，不涉及数据包传输</li>
<li>客户端只有GET请求方法</li>
<li>服务端只能返回HTML格式的字符串内容</li>
</ul>
<blockquote>
<p>HTTP/1.0</p>
</blockquote>
<ul>
<li>1996年发布</li>
<li>引入了POST和HEAD请求方法</li>
<li>添加请求与响应中的头信息(HTTP header)</li>
<li>其他新增的功能还包括状态码，多字符集支持，多部分发送，权限，缓存，内容编码等</li>
</ul>
<blockquote>
<p>HTTP/1.1</p>
</blockquote>
<ul>
<li>1997年发布</li>
<li>增加Host请求头字段，支持虚拟机主机</li>
<li>引入了PUT,PATCH,OPTIONS和DELETE请求方法</li>
<li>其他新增的功能还包括持久连接，管道机制和分块传输等</li>
</ul>
<blockquote>
<p>HTTP/2.0</p>
</blockquote>
<ul>
<li>2015年发布</li>
<li>完全的二进制协议</li>
<li>引入了多工，头信息压缩，服务器推送等新功能</li>
</ul>
<h3 id="安全传输协议"><a href="#安全传输协议" class="headerlink" title="安全传输协议"></a>安全传输协议</h3><h4 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h4><blockquote>
<p>SSL 1.0</p>
</blockquote>
<ul>
<li>1994年由Netscape公司设计</li>
<li>最早应用于Navigator浏览器</li>
<li>由于存在严重的安全漏洞，从未正式发布</li>
</ul>
<blockquote>
<p>SSL 2.0</p>
</blockquote>
<ul>
<li>1995年由Netscape公司设计并发布</li>
<li>存在数个安全漏洞，容易遭受中间人攻击</li>
<li>大部分浏览器均不再支持</li>
</ul>
<blockquote>
<p>SSL 3.0</p>
</blockquote>
<ul>
<li>1996年由Netscape公司完全重新设计并发布</li>
<li>相较前一版本安全性大大提高</li>
<li>2014年Google发现其设计缺陷，随后主流浏览器逐渐放弃支持使用SSL3.0协议</li>
</ul>
<h4 id="TSL"><a href="#TSL" class="headerlink" title="TSL"></a>TSL</h4><blockquote>
<p>TSL 1.0</p>
</blockquote>
<ul>
<li>1999年IETF将SSL标准化(RFC 2246),在SSL 3.0的基础上设计并发布了TLS 1.0</li>
<li>从技术上讲，TLS 1.0和SSL 3.0的差异非常小</li>
<li>TLS 1.0可以降级到3.0，因此削弱了其安全性</li>
</ul>
<blockquote>
<p>TSL 1.1</p>
</blockquote>
<ul>
<li>IETF于2006年发布TLS 1.1(RFC 4346)</li>
<li>是TLS 1.0的更新版本</li>
<li>提高了安全性，添加对CBC攻击的保护</li>
<li>支持IANA登记的参数</li>
</ul>
<blockquote>
<p>TSL 1.2</p>
</blockquote>
<ul>
<li>IETF于2008年发布TLS 1.2(RFC 5246)</li>
<li>基于 TLS 1.1规范设计</li>
<li>使用了更加高效和安全的加密算法</li>
</ul>
<blockquote>
<p>更多</p>
</blockquote>
<ul>
<li>TLS所有版本在2011年3月发布的RFC 6176中删除了对SSL的兼容</li>
<li>TLS 1.3于2018年3月份成为建议标准的互联网草案</li>
</ul>
<h2 id="传输层安全协议"><a href="#传输层安全协议" class="headerlink" title="传输层安全协议"></a>传输层安全协议</h2><ol>
<li>位于可靠的面向连接的运输层协议(TCP)和应用层协议(HTTP)之间</li>
<li>通过互相认证确保不可冒充性，通过数字签名确保信息完整性、通过加密确保私密性，以实现客户端和服务器之间的安全通讯</li>
<li>独立于应用协议，高层协议可以透明地分布在传输层安全协议之上</li>
</ol>
<h3 id="SSL-Secure-Socket-Layer-安全套接层"><a href="#SSL-Secure-Socket-Layer-安全套接层" class="headerlink" title="SSL(Secure Socket Layer) 安全套接层"></a>SSL(Secure Socket Layer) 安全套接层</h3><ul>
<li><p>SSL 记录协议(SSL Record Protocol)，建立在可靠的传输协议之上，为高层协议提供数据封装，加/解密，(解)压缩、签名以及完整性校验等基本功能的支持</p>
</li>
<li><p>SSL 握手协议(SSL Handshake Protocol)，建立在SSL记录协议之上，用于在实际的数据传输开始之前，通讯双方进行身份认证，协商加密算法，交换加密密钥等</p>
</li>
</ul>
<p><img src="https://img.imgdb.cn/item/606d72928322e6675cdeab10.jpg" alt=""></p>
<h3 id="TLS-Transport-Layer-Security-传输层安全协议"><a href="#TLS-Transport-Layer-Security-传输层安全协议" class="headerlink" title="TLS(Transport Layer Security) 传输层安全协议"></a>TLS(Transport Layer Security) 传输层安全协议</h3><ul>
<li><p>TLS 记录协议(TLS Record Protocol)，建立在可靠的传输协议之上，对数据进行加/解密，(解)压缩签名，封装以及完整性校验等操作</p>
</li>
<li><p>TLS 握手协议(TLS Handshake Protocol),建立在TLS记录协议之上，使用公共秘钥和证书处理用户认证，并协商算法和加密实际数据传输的密钥</p>
</li>
</ul>
<p><img src="https://img.imgdb.cn/item/606d72bb8322e6675cded1fe.jpg" alt=""></p>
<h3 id="SSL与TLS比较"><a href="#SSL与TLS比较" class="headerlink" title="SSL与TLS比较"></a>SSL与TLS比较</h3><ul>
<li>TSL协议是基于SSL协议发展而来，从技术上讲，TLS 1.0和SSL 3.0的差异非常小</li>
<li>TLS协议使用了更安全的HMAC算法，更强大的伪随机功能，更严密的警报信息</li>
<li>TLS协议比SSL协议更加复杂和安全，协议的规范更精确和完善</li>
</ul>
<h2 id="安全传输通道"><a href="#安全传输通道" class="headerlink" title="安全传输通道"></a>安全传输通道</h2><h3 id="TLS和SSL安全传输通道"><a href="#TLS和SSL安全传输通道" class="headerlink" title="TLS和SSL安全传输通道"></a>TLS和SSL安全传输通道</h3><ul>
<li>认证用户和服务器，确保数据发送到正确的客户机和服务器</li>
<li>加密数据，以防止数据中途被窃取</li>
<li>维护数据的完整性，确保数据在传输过程中不被篡改</li>
</ul>
<h3 id="HTTPS安全传输通道"><a href="#HTTPS安全传输通道" class="headerlink" title="HTTPS安全传输通道"></a>HTTPS安全传输通道</h3><ul>
<li>HTTPS在通信双方建立了一个安全传输通道</li>
<li>安全传输通道保证了信息传输的安全性和完整性</li>
</ul>
<ol>
<li>HTTPS会将传输内容利用对称加密的方式加密，可以就可以防止窃听者在信息传输过程中获取到我们的信息</li>
<li>HTTPS会将传输的内容使用MAC算法对数据进行签名和验证，服务器会将自身计算的签名与客户端发送的签名进行校验，从而可以判断消息是否完整的， 防止篡改者在信息传输途中篡改信息内容</li>
<li>HTTPS建立链接的时候利用数字证书进行通信双发身份的认证，客户端可以校验服务器端的数字证书，服务器端也可以主动要求校验客户端的数字证书，这样可以防止中间人获取到你的信息了，因为中间人是没有办法提供认证信息的(数字证书)</li>
</ol>
<h3 id="HTTPS保证信息安全传输的机制"><a href="#HTTPS保证信息安全传输的机制" class="headerlink" title="HTTPS保证信息安全传输的机制"></a>HTTPS保证信息安全传输的机制</h3><ul>
<li>利用数字证书对通信双方进行身份认证，要求客户端/服务器提供有效的数字证书等信息进行认证，可以防止通信双方被冒充</li>
<li>利用非对称加密方式传输会话密钥，保证了会话密钥的私密传输，从而保证了双方的通信安全</li>
<li>利用对称加密方式传输通信内容，只有通信双方才能利用会话密钥对通信内容进行加解密，第三方无法获取</li>
<li>利用MAC算法对传输内容进行签名和校验，未通过校验的数据包将被丢弃，保证了通信内容的正确性和完整性</li>
</ul>
<h2 id="四次握手"><a href="#四次握手" class="headerlink" title="四次握手"></a>四次握手</h2><p><img src="https://img.imgdb.cn/item/606e7b8c8322e6675ccd36fd.jpg" alt=""></p>
<h3 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h3><p>&emsp;&emsp;客户端发起连接请求 Client Hello</p>
<ul>
<li>支持的安全传输协议， SSLv2 SSLv3 TLSv1 TLSv1.1 TLS1.2</li>
<li>支持的加密套件，身份认证+密钥协商+信息加密+完整性校验</li>
<li>支持压缩算法，用于后续的信息压缩</li>
<li>随机数C，用于后续密钥的生成</li>
<li>扩展字段，协议或算法相关的辅助信息</li>
</ul>
<h3 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h3><ul>
<li>服务器返回协商的结果 Server Hello<ul>
<li>选择使用的安全传输协议、加密套件和压缩算法</li>
<li>随机数S，用于后续密钥的生成</li>
</ul>
</li>
<li>服务器配置的证书链 Certificate</li>
<li>服务器发送消息结束标志 Server Hello Done</li>
<li>根据选择加密套件的不同，可能还会有其他的内容</li>
</ul>
<p>&emsp;&emsp;客户端接收到服务器返回的消息后，会进行证书校验</p>
<ul>
<li>证书链是否可信，能够被可信任的CA根证书验证合法性</li>
<li>证书是否吊销</li>
<li>证书是否在有效期内</li>
<li>证书域名与网站域名是否匹配</li>
</ul>
<h3 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h3><ul>
<li>客户端生成第三个随机数 Pre-master，并用证书公钥加密发送给服务器 Client Key Exchange<ul>
<li>客户端将通过随机数C、随机数S和Pre-master计算出本次会话的密钥Key=func(C,S,Pre-master)</li>
</ul>
</li>
<li>客户端向服务器确认加密方式 Change Cipher Spec</li>
<li>客户端计算前面所有信息的摘要值并加密发送给服务器 Encrypted Handshake Message</li>
</ul>
<h3 id="第四次握手"><a href="#第四次握手" class="headerlink" title="第四次握手"></a>第四次握手</h3><ul>
<li>服务器先通过私钥解密 Client Key Exchange的内容，获取Pre-master的值并计算会话密钥Key=func(C,S,Pre-master)</li>
<li>服务器解密客户端发送的加密握手信息并校验</li>
<li>服务器向客户端确认加密方式 Change Cipher Spec</li>
<li>服务器计算当前所有消息的摘要值并加密发送给客户端 Encrypted Handshake Message</li>
</ul>
<h3 id="握手完成-信息传输"><a href="#握手完成-信息传输" class="headerlink" title="握手完成+信息传输"></a>握手完成+信息传输</h3><ul>
<li>客户端计算所有消息的摘要值并与服务器发送的加密握手信息做校验</li>
<li>校验通过则握手完成，无需向服务器发送任何消息</li>
<li>客户端可以与服务器按照约定的协议版本、加密算法、会话密钥等进行通信了</li>
</ul>
<h3 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h3><ul>
<li>除了客户端验证服务器身份之外，服务器也可以要求验证客户端的身份，即双向认证</li>
<li>在第二次握手时，服务器向客户端发送 Client Certificate Request信息，请求查看客户端证书</li>
<li>在第三次握手时，客户端会同时发送 Client Certificate和 Certificate Verify Message给服务器</li>
</ul>
<h3 id="四次握手中的加密算法"><a href="#四次握手中的加密算法" class="headerlink" title="四次握手中的加密算法"></a>四次握手中的加密算法</h3><ul>
<li>第三次握手中使用非对称加密算法加密Pre-master</li>
<li>第三次和第四次握手中使用MAC算法生成Encrypted Handshake Message</li>
<li>握手成功后使用对称加密算法加密通信数据</li>
</ul>
<h2 id="会话缓存"><a href="#会话缓存" class="headerlink" title="会话缓存"></a>会话缓存</h2><p>&emsp;&emsp;为了节省网络资源，提高HTTPS协议的工作效率，TLS协议中有两类会话缓存机制，分别是会话标识 Session ID和会话记录 Session Ticket</p>
<h3 id="Session-ID"><a href="#Session-ID" class="headerlink" title="Session ID"></a>Session ID</h3><ul>
<li>在服务器端保存每次会话的ID和协商的通信信息</li>
<li>基本所有服务器都支持</li>
<li>占用服务器资源多</li>
</ul>
<h3 id="Session-Ticket"><a href="#Session-Ticket" class="headerlink" title="Session Ticket"></a>Session Ticket</h3><ul>
<li>将协商的通信信息加密之后发送给客户端保存，解密的密钥由服务器保存</li>
<li>服务器的支持范围有限</li>
<li>占用服务器资源少</li>
</ul>
<h3 id="两者比较"><a href="#两者比较" class="headerlink" title="两者比较"></a>两者比较</h3><ul>
<li>Session ID和Session Ticket类似于Session和Cookie</li>
<li>两者都支持的情况下，应优先选择Session Ticket</li>
<li>在TLS协议会话缓存中两者的作用是一样的</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p><img src="https://img.imgdb.cn/item/606eb28c8322e6675c01b62b.jpg" alt=""></p>
<ul>
<li>简化了握手过程，提高了建立握手的速度</li>
<li>减少了握手的信息传输，节省了带宽和流量</li>
<li>减少了计算量，节省了客户端和服务器的资源</li>
</ul>
<h2 id="SLL证书"><a href="#SLL证书" class="headerlink" title="SLL证书"></a>SLL证书</h2><ol>
<li>SSL证书的主要作用：身份认证和数据加密</li>
<li>向客户端证明服务器的真实身份，此真实身份是通过第三方权威机构(CA)验证的</li>
<li>确保客户端和服务器之间的通信内容是高强度加密传输的，是不可能被非法篡改和窃取的</li>
</ol>
<h3 id="证书分类"><a href="#证书分类" class="headerlink" title="证书分类"></a>证书分类</h3><p>第一种分类：</p>
<ul>
<li>域名验证型(DV)SSL证书(Domain Validation SSL)</li>
<li>组织验证型(OV)SSL证书(Organization Validation SSL)</li>
<li>扩展验证型(EV)SSL证书(Extended Validation SSL)</li>
</ul>
<p>第二种分类：</p>
<ul>
<li>单域型证书，仅支持单个域名，例如 www.jixiaoxiao.com</li>
<li>多域型证书，支持多个域名,例如 jixiaoxiao.com www.jixiaoxiao.com</li>
<li>通配型证书，支持带通配符的域名，例如 *.jixiaoxiao.com</li>
</ul>
<h3 id="域名验证型-DV-SSL证书"><a href="#域名验证型-DV-SSL证书" class="headerlink" title="域名验证型(DV)SSL证书"></a>域名验证型(DV)SSL证书</h3><ul>
<li>只验证网站域名所有权的简易型SSL证书</li>
<li>仅能加密通信内容，不能向用户证明网站的真实身份</li>
<li>适合无身份认证需求的网站使用</li>
</ul>
<h3 id="组织验证型-OV-SSL证书"><a href="#组织验证型-OV-SSL证书" class="headerlink" title="组织验证型(OV)SSL证书"></a>组织验证型(OV)SSL证书</h3><ul>
<li>需要验证域名所有权和所属单位的真实身份的标准型SSL证书</li>
<li>不仅能加密通信内容，还能向用户证明网站的真实身份</li>
<li>适合电子商务，企业等网站使用</li>
</ul>
<h3 id="扩展验证型-EV-SSL证书"><a href="#扩展验证型-EV-SSL证书" class="headerlink" title="扩展验证型(EV)SSL证书"></a>扩展验证型(EV)SSL证书</h3><ul>
<li>遵循全球统一的严格身份验证标准颁发的SSL证书，是目前业界最高安全级别的SSL证书</li>
<li>提供通信内容加密与网站身份证明，浏览器状态栏显示单位名称</li>
<li>适合金融证券、银行等网站使用</li>
</ul>
<h3 id="获取SSL证书"><a href="#获取SSL证书" class="headerlink" title="获取SSL证书"></a>获取SSL证书</h3><ol>
<li>从供应商处购买SSL证书。</li>
<li>从供应商处获取免费的SSL证书。</li>
<li>可以利用OpenSSL自行签发SSL证书。</li>
</ol>
<p>花钱的SSL证书供应商：</p>
<ul>
<li>国外：GoDaddy、Amazon Web Service</li>
<li>国内：阿里云、腾讯云</li>
</ul>
<p>免费的SSL证书供应商</p>
<ul>
<li>国外：CloudFlare、Let’s Encrypt</li>
<li>国内：阿里云、七牛云、腾讯云</li>
</ul>
<h2 id="自签发SSL证书"><a href="#自签发SSL证书" class="headerlink" title="自签发SSL证书"></a>自签发SSL证书</h2><p>大概的要点如下：</p>
<ul>
<li>生成key(服务器私钥)以及CSR(Certificate Sign Request)文件</li>
<li>生成key(CA私钥)以及CA证书(公钥)</li>
<li>用CA证书给CSR文件签名生成服务器证书(公钥)</li>
</ul>
<p>使用的工具：OpenSSL<br>OpenSSL是一个开源的软件库，实现了SSL和TLS协议，OpenSSL具有强大的加密库、密钥和证书封装管理功能</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl version</span></span><br></pre></td></tr></table></figure>
<font color='red'>
&emsp;&emsp;最终我们需要的是第一步生成的服务器私钥和最后一步生成的签名文件，我们如果使用自己签发的证书部署在网站浏览器会有一个警告说无法识别证书的有效性，这个自签的证书用来做测试就行了
</font>

<blockquote>
<p>第一步，生成服务器私钥<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl genrsa -des3 -out server.key 4096</span></span><br></pre></td></tr></table></figure><br>生成rsa私钥，使用des3算法，密码强度是4096位，输出目录是 server.key,这里需要提供一个至少4位的密码<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~/data/certificate$ openssl genrsa -des3 -out server.key 4096</span><br><span class="line">Generating RSA private key, 4096 bit long modulus (2 primes)</span><br><span class="line">..++++</span><br><span class="line">...........................................................................................................................................................++++</span><br><span class="line">e is 65537 (0x010001)</span><br><span class="line">Enter pass phrase for server.key: // 输入密码</span><br><span class="line">Verifying - Enter pass phrase for server.key: // 确认密码</span><br></pre></td></tr></table></figure></p>
<p>第二步，去除服务器私钥的密码(可选项)<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> oepnssl rsa -<span class="keyword">in</span> server.key -out server.key</span></span><br></pre></td></tr></table></figure><br>去除私钥的密码，如果不添加这一步，每一次服务器重启时都需要输入上一步的密码<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~/data/certificate$ openssl rsa -in server.key -out server.key </span><br><span class="line">Enter pass phrase for server.key: // 需要输入上一步的密码</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure></p>
<p>第三步，生成证书请求文件(CSR文件)<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl req -new -key server.key -out server.csr</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>这一步有两个选择，如果是资金充足的情况下，可以将csr发送给权威的CA机构，CA验证过请求者身份后会出具签名证书，第二个就是OpenSSL实现自签名 </li>
</ol>
</blockquote>
<ol>
<li>使用自签名命令如上，这里需要依次输入国家、城区、城市、组织、组织单位，CommonName和Email，其中CommonName建议写成<br>需要证书的域名或者自己的名字，如果用于https，CommonName需要与域名保持一致，否则会引起浏览器警告</li>
<li>如果将csr发送给了权威的CA的情况下可以直接使用第六步了，如果是自签名的话我们需要自己生成CA给csr文件进行签名，下面继续<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~/data/certificate$ openssl req -new -key server.key -out server.csr</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN</span><br><span class="line">State or Province Name (full name) [Some-State]:Beijing</span><br><span class="line">Locality Name (eg, city) []:Beijing</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:owner</span><br><span class="line">Organizational Unit Name (eg, section) []:owner.cn </span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:localhost</span><br><span class="line">Email Address []:simplexiaoxiao@gmail.com</span><br><span class="line"></span><br><span class="line">Please enter the following &#x27;extra&#x27; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []: // 选填</span><br><span class="line">An optional company name []: // 选填</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>第四步，生成CA私钥<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl genrsa -des3 -out ca.key 4096</span></span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~/data/certificate$ openssl genrsa -des3 -out ca.key 4096</span><br><span class="line">Generating RSA private key, 4096 bit long modulus (2 primes)</span><br><span class="line">.........................++++</span><br><span class="line">........................................................................++++</span><br><span class="line">e is 65537 (0x010001)</span><br><span class="line">Enter pass phrase for ca.key:</span><br><span class="line">Verifying - Enter pass phrase for ca.key:</span><br></pre></td></tr></table></figure><br>第五步，生成CA证书<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl req -new -x509 -key ca.key -out ca.crt -days 3652</span></span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~/data/certificate$ openssl req -new -x509 -key ca.key -out ca.crt -days 3652</span><br><span class="line">Enter pass phrase for ca.key: // 这个密码是创建ca证书时输入的密码</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN</span><br><span class="line">State or Province Name (full name) [Some-State]:BeiJing</span><br><span class="line">Locality Name (eg, city) []:BeiJing</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:owner</span><br><span class="line">Organizational Unit Name (eg, section) []:owner.cn</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:localhost</span><br><span class="line">Email Address []:simplexiaoxiao@gmail.com</span><br></pre></td></tr></table></figure><br>第六步，利用CA证书给CSR签名<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这种是使用自己创建的私有CA给证书签名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt</span></span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~/data/certificate$ openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt</span><br><span class="line">Signature ok</span><br><span class="line">subject=C = CN, ST = Beijing, L = Beijing, O = owner, OU = owner.cn, CN = localhost, emailAddress = simplexiaoxiao@gmail.com</span><br><span class="line">Getting CA Private Key</span><br><span class="line">Enter pass phrase for ca.key: // 这个密码是创建ca证书时输入的密码</span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们也可以不使用CA签发的证书，生成一个自签名证书，这种情况下浏览器会告诉你签名证书未知或不可信</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Apache部署HTTPS"><a href="#Apache部署HTTPS" class="headerlink" title="Apache部署HTTPS"></a>Apache部署HTTPS</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li>系统：Centos Linux release 8.3.2011</li>
<li>证书文件：自签名文件包括 server.key server.crt</li>
<li>安装Apache服务器，Apache需要安装mod_ssl模块</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl version</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dnf install https://rpms.remirepo.net/enterprise/remi-release-8.rpm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dnf search httpd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dnf install httpd -y</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl status httpd.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> httpd -M | grep ssl</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dnf search mod_ssl // 执行这一步是在上一部查询结果为空的情况下执行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dnf install -y mod_ssl  // 执行成功后需要再一次确认Apache成功加载了mod_ssl模块</span></span><br></pre></td></tr></table></figure>
<font color="red">
运行httpd -M | grep ssl 出现以下输出：

&emsp;&emsp;AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain.Set the 'ServerName' directive globally to suppress this message
我们需要编辑httpd.conf文件： 
 /etc/httpd/conf/httpd.conf 
 修改ServerName这一项为 ServerName localhost:80
然后重启httpd ``` # httpd -k restart ```
</font>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> httpd -t  // 校验Apache配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> httpd -k restart // 重启Apache</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl stop firewalld.service  // 关闭防火墙</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld.service //删除防火墙启动配置文件</span></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>先来说几个配置文件路径<br>Apache主配置文件： /etc/httpd/conf/httpd.conf<br>Apache虚拟配置文件目录：/etc/httpd/conf.d/*.conf<br>Apache SSL配置文件在： /etc/httpd/conf.d/ssl.conf</p>
<figure class="highlight apacheconf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 虚拟主机配置</span></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">ServerName</span></span> learn.cn</span><br><span class="line"><span class="attribute">ServerAlias</span> www.learn.cn</span><br><span class="line"><span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/html/</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;Directory /var/www/html/&gt;</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">Options</span></span> -Indexes +FollowSymLinks</span><br><span class="line"><span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight apacheconf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https配置</span></span><br><span class="line"><span class="section">&lt;VirtualHost learn.cn<span class="number">:443</span>&gt;</span></span><br><span class="line"> <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">&quot;/var/www/html/&quot;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> learn.cn:<span class="number">443</span></span><br><span class="line">    <span class="attribute">SSLEngine</span> <span class="literal">on</span></span><br><span class="line">    <span class="comment"># 添加SSL协议支持协议，去掉不安全的协议。   </span></span><br><span class="line">    <span class="attribute">SSLProtocol</span> <span class="literal">all</span> -SSLv<span class="number">2</span> -SSLv<span class="number">3</span> </span><br><span class="line">    <span class="comment"># 修改加密套件。</span></span><br><span class="line">    <span class="attribute">SSLCipherSuite</span> HIGH:!RC<span class="number">4</span>:!MD<span class="number">5</span>:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM   </span><br><span class="line">    <span class="attribute">SSLCertificateFile</span> /root/certificate/server.crt</span><br><span class="line">    <span class="attribute">SSLCertificateKeyFile</span> /root/certificate/server.key</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Nginx部署HTTPS"><a href="#Nginx部署HTTPS" class="headerlink" title="Nginx部署HTTPS"></a>Nginx部署HTTPS</h2><h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><ul>
<li>系统：ubuntu </li>
<li>证书文件：自签的文件包括 server.key server.crt</li>
<li>安装nginx服务器，nginx服务器需要有http_ssl_module模块</li>
</ul>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install nginx</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx -v</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx -V  <span class="comment"># 确保加载了http_ssl_module</span></span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;如果nginx是以源码的方式编译安装的，就只能重新编译一下，添加 <strong>—with-http_ssl_module</strong> 这个扩展，有一个小技巧，在编译之前利<br>用nginx -v 输出现在已有的模块将其拷贝出来，第二次编译时直接追加到编译参数后面就行</p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>以默认的default.conf 为配置文件，演示默认nginx主页<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">   <span class="attribute">ssl_certificate</span> /home/xiaoxiao/data/certificate/server.crt;</span><br><span class="line">   <span class="attribute">ssl_certificate_key</span> /home/xiaoxiao/data/certificate/server.key;</span><br><span class="line">   <span class="attribute">ssl_protocols</span> TLSV1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">   <span class="attribute">ssl_ciphers</span> HIGH:!aNull:!MD5:!SEED:!IDEA; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>未配置https之前：<br><img src="https://img.imgdb.cn/item/607001188322e6675c26aac4.jpg" alt=""></p>
<p>配置之后：<br><img src="https://img.imgdb.cn/item/607001eb8322e6675c277f5b.jpg" alt=""></p>
<p>出现这种情况是由于我们的证书不是受信任的CA机构颁发的，我们点击接受就行了</p>
<p><img src="https://img.imgdb.cn/item/607002808322e6675c2802ab.jpg" alt=""><br>看到已经有锁标识了，部署成功</p>
<h2 id="HTTPS性能优化"><a href="#HTTPS性能优化" class="headerlink" title="HTTPS性能优化"></a>HTTPS性能优化</h2><h3 id="性能损耗"><a href="#性能损耗" class="headerlink" title="性能损耗"></a>性能损耗</h3><p>HTTPS的性能损耗在以下两个地方：</p>
<ol>
<li>握手增加的延时，一次完整的TLS握手至少增加延时 2 <em> RTT，即使使用在会话缓存机制下的握手也至少增加 1 </em> RTT(RTT(Round-Trip Time)，TCP数据包发送的往返时间)</li>
<li>加密会消耗更多系统资源，对称加解密、非对称加解密消耗额外的CPU计算资源，当HTTPS连接过多时，加解密操作的性能将首先成为瓶颈</li>
</ol>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="CDN接入"><a href="#CDN接入" class="headerlink" title="CDN接入"></a>CDN接入</h4><p>HTTPS延时主要取决于一次往返RTT的时间<br>使用CDN作为HTTPS接入的入口，将能够极大减少RTT时间<br>每个CDN节点通过可控方法与业务服务器高效通信，从而减少延时，常用的可控方法有维持长连接、会话复用和链路质量优化等。</p>
<h3 id="会话缓存-1"><a href="#会话缓存-1" class="headerlink" title="会话缓存"></a>会话缓存</h3><p>使用会话缓存机制建立HTTPS连接只需至少1*RTT的延时<br>基于会话缓存机制建立的HTTPS连接不需要服务器使用RSA私钥解密Pre-master信息，可以节省CPU资源<br>如果HTTPS访问集中且缓存命中率高，此方法大大提升访问速度</p>
<h3 id="硬件加速"><a href="#硬件加速" class="headerlink" title="硬件加速"></a>硬件加速</h3><p>为服务器安装专用的SSL硬件加速卡<br>SSL硬件加速卡具有更高的加解密能力且不影响业务程序。</p>
<h3 id="远程加解密"><a href="#远程加解密" class="headerlink" title="远程加解密"></a>远程加解密</h3><p>将最消耗CPU资源的加解密任务转移到其他服务器<br>可以充分利用网络带宽与服务器的网卡性能，提高业务服务器接入能力<br>远程加解密服务器可以是CPU利用率比较低的服务器，也可以是高计算性能的专用服务器</p>
<h3 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h3><p>从协议层面提高HTTPS工作性能<br>HTTP2使用多路复用技术、头部压缩算法、服务器推送功能提高了HTTP协议的工作性能</p>
<h2 id="HTTPS测试工具"><a href="#HTTPS测试工具" class="headerlink" title="HTTPS测试工具"></a>HTTPS测试工具</h2><h3 id="流量分析工具"><a href="#流量分析工具" class="headerlink" title="流量分析工具"></a>流量分析工具</h3><ul>
<li>网络抓包工具： Wireshark、Tcpdump</li>
<li>网站调式工具：Fiddler、Postman</li>
</ul>
<h3 id="网站测试工具"><a href="#网站测试工具" class="headerlink" title="网站测试工具"></a>网站测试工具</h3><ul>
<li>SSL安全测试：<a href="https://www.ssllabs.com/ssltest">SSL Labs</a></li>
<li>网站性能测试：<a href="https://www.uptrends.com/tools/uptime">uptrends</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/article/http/</url>
    <content><![CDATA[<h2 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h2><p><a href="https://zhuanlan.zhihu.com/p/29287795">参考</a></p>
<p>​      IP协议（Internet Protocol，互联网协议），是TCP/IP协议栈中最核心的协议之一，通过IP地址，保证了联网设备的唯一性，实现了网络通信的面向无连接和不可靠的传输功能。</p>
<p><a href="https://imgtu.com/i/6RzeDU"><img src="https://z3.ax1x.com/2021/03/19/6RzeDU.png" alt="6RzeDU.png"></a></p>
<p><strong>Version（版本号）：</strong>标识IP协议的版本，目前V4版本地址已经枯竭，V6慢慢成为主流。</p>
<p><strong>Header Length（头部长度）</strong>：默认为20字节，最大为60字节。</p>
<p><strong>Differentiated Services Field （服务区分符）</strong>：用于为不同的IP数据包定义不同的服务质量，一般应用在QoS技术中。</p>
<p><strong>Total Length （总长度）：</strong>标识IP头部加上上层数据的数据包大小，IP包总长度最大为65535个字节。</p>
<p><strong>Identification （标识符）：</strong>用来实现IP分片的重组，标识分片属于哪个进程，不同进程通过不同ID区分。</p>
<p><strong>Flags（标志符）：</strong>用来确认是否还有IP分片或是否能执行分片。</p>
<p><strong>Fragment offset （分片偏移量）：</strong>用于标识IP分片的位置，实现IP分片的重组。</p>
<p><strong>Time to live （生存时间）：</strong>标识IP数据包还能生存多久，根据操作系统不同，TTL默认值不同，每经过一个三层设备如路由器的处理，则TTL减去1，当TTL=0时，则此数据包被丢弃。</p>
<p><strong>Protocol （协议号）：</strong>标识IP协议上层应用。当上层协议为ICMP时，协议号为1，TCP协议号为6，UDP的协议号为17。</p>
<p><strong>Header checksum （头部校验）：</strong>用于检验IP数据包是否完整或被修改，若校验失败则丢弃数据包。</p>
<p><strong>Source（源IP地址）：</strong>标识发送者IP地址，占用32bit。</p>
<p><strong>Destination （目的IP地址）：</strong>标识接收者IP地址，占用32bit。</p>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>&emsp;&emsp;DNS的全称是Domain Name System,称为域名系统，是Internet上解决网上机器命令的一种系统，虽然在网上可以通过IP地址来标识一台机器，但是IP地址由四段以逗号分开的数组组成的，一两个的情况下记录起来不是问题，但是要是上百上千个的情况下记录起来不如记录名字快</p>
<p>&emsp;&emsp;域名可将一个IP地址关联到一组有意义的字符上去。用户访问一个网站的时候，既可以输入该网站的IP地址，也可以输入其域名，就像是我们访问百度一样即可以在浏览器输入www.baidu.com也可以输入百度的IP 110.242.68.4 ，两个都是打开百度网站的首页</p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>&emsp;&emsp;域名解析是把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。P地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器服务器)完成。</p>
<p>&emsp;&emsp;简单地来说就是将域名解析成IP，让用户访问网站时即可以输入域名访问也可以输入IP地址访问</p>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><ol>
<li>TCP提供一种面向连接的、可靠的字节流服务</li>
<li>在一个TCP连接中，仅有两方进行彼此通信。广播和多播不能用于TCP</li>
<li>TCP使用校验和，确认和重传机制来保证可靠传输</li>
<li>TCP给数据分节(给每一个传送的数据字节都编号)进行排序，并使用累积确认保证数据的顺序不变和非重复</li>
<li>TCP使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</li>
</ol>
<p><a href="https://blog.csdn.net/xingerr/article/details/72834303">参考</a></p>
<p><img src="https://img.imgdb.cn/item/60546201524f85ce29196125.jpg" alt=""></p>
<ol>
<li>序号：seq（Sequence）序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li>
<li>确认序号：ack（Acknowledge）序号，占32位，只有ACK标志位为1时，确认序号字段才有效，ack=seq+1。</li>
<li>标志位：每个标志位占用1Bit，共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：<ol>
<li>URG：紧急指针（urgent pointer）有效。</li>
<li>ACK(Acknowledge)：确认序号有效。</li>
<li>PSH(Push)：接收方应该尽快将这个报文交给应用层。</li>
<li>RST(Reset)：重置连接。</li>
<li>SYN(Synchronous)：发起一个新连接。</li>
<li>FIN(Finish)：释放一个连接。</li>
</ol>
</li>
</ol>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="https://img.imgdb.cn/item/6054595f524f85ce2914181a.png" alt=""></p>
<p>说明：</p>
<ul>
<li><p>三次握手指的是建立一个TCP连接时，需要客户端和服务器总共发送三个包</p>
</li>
<li><p>第一次握手，客户端发送一个TCP的SYN标志位置1的包，表示客户端打算连接服务器的端口(同步请求)，并选择序号seq=x,表示传送数据时的第一个数据字节的序号是x；发送完毕后，客户端进入SYN_SEND状态</p>
</li>
<li><p>第二次握手，服务器端收到连接请求报文后，如果同意连接请求，则发回确认包，即SYN=1,ACK=1。服务器端选择字节ISN序列号随机值y，放到seq域中，同时将确认序号ack设置为客户的LSN加1，即x+1回复对方收到了序列为x开始的包，且希望下次的数据从x+1的位置开始；服务器端发送完毕后，服务器端进入SYN_RCVD状态</p>
</li>
<li><p>第三次握手，客户端接收到服务器端的确认报文后，再一次发送确认包ACK，SYN标志位为0，ACK的标志位为1，并且把服务器发来ACK的序列号字段+1，放在ack确认字段中发送给对方，并且告诉服务器自己的seq=x+1,客户端发送完毕后进入ESTAB_LISHED状态，当服务器接收到客户端发送的包后也会进入ESTAB_LISHED状态，至此握手结束</p>
</li>
</ul>
<font color='red'>

seq是为了区分是属于哪一次的连接，因为浏览器会给服务器发送多次连接请求

ack是确认包，告诉浏览器已收到请求了，避免重复发送请求

Q:握手一次行不行？

A:一次握手不行的原因是，客户端发送完sync同步信号后，直接给服务器发送请求的话，第一次的同步信息无法判断服务器的状态，不知道服务器是否换了IP，服务器是否还存活，客户端虽然给服务器发送了同步信号，但是服务器没有返回任何信息，客户端对服务器的状态是不清楚的，因此一次是不行的

Q:握手两次行不行?

A:两次握手不行的原因是，客户端给服务器发送同步信号后，有一种情况是网络特别差的情况下发送回特别特别的慢，在超过一定的时间后浏览器会以为当前的信号可能会失败，然后浏览器会重新发送一次新的同步信号然后会将上一次发送的同步信号设置为无效，第二次和服务器通信的网络非常稳定，立即和服务器建立了连接然后迅速的完成了请求与响应到断开了链接，然后服务器接收到了第一次浏览器的同步信息，服务器会误以为是浏览器发送的最新的连接信号，因此会和这个请求建立链接返回信息给浏览器，但是浏览器根据seq判断出这次的连接时无效的，虽然服务器发送了消息，但是浏览器是不会给回信息的，当前是基于两次握手实现的，服务器以为建立链接成功了，因此它会一直的等浏览器返回，直到资源耗尽，

</font>



<h2 id="命令查看三次握手"><a href="#命令查看三次握手" class="headerlink" title="命令查看三次握手"></a>命令查看三次握手</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -c number -v host IP</span><br></pre></td></tr></table></figure>
<ul>
<li>-c 指定不活多少个包</li>
<li>-v 显示包的详细信息</li>
<li>host 后面表示捕获的地址</li>
<li>使用此命令需要使用管理员权限</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>1.先获取IP地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>
<p>2.打开终端，使用tcpdump命令进入捕获包状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -c 3 -v host 110.242.68.3</span><br></pre></td></tr></table></figure>
<p>3.打开浏览器访问 110.242.68.3，终端就会打印本次抓包的结果</p>
<p><img src="https://img.imgdb.cn/item/605807fa8322e6675c51f1f3.png" alt=""></p>
<p>客户端：xiaoxiao.47034</p>
<p>服务器端：110.242.68.3</p>
<p>从以上可以看出，在浏览器中输入IP地址后是经过了三次握手，第一次，客户端先给服务器端发送了一个同步信号，里面带了一个seq的序列号，第二次当服务器端接收到信息号，首先进行了一个checksum（校验），然后返回给客户端一个seq和ack = 客户端seq+1，第三次是客户端给服务器发送ack确认包，ack=1，至此三次连接就成功了</p>
<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>缓存机制主要在http响应头中设置，相关字段为Expires,Cache-Control,Last-Modified,if-Modified-Since,Etag</p>
<p>HTTP 1.0中，告诉浏览器在约定的时间前可以直接从缓存中获取资源，而不需要跑到服务器去获取</p>
<p>Expires是相对时间而定的，而且时间是GMT，不是本地时间</p>
<h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>HTTP 1.1中，新增的Cache-Control，同时设置Cache-Control和Expires的情况下，Cache-Control的优先级高于Expires，下面来说说这个头中常用字段的含义</p>
<ul>
<li>max-age：用来设置资源（representations）可以被缓存多长时间，单位为秒；</li>
<li>s-maxage：和max-age是一样的，不过它只针对代理服务器缓存而言；</li>
<li>public：指示响应可被任何缓存区缓存；</li>
<li>private：只能针对个人用户，而不能被代理服务器缓存；</li>
<li>no-cache：强制客户端直接向服务器发送请求,也就是说每次请求都必须向服务器发送。服务器接收到请求，然后判断资源是否变更，是则返回新内容，否则返回304，未变更。这个很容易让人产生误解，使人误以为是响应不被缓存。实际上Cache-Control: no-cache是会被缓存的，只不过每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存响应的有效性。</li>
<li>no-store：禁止一切缓存（这个才是响应不被缓存的意思）</li>
</ul>
<h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>请求可以分为三个部分，请求行，请求头部，请求数据，请求头部和请求数据之前有一个空行，请求行和请求头的结束符是回车符+换行符</p>
<p>图示如下：</p>
<p><img src="https://img.imgdb.cn/item/60580b198322e6675c53b822.jpg" alt=""></p>
<h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求行由 请求方法，请求的URL，协议版本，以及结束的回车和换行符，在请求方法，请求的URL和协议版本三者之间有一个空格分隔，</p>
<p>请求方法主要有以下几个：</p>
<ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
<li>HEAD</li>
<li>OPTIONS</li>
<li>CONNECT</li>
<li>TRACE</li>
<li>PATCH</li>
</ul>
<p>请求URL分为绝对路径和相对路径两种方式,<code>/</code> 和 <code>/news/articles/70.html</code></p>
<p>协议版本表示HTTP的版本，现在大多数是1.1</p>
<p>下面来看几个例子</p>
<p><img src="https://img.imgdb.cn/item/60580d058322e6675c55869e.jpg" alt=""></p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;图 1.1</p>
<p>图1.1是访问百度首页时，请求行的信息，可以看到这个请求URL是绝对路径访问</p>
<p><img src="https://img.imgdb.cn/item/60580ce78322e6675c555dab.jpg" alt=""></p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;图 1.2</p>
<p>图1.2是访问百度新闻某一个具体的新闻文章时的请求行信息，可以看到这个请求URL是相对路径访问</p>
<h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><div class="table-container">
<table>
<thead>
<tr>
<th>GET</th>
<th>一般是从服务器上获取信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>POST</td>
<td>向服务器提交信息，将信息保存到服务器上，一般常见是表单提交和文件上传</td>
</tr>
<tr>
<td>PUT</td>
<td>一般是更新服务器端已经存在的数据信息</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除服务器端指定的数据信息</td>
</tr>
<tr>
<td>HEAD</td>
<td>和GET请求类型，不过只返回头信息</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>这个和处理跨越相关的，是服务器端允许客户端已什么请求方法来获取数据</td>
</tr>
<tr>
<td>CONNECT</td>
<td>这个是用作代理</td>
</tr>
<tr>
<td>TRACE</td>
<td>这个主要是用于测试和诊断服务器</td>
</tr>
<tr>
<td>PATCH</td>
<td>对PUT方法的更新，用来对资源进行局部更新</td>
</tr>
</tbody>
</table>
</div>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p><a href="https://tools.ietf.org/html/rfc2616#section-4.2">官方地址</a></p>
<p>按照请求头的作用可以分为三大类，分别是 内容协商，缓存控制，以及其他的头</p>
<h4 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h4><p>简单地来收就是浏览器（客户端）希望服务器端给返回什么样的数据格式与内容。</p>
<ul>
<li>Accept</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">Accept:text/html,image/jpeg,image/gif,application/pdf</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">Accept:text/html,image/jpeg;q=0.3,image/gif;q=0.5,application/pdf</span><br></pre></td></tr></table></figure>
<p>表示浏览器可以接受的返回类型，主要包含格式有text/html,image/jpeg,image/gif,application/pdf</p>
<p>第二行的请求头中 q=0.3表示返回这种格式的概率比较大，这个值的默认值是1</p>
<ul>
<li>Accept-Charset</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Accept-Charset</span><span class="punctuation">: </span>ISO-8859-1,gb2312,utf-8;q=0.7,*;q=0.3</span><br></pre></td></tr></table></figure>
<p>*表示任意其他的字符集，这个值服务器给客户端返回的可以使用的字符集</p>
<ul>
<li>Accept-Encoding</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br></pre></td></tr></table></figure>
<p>表示浏览器可以接受的压缩类型</p>
<ul>
<li>Accept-Language</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span><br></pre></td></tr></table></figure>
<p>表示浏览器可以支持的语音</p>
<h4 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h4><ul>
<li>If-None-Match</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>W/&quot;6038a4f6-813&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>W/&quot;6038a4f6-813&quot;</span><br></pre></td></tr></table></figure>
<p>这个请求头是和响应头中的ETag一起结合使用的，当你第一次发起一个HTTP请求后，服务器会返回一个ETag，当你第二次发起相同的请求后，客户端（浏览器）就会在请求头中携带 if-none-math这个头，它的值就是Etag的值，服务器端接受到这个值后会与服务器本身存储的值进行比较，如果相同的话，将if-none-math设置为false，返回状态304，客户端使用本地缓存，服务器不会返回任何数据，因为服务器的数据没有更新，如果不相同的话，将if-none-math设置为true，返回状态200，客户端需要重新解析服务器端返回的数据</p>
<ul>
<li>If-Modified-Since</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Fri, 26 Feb 2021 07:36:22 GMT</span><br></pre></td></tr></table></figure>
<p>用于记录页面的最后修改时间，与if-none-match的判断功能类似，都是作用于客户端第二次请求相同的URL时，浏览器会携带这个请求头，向服务器询问次时间之后文件是否有被修改过，这个时间是本地浏览器存储的文件修改时间，服务器端接收到这个时间后会与服务器上对应文件的最后修改时间进行比较，如果时间一致，返回状态304（文件内容未发生改变），内容是空的，客户端使用本地缓存，如果时间不一致，就会返回状态200，客户端需要重新解析服务器端返回的数据</p>
<ul>
<li>If-Match</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">If-Match</span><span class="punctuation">: </span>W/&quot;67ab43&quot;, &quot;54ed21&quot;, &quot;7892dd&quot;</span><br></pre></td></tr></table></figure>
<p>这个请求头是和响应头中的ETag一起结合使用的，当你第一次发起一个HTTP请求后，服务器会返回一个ETag，当你第二次发起相同的请求后,客户端会携带 if-math这个请求头，当服务器接收到这个头信息后，服务器会将要修改的资源的获取出来计算出一个etag，然后服务器会将计算的etag与客户端发送的etag进行对比，如果一致说明资源在浏览器修改的这段时间没有人对其进行过修改，浏览器当前的修改操作就可以执行，如果不一致，说明在浏览器修改的这段时间内有其他的人对资源进行了修改，那么此次的浏览器的修改就不会被执行</p>
<ul>
<li>If-Unmodified-Since</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">If-Unmodified-Since</span><span class="punctuation">: </span>Wed, 21 Oct 2015 07:28:00 GMT </span><br></pre></td></tr></table></figure>
<p>这个请求头是当前资源的最新修改时间，服务器会将资源的对应的修改时间获取到，然后两个时间进行对比，时间不一致的话，当前的修改资源请求是不被运行的，时间一致的话，当前请求修改资源是可以成功执行的</p>
<ul>
<li>If-Range</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">If-Range</span><span class="punctuation">: </span>Wed, 21 Oct 2015 07:28:00 GMT </span><br></pre></td></tr></table></figure>
<p>用于断点续传，在我们下载文件的时候，开始下载后，可能由于网络的原因，断网后没有完成下载，当我们第二次重新连接成功后，会携带这个请求头给服务器，服务器会根据这个信息去找要下载的资源信息，然后计算出一个值会与客户端的进行比较，如果一致的话，说明浏览器下载的数据是有效的，服务器就会把剩下的数据返回给浏览器；如果不一致的话，说明在断网的情况下，服务器更新了这个资源的信息，这时候服务器会让浏览器重新下载当前的文档</p>
<h4 id="其他请求头"><a href="#其他请求头" class="headerlink" title="其他请求头"></a>其他请求头</h4><ul>
<li>User-Agent</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36</span><br></pre></td></tr></table></figure>
<p>告诉服务器当前客户端所处的操作系统以及浏览器的相关信息</p>
<ul>
<li>Referer</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">referer</span><span class="punctuation">: </span>https://test.ia.qq.com</span><br></pre></td></tr></table></figure>
<p>标识上一个请求的来源地址，主要用于请求跟踪</p>
<ul>
<li>Expect</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Expect</span><span class="punctuation">: </span>100-Continue</span><br></pre></td></tr></table></figure>
<p>允许客户端在发送请求内容之前，判断源服务器是否愿意接受请求</p>
<p>主要是post请求，询问服务器是否支持post请求</p>
<p>curl命令还会发送expect请求头</p>
<ul>
<li>Host</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.baidu.com</span><br></pre></td></tr></table></figure>
<p>发送请求主机的域名</p>
<ul>
<li>Connection</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure>
<p>浏览器开启长连接，就是多个连接会复用一个tcp连接</p>
<h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><p>请求体是经过请求行，请求头加上回车换行符之后的最后一部分内容就是请求数据</p>
<p>表示向服务器端发送本次数据的格式，也就是请求头中Content-Type:的值，有四种</p>
<ul>
<li>application/json</li>
</ul>
<p>json数据格式 </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Jom&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sex&quot;</span>:<span class="string">&quot;F&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>text/plain</li>
</ul>
<p>纯文本格式</p>
<ul>
<li>application/x-www-form-urlencoded</li>
</ul>
<p>经过编码之后的格式，形式如 name=tom&amp;age=18,如果参数对应的值中有分隔符&amp;的值，值会被编码处理</p>
<ul>
<li>multipart/form-data</li>
</ul>
<p>添加表单使用，文件上传</p>
<h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p><img src="https://img.imgdb.cn/item/60585dc58322e6675c8463a6.jpg" alt=""></p>
<h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><p>响应行由 协议版本，状态码，状态码描述以及结束的回车和换行符，在协议版本，状态码和状态码描述三者之间有一个空格分隔</p>
<p>常见的状态码如下：</p>
<ul>
<li>200 ，请求成功</li>
<li>301，永久重定向，请求的资源已被转移到其他地址</li>
<li>302，临时重定向</li>
<li>400，错误的请求语法，服务器无法理解处理</li>
<li>403，服务器可以理解处理客户端的请求，但是拒绝执行此请求</li>
<li>404，没有找到客户端请求的资源</li>
<li>500，服务器端内部错误，无法完成请求</li>
<li>502，服务器将请求传递给后端处理脚本的时候，后端脚本处理出错</li>
<li>504，请求超时，后端代理的服务器响应超时，后端脚本如果没有超过设置的超时时间会依然进行请求的处理</li>
</ul>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>状态码主要分为5种类型：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>分类</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1**</td>
<td>信息类，表示服务器接收到请求了，需要请求者继续执行操作</td>
</tr>
<tr>
<td>2**</td>
<td>表示请求已经被成功处理</td>
</tr>
<tr>
<td>3**</td>
<td>重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td>4**</td>
<td>客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td>5**</td>
<td>服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">状态码</th>
<th style="text-align:left">状态码英文名称</th>
<th style="text-align:left">中文描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">100</td>
<td style="text-align:left">Continue</td>
<td style="text-align:left">继续。客户端应继续其请求</td>
</tr>
<tr>
<td style="text-align:left">101</td>
<td style="text-align:left">Switching Protocols</td>
<td style="text-align:left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">200</td>
<td style="text-align:left">OK</td>
<td style="text-align:left">请求成功。一般用于GET与POST请求</td>
</tr>
<tr>
<td style="text-align:left">201</td>
<td style="text-align:left">Created</td>
<td style="text-align:left">已创建。成功请求并创建了新的资源</td>
</tr>
<tr>
<td style="text-align:left">202</td>
<td style="text-align:left">Accepted</td>
<td style="text-align:left">已接受。已经接受请求，但未处理完成</td>
</tr>
<tr>
<td style="text-align:left">203</td>
<td style="text-align:left">Non-Authoritative Information</td>
<td style="text-align:left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td>
</tr>
<tr>
<td style="text-align:left">204</td>
<td style="text-align:left">No Content</td>
<td style="text-align:left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td>
</tr>
<tr>
<td style="text-align:left">205</td>
<td style="text-align:left">Reset Content</td>
<td style="text-align:left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td>
</tr>
<tr>
<td style="text-align:left">206</td>
<td style="text-align:left">Partial Content</td>
<td style="text-align:left">部分内容。服务器成功处理了部分GET请求</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">300</td>
<td style="text-align:left">Multiple Choices</td>
<td style="text-align:left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td>
</tr>
<tr>
<td style="text-align:left">301</td>
<td style="text-align:left">Moved Permanently</td>
<td style="text-align:left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td>
</tr>
<tr>
<td style="text-align:left">302</td>
<td style="text-align:left">Found</td>
<td style="text-align:left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td>
</tr>
<tr>
<td style="text-align:left">303</td>
<td style="text-align:left">See Other</td>
<td style="text-align:left">查看其它地址。与301类似。使用GET和POST请求查看</td>
</tr>
<tr>
<td style="text-align:left">304</td>
<td style="text-align:left">Not Modified</td>
<td style="text-align:left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td>
</tr>
<tr>
<td style="text-align:left">305</td>
<td style="text-align:left">Use Proxy</td>
<td style="text-align:left">使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td style="text-align:left">306</td>
<td style="text-align:left">Unused</td>
<td style="text-align:left">已经被废弃的HTTP状态码</td>
</tr>
<tr>
<td style="text-align:left">307</td>
<td style="text-align:left">Temporary Redirect</td>
<td style="text-align:left">临时重定向。与302类似。使用GET请求重定向</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">400</td>
<td style="text-align:left">Bad Request</td>
<td style="text-align:left">客户端请求的语法错误，服务器无法理解</td>
</tr>
<tr>
<td style="text-align:left">401</td>
<td style="text-align:left">Unauthorized</td>
<td style="text-align:left">请求要求用户的身份认证</td>
</tr>
<tr>
<td style="text-align:left">402</td>
<td style="text-align:left">Payment Required</td>
<td style="text-align:left">保留，将来使用</td>
</tr>
<tr>
<td style="text-align:left">403</td>
<td style="text-align:left">Forbidden</td>
<td style="text-align:left">服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td style="text-align:left">404</td>
<td style="text-align:left">Not Found</td>
<td style="text-align:left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td>
</tr>
<tr>
<td style="text-align:left">405</td>
<td style="text-align:left">Method Not Allowed</td>
<td style="text-align:left">客户端请求中的方法被禁止</td>
</tr>
<tr>
<td style="text-align:left">406</td>
<td style="text-align:left">Not Acceptable</td>
<td style="text-align:left">服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td style="text-align:left">407</td>
<td style="text-align:left">Proxy Authentication Required</td>
<td style="text-align:left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td style="text-align:left">408</td>
<td style="text-align:left">Request Time-out</td>
<td style="text-align:left">服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td style="text-align:left">409</td>
<td style="text-align:left">Conflict</td>
<td style="text-align:left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td style="text-align:left">410</td>
<td style="text-align:left">Gone</td>
<td style="text-align:left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td>
</tr>
<tr>
<td style="text-align:left">411</td>
<td style="text-align:left">Length Required</td>
<td style="text-align:left">服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td style="text-align:left">412</td>
<td style="text-align:left">Precondition Failed</td>
<td style="text-align:left">客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td style="text-align:left">413</td>
<td style="text-align:left">Request Entity Too Large</td>
<td style="text-align:left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td>
</tr>
<tr>
<td style="text-align:left">414</td>
<td style="text-align:left">Request-URI Too Large</td>
<td style="text-align:left">请求的URI过长（URI通常为网址），服务器无法处理</td>
</tr>
<tr>
<td style="text-align:left">415</td>
<td style="text-align:left">Unsupported Media Type</td>
<td style="text-align:left">服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td style="text-align:left">416</td>
<td style="text-align:left">Requested range not satisfiable</td>
<td style="text-align:left">客户端请求的范围无效</td>
</tr>
<tr>
<td style="text-align:left">417</td>
<td style="text-align:left">Expectation Failed</td>
<td style="text-align:left">服务器无法满足Expect的请求头信息</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">500</td>
<td style="text-align:left">Internal Server Error</td>
<td style="text-align:left">服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td style="text-align:left">501</td>
<td style="text-align:left">Not Implemented</td>
<td style="text-align:left">服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td style="text-align:left">502</td>
<td style="text-align:left">Bad Gateway</td>
<td style="text-align:left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>
</tr>
<tr>
<td style="text-align:left">503</td>
<td style="text-align:left">Service Unavailable</td>
<td style="text-align:left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td>
</tr>
<tr>
<td style="text-align:left">504</td>
<td style="text-align:left">Gateway Time-out</td>
<td style="text-align:left">充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td style="text-align:left">505</td>
<td style="text-align:left">HTTP Version not supported</td>
<td style="text-align:left">服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody>
</table>
</div>
<h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p><a href="https://tools.ietf.org/html/rfc2616#section-7.1">官网</a></p>
<ul>
<li>Content-Encoding</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip</span><br></pre></td></tr></table></figure>
<p>服务器端告诉浏览器使用的是那种压缩格式</p>
<ul>
<li>Content-Range</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Range</span><span class="punctuation">: </span>bytes 200-299/403</span><br></pre></td></tr></table></figure>
<p>用于断点续传</p>
<ul>
<li>Content-Language</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh</span><br></pre></td></tr></table></figure>
<p>服务器告诉浏览器使用的语言</p>
<ul>
<li>Expires</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Tue, 23 Mar 2021 02:34:21 GMT</span><br></pre></td></tr></table></figure>
<p>浏览器从服务器请求到资源后，服务器告诉浏览器当前资源缓存到什么时候截止，这个时间段之后就不能从缓存中获取需要重新向服务器获取时间</p>
<ul>
<li>Content-Type</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br></pre></td></tr></table></figure>
<p>服务器告诉浏览器返回的内容格式</p>
<ul>
<li>Content-Length</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10769</span><br></pre></td></tr></table></figure>
<p>服务器返回给浏览器响应数据的大小，如果后端数据是通过分块返回给浏览器就不能通过这个响应头来判断相应数据的大小，只能根据块大小累积</p>
<ul>
<li>Last-Modified</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Mon, 26 Apr 2010 13:22:17 GMT</span><br></pre></td></tr></table></figure>
<p>服务器给浏览器发送响应数据时，是响应数据最新的修改时间，浏览器二次请求时会带上这个时间发送服务器，服务器会把请求数据的最新修改时间拿出来进行对比，根据时间是否一致决定是否向服务器获取最新时间</p>
<ul>
<li>Location</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://www.baidu.com</span><br></pre></td></tr></table></figure>
<p>服务器返回重定向的状态码后会携带这个响应头表示资源的新的请求地址</p>
<ul>
<li>Cache-Control</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>private</span><br></pre></td></tr></table></figure>
<ul>
<li>max-age：用来设置资源（representations）可以被缓存多长时间，单位为秒；</li>
<li>s-maxage：和max-age是一样的，不过它只针对代理服务器缓存而言；</li>
<li>public：指示响应可被任何缓存区缓存；</li>
<li>private：只能针对个人用户，而不能被代理服务器缓存；</li>
<li>no-cache：强制客户端直接向服务器发送请求,也就是说每次请求都必须向服务器发送。服务器接收到请求，然后判断资源是否变更，是则返回新内容，否则返回304，未变更。这个很容易让人产生误解，使人误以为是响应不被缓存。实际上Cache-Control: no-cache是会被缓存的，只不过每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存响应的有效性。</li>
<li><p>no-store：禁止一切缓存（这个才是响应不被缓存的意思）</p>
</li>
<li><p>Connection</p>
</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br></pre></td></tr></table></figure>
<p>表示本次连接是否是长连接，意思是当前的链接是否可以复用</p>
<h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>就是服务器给浏览器发回的数据内容，我们在浏览器的调试模式下可以看到response的内容，这个内容的格式有响应头 Content-Type来决定，响应头中是json格式返回的数据就是json格式，是html返回的就是html</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><a href="https://zhuanlan.zhihu.com/p/86426969">参考</a></p>
<p><img src="https://img.imgdb.cn/item/60596a9d8322e6675c0f5ab4.jpg" alt=""></p>
<p><img src="https://img.imgdb.cn/item/60545fc4524f85ce2917ed20.jpg" alt=""></p>
<p><img src="https://img.imgdb.cn/item/60595f4b8322e6675c0845d6.jpg" alt=""></p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;图改</p>
<p>四次挥手是在经过三次握手，请求响应后，连接关闭的阶段</p>
<p>关闭的一端可能是服务器端也可能是客户端，对应图改上的话，有可能是主机1发起断开连接也有可能是主机2发起断开连接</p>
<p>第一次挥手，主机1向主机2发送一个fin报文，然后主机1就会处于一个FIN_WAIT_1的状态，即此次断开连接是由主机1发起的，fin报文包含FIN=1，seq=u,然后会停止发送数据，主动关闭tcp连接</p>
<p>第二次挥手，主机2收到主机1发送的fin报文，会发出确认报文ACK=1，ack=u+1,seq=v，此时主机2处于close_wait状态，此时的tcp处于半关闭状态，主机1到主机2的连接会被释放，当主机1收到主机2的确认报文后，进入FIN_WAIT_2状态，等待主机2发送释放连接报文即fin报文</p>
<p>第三次挥手，主机2这边也想断开连接了，会和主机1第一次挥手一样，发送给主机1fin报文，同时会指定一个序列号，此时服务器端会处于LAST_ACK状态，等待主机1的确认（FIN=1，ACK=1，seq=w，ack=u+1）</p>
<p>第四次挥手，主机1收到主机2的fin报文后，会一样发送一个ACK确认报文作为应答，且把主机2的序列号值+1作为自己ACK报文的序列号值，此时主机1处于TIME_WAIT状态，需要经过一段时间确认主机2收到自己的ACK报文后会进入CLOSED状态，主机2收到确认报文后就关闭连接了，处于CLOSED状态</p>
<font color='red'>

Q: 第四次挥手是否真的必要

A: 假设第四次的ack数据包不发生，对于主机2来说当它发送了fin包后，主机1是不会给主机2任何反馈的，可能会导致主机2认为fin包因为网络的原因发送失败了，主机2就会不断重新的发送fin包，会导致主机1和主机2无法正常的断开连接，因此第四次的挥手是必要的

Q: 主机2在fin和ack中间干了什么

A:  主机2需要保证这段时间的响应数据正确的发送给主机1，不会因为网络等原因造成数据丢失

</font>


<hr>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Js笔记</title>
    <url>/article/js/</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  定义变量</span></span><br><span class="line"><span class="keyword">var</span> a =<span class="number">10</span>;</span><br><span class="line"><span class="comment">//  输出变量</span></span><br><span class="line">alert(x);</span><br><span class="line"><span class="built_in">document</span>.write(x);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul>
<li>全局变量</li>
<li>局部变量 （只能在函数中使用，用 var 定义）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x =<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">show();</span><br><span class="line">alert(x); <span class="comment">//会报错，x变量表示局部变量</span></span><br></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注释内容, 多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul>
<li>整形</li>
<li>浮点型</li>
<li><p>字符型</p>
<ul>
<li>字符串连接符<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;aa&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> z = x + y;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>布尔型</li>
<li>数组(<strong>键只有一种类型，数字</strong>)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一维</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>);</span><br><span class="line"><span class="keyword">var</span> x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维</span></span><br><span class="line"><span class="keyword">var</span> y = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//多维</span></span><br><span class="line"><span class="keyword">var</span> z = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,[<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]]];</span><br></pre></td></tr></table></figure>
<ul>
<li>对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.username = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">obj.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;my name is&#x27;</span>+<span class="built_in">this</span>.username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>JSON</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">  <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;ab&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;nan&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;age&#x27;</span>:<span class="number">19</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象调用属性、行为统一使用 &#x27;.&#x27;</span></span><br><span class="line"><span class="keyword">var</span> username = json.username;</span><br></pre></td></tr></table></figure>
<ul>
<li>NaN(Not a Number)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;19abc&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> number = <span class="built_in">Number</span>(str);</span><br><span class="line">alert(number); <span class="comment">//浏览器会弹出NaN</span></span><br></pre></td></tr></table></figure>
<ul>
<li>NULL<ul>
<li>空值</li>
</ul>
</li>
<li>undefined<ul>
<li>未定义的值</li>
</ul>
</li>
</ul>
<h2 id="类型测试"><a href="#类型测试" class="headerlink" title="类型测试"></a>类型测试</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> type = <span class="keyword">typeof</span>(str);</span><br><span class="line">alert(type); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>
<ul>
<li>检测数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// constructor</span></span><br><span class="line">alert(x.constructor == <span class="built_in">Array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceof</span></span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;array&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;not array&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="顶级全局方法"><a href="#顶级全局方法" class="headerlink" title="顶级全局方法"></a>顶级全局方法</h2><ul>
<li>typeof()</li>
<li>parseInt()</li>
<li>parseFloat()</li>
<li>eval()<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">y = <span class="string">&#x27;x=10+20&#x27;</span>; </span><br><span class="line"><span class="built_in">eval</span>(y);</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(y);  <span class="comment">// x = 10 + 20</span></span><br></pre></td></tr></table></figure></li>
<li>Number()</li>
<li>String()</li>
<li>Boolean()</li>
</ul>
<h2 id="变量类型转换"><a href="#变量类型转换" class="headerlink" title="变量类型转换"></a>变量类型转换</h2><ul>
<li>字符串转换为整型<ul>
<li>parseInt();</li>
<li>Number();</li>
<li>x-0;</li>
</ul>
</li>
<li>整型转换为字符串<ul>
<li>String();</li>
<li>x+’’;   </li>
</ul>
</li>
<li>所有类型转换为布尔型<ul>
<li>Boolean();</li>
<li>!! x</li>
</ul>
</li>
<li>所有类型转换为布尔型为假<ul>
<li>整型 0</li>
<li>浮点型 0.0</li>
<li>字符串 ‘’ (空字符串)</li>
<li>NULL</li>
<li>NaN</li>
<li>undefined</li>
<li>false</li>
</ul>
</li>
<li>json字符串转json对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;&#123;&#x27;username&#x27;:&#x27;user1&#x27;,&#x27;age&#x27;:&#x27;19&#x27;&#125;&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;y=&#x27;</span>+x);</span><br><span class="line">alert(y.age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;(&#123;&#x27;username&#x27;:&#x27;user1&#x27;,&#x27;age&#x27;:&#x27;19&#x27;&#125;)&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="built_in">eval</span>(x);</span><br><span class="line">alert(y);</span><br></pre></td></tr></table></figure>
<h2 id="变量运算符"><a href="#变量运算符" class="headerlink" title="变量运算符"></a>变量运算符</h2><h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th>加法</th>
<th>+</th>
<th>计算两个数字的和</th>
</tr>
</thead>
<tbody>
<tr>
<td>减法</td>
<td>-</td>
<td>计算两个数字的差</td>
</tr>
<tr>
<td>乘法</td>
<td>*</td>
<td>计算两个数字的乘积</td>
</tr>
<tr>
<td>除法</td>
<td>/</td>
<td>计算两个数字的除法</td>
</tr>
<tr>
<td>取余</td>
<td>%</td>
<td>取余运算，返回余数</td>
</tr>
</tbody>
</table>
</div>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th>赋值</th>
<th>=</th>
<th>a = b , 将b的值赋予a</th>
</tr>
</thead>
<tbody>
<tr>
<td>赋值</td>
<td>+=</td>
<td>a += b 等价于 a = a + b</td>
</tr>
<tr>
<td>赋值</td>
<td>-=</td>
<td>a -= b 等价于 a = a - b</td>
</tr>
<tr>
<td>赋值</td>
<td>*=</td>
<td>a <em>= b 等价于 a = a </em> b</td>
</tr>
<tr>
<td>赋值</td>
<td>/=</td>
<td>a /= b 等价于 a = a / b</td>
</tr>
<tr>
<td>赋值</td>
<td>%=</td>
<td>a %= b 等价于 a = a % b</td>
</tr>
</tbody>
</table>
</div>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">逻辑与</th>
<th style="text-align:center">&amp;&amp;</th>
<th style="text-align:center">两个条件同时满足整个条件表达式返回true</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">逻辑或</td>
<td style="text-align:center">&#124;</td>
<td style="text-align:center">两个条件只要有一个满足整个条件表达式返回true</td>
</tr>
<tr>
<td style="text-align:center">逻辑非</td>
<td style="text-align:center">!</td>
<td style="text-align:center">对计算结果取反，如果计算结果是true，则最终返回false反之返回true</td>
</tr>
</tbody>
</table>
</div>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th>大于</th>
<th style="text-align:left">&gt;</th>
<th>判断左边的数字是否大于右边的数，大于返回true否则返回false</th>
</tr>
</thead>
<tbody>
<tr>
<td>小于</td>
<td style="text-align:left">&lt;</td>
<td>判断左边的数字是否小于右边的数，小于返回true否则返回false</td>
</tr>
<tr>
<td>等于</td>
<td style="text-align:left">==</td>
<td>判断左边的数字是否等于右边的数，等于返回true否则返回false</td>
</tr>
<tr>
<td>不等于</td>
<td style="text-align:left">!=</td>
<td>判断左边的数字是否不等于右边的数，不等于返回true否则返回false</td>
</tr>
<tr>
<td>大于等于</td>
<td style="text-align:left">&gt;=</td>
<td>判断左边的数字是否大于等于右边的数，大于等于返回true否则返回false</td>
</tr>
<tr>
<td>小于等于</td>
<td style="text-align:left">&lt;=</td>
<td>判断左边的数字是否小于等于右边的数，小于等于返回true否则返回false</td>
</tr>
</tbody>
</table>
</div>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">case</span> <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">case</span> <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do-while语句"></a>do-while语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure>
<h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">fname</span>:<span class="string">&quot;John&quot;</span>,<span class="attr">lname</span>:<span class="string">&quot;Doe&quot;</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person) &#123;</span><br><span class="line">  txt=txt + person[x];</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch-case语句"></a>switch-case语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h3><p>with (statement 中可以共用 expression)<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> (expression) &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_name</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="function"><span class="keyword">function</span> </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">list();</span><br></pre></td></tr></table></figure>
<h2 id="消息框"><a href="#消息框" class="headerlink" title="消息框"></a>消息框</h2><ul>
<li>警告框 alert()</li>
<li>确认框 confirm()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = confirm(<span class="string">&#x27;您确认删除吗&#x27;</span>);</span><br><span class="line"><span class="comment">// 页面点击确认，x = true</span></span><br><span class="line"><span class="comment">// 页面点击取消，x = false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>提示框 prompt()</li>
</ul>
<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li>属性<ul>
<li>Math.PI</li>
</ul>
</li>
<li>方法<ul>
<li>Math.ceil()  不小于</li>
<li>Math.floor() 不大于</li>
<li>Math.round() 四舍五入</li>
<li>Math.max()</li>
<li>Math.min()</li>
<li>Math.random() 默认是 0~1之间的随机数</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//页面刷新时，页面图片也变化</span></span><br><span class="line"><span class="keyword">var</span> imgs = [<span class="string">&#x27;a.png&#x27;</span>, <span class="string">&#x27;b.png&#x27;</span>, <span class="string">&#x27;c.png&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> src = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random * imgs.length);</span><br><span class="line"><span class="keyword">var</span> imgidObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgid&#x27;</span>);</span><br><span class="line">imgidOb.src = imgs[src];</span><br></pre></td></tr></table></figure>
<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><ul>
<li>属性</li>
<li>方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dObj = <span class="keyword">new</span> Data();</span><br><span class="line">year = dObj.getFullYear();</span><br><span class="line">month = dObj.getMonth()+<span class="number">1</span>; <span class="comment">//月份从0开始</span></span><br><span class="line">day  =  dObj.getDate();</span><br><span class="line">hours = dObj.getHours();</span><br><span class="line">minutes = dObj.getMintues();</span><br><span class="line">second = dObj.getSeconds(); </span><br><span class="line">week = dObj.getDay(); <span class="comment">//第一天是0，从周日开始，周几</span></span><br></pre></td></tr></table></figure>
<ul>
<li>秒表示例 (程序运行时就开始获取时间)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clock &#123;</span><br><span class="line">    widht:300px;</span><br><span class="line">    height:100px;</span><br><span class="line">    background:#272822;</span><br><span class="line">    border-redius:20px;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top:50%;</span><br><span class="line">    left:50%;</span><br><span class="line">    margin-top:-50px;  </span><br><span class="line">    margin-left:-150px;</span><br><span class="line">    color:#0f0;</span><br><span class="line">    line-height:100px;</span><br><span class="line">    text-align:center;</span><br><span class="line">    font-size:50px;</span><br><span class="line">    fond-weight:bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clock:hover &#123;</span><br><span class="line">    color:#0ff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clock&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//document.title = timestr; // html标题 title </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> sidObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sid&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    sidObj.innerHTML = getTime();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定时器</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       sidObj.innerHTML = getTime();</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getTime</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        dObj = <span class="keyword">new</span> Data();</span></span><br><span class="line"><span class="javascript">        hours = addZero(dObj.getHours());</span></span><br><span class="line"><span class="javascript">        minutes = addZero(dObj.getMintues());</span></span><br><span class="line"><span class="javascript">        seconds = addZero(dObj.getSeconds()); </span></span><br><span class="line"><span class="javascript">        timestr = hours+<span class="string">&quot;:&quot;</span>+minutes+<span class="string">&quot;:&quot;</span>+seconds; </span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> timestr;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">addZero</span>(<span class="params">str</span>) </span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (str &lt; <span class="number">10</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span>+str;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li>属性 length</li>
<li>方法<ul>
<li>indexOf()</li>
<li>lastIndexOf()</li>
<li>substr(start,length)</li>
<li>slice(start, end) // <strong>不包含 end 位字符串</strong></li>
<li>split(reg) //字符串分隔</li>
<li>toUpperCase() //转大写</li>
<li>toLowerCase() //转小写</li>
<li>search(reg) // 查找字符在字符串中的位置</li>
<li>match(reg)  // 查找某个字符串，第一次找到就不会继续查找</li>
<li>replace(reg, ‘str’) //第一个出现的匹配</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str = <span class="string">&#x27;/home/code/img/index.html&#x27;</span>;</span><br><span class="line">pos = str.indexOf(<span class="string">&#x27;/&#x27;</span>); <span class="comment">//查找 / 出现的位置</span></span><br><span class="line">last = str.lastIndexOf(<span class="string">&#x27;/&#x27;</span>); <span class="comment">//最后一次出现的位置</span></span><br><span class="line">file = str.substr(last+<span class="number">1</span>); <span class="comment">// file = index.html</span></span><br><span class="line">dir = str.substr(<span class="number">0</span>, last);</span><br><span class="line"></span><br><span class="line">str2 = <span class="string">&#x27;2010-10-10&#x27;</span>;</span><br><span class="line">arr = str2.split(<span class="string">&#x27;-&#x27;</span>); <span class="comment">// arr type array</span></span><br><span class="line"></span><br><span class="line">str3 = <span class="string">&#x27;linux is linux very much linux&#x27;</span>;</span><br><span class="line">str4 = str.search(<span class="string">&#x27;is&#x27;</span>); </span><br><span class="line"></span><br><span class="line">str5 = str3.replace(<span class="regexp">/linux/g</span>, <span class="string">&#x27;php&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>验证码强制输入大写</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">verifyObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;verify&#x27;</span>);</span><br><span class="line">verifyObj.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="built_in">this</span>.value.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><ul>
<li>页面图片旋转</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//create</span></span><br><span class="line">sObj = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line">v = <span class="number">10</span>;</span><br><span class="line">sObj = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// time 单位是毫秒</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(sObj); <span class="comment">//避免定时器叠加执行</span></span><br><span class="line">    s += v;</span><br><span class="line">    imgid.style.transform = <span class="string">&#x27;rotate(&#x27;</span>+ s + <span class="string">&#x27;deg)&#x27;</span>;</span><br><span class="line">&#125;, time);</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete</span></span><br><span class="line"><span class="built_in">clearInterval</span>(sObj);</span><br></pre></td></tr></table></figure>
<ul>
<li>3秒倒计时</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#redirect &#123;</span><br><span class="line">    heigth:50px;</span><br><span class="line">    line-height:50px;</span><br><span class="line">    backgroud:#272822;</span><br><span class="line">    color:#fff;</span><br><span class="line">    border-radius:5px;</span><br><span class="line">    padding-left:10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#second &#123;</span><br><span class="line">    font-weight:bold;</span><br><span class="line">    font-size:18px;</span><br><span class="line">    color:#0f0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;redirect&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户注册成功，页面</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;second&#x27;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span>秒后即将跳转。。。。。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    second = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;second&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    s = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    v = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    sObj = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        s -= v;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (s == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            cleanInterval(sObj);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//url 跳转</span></span></span><br><span class="line"><span class="javascript">            location = <span class="string">&#x27;http://jixiaoxiao.com&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            second.innerHTML = s;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="超时器"><a href="#超时器" class="headerlink" title="超时器"></a>超时器</h2><p><strong>等几秒钟后执行某一个事件</strong></p>
<ul>
<li>3秒跳转</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">secondObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;second&#x27;</span>);</span><br><span class="line">tObj = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    location = <span class="string">&#x27;http://jixiaoxiao.com&#x27;</span>;</span><br><span class="line">&#125;, <span class="number">3000</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(tObj);</span><br></pre></td></tr></table></figure>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><div class="table-container">
<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>查找单个字符，除了换行和行结束符。</td>
</tr>
<tr>
<td>\w</td>
<td>查找单词字符。（数字、字母、下划线）</td>
</tr>
<tr>
<td>\W</td>
<td>查找非单词字符。</td>
</tr>
<tr>
<td>\d</td>
<td>查找数字。</td>
</tr>
<tr>
<td>\D</td>
<td>查找非数字字符。</td>
</tr>
<tr>
<td>\s</td>
<td>查找空白字符。</td>
</tr>
<tr>
<td>\S</td>
<td>查找非空白字符。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界。</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界。</td>
</tr>
<tr>
<td>\0</td>
<td>查找 NUL 字符。</td>
</tr>
<tr>
<td>\n</td>
<td>查找换行符。</td>
</tr>
<tr>
<td>\f</td>
<td>查找换页符。</td>
</tr>
<tr>
<td>\r</td>
<td>查找回车符。</td>
</tr>
<tr>
<td>\t</td>
<td>查找制表符。</td>
</tr>
<tr>
<td>\v</td>
<td>查找垂直制表符。</td>
</tr>
<tr>
<td>\xxx</td>
<td>查找以八进制数 xxx 规定的字符。</td>
</tr>
<tr>
<td>\xdd</td>
<td>查找以十六进制数 dd 规定的字符。</td>
</tr>
<tr>
<td>\uxxxx</td>
<td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><div class="table-container">
<table>
<thead>
<tr>
<th>量词</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td>n+</td>
<td>匹配任何包含至少一个 n 的字符串。</td>
</tr>
<tr>
<td>n*</td>
<td>匹配任何包含零个或多个 n 的字符串。</td>
</tr>
<tr>
<td>n?</td>
<td>匹配任何包含零个或一个 n 的字符串。</td>
</tr>
<tr>
<td>n{X}</td>
<td>匹配包含 X 个 n 的序列的字符串。</td>
</tr>
<tr>
<td>n{X,Y}</td>
<td>匹配包含 X 至 Y 个 n 的序列的字符串。</td>
</tr>
<tr>
<td>n{X,}</td>
<td>匹配包含至少 X 个 n 的序列的字符串。</td>
</tr>
<tr>
<td>n$</td>
<td>匹配任何结尾为 n 的字符串。</td>
</tr>
<tr>
<td>^n</td>
<td>匹配任何开头为 n 的字符串。</td>
</tr>
<tr>
<td>?=n</td>
<td>匹配任何其后紧接指定字符串 n 的字符串。</td>
</tr>
<tr>
<td>?!n</td>
<td>匹配任何其后没有紧接指定字符串 n 的字符串。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h3><div class="table-container">
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>[abc]</td>
<td>查找方括号之间的任何字符。</td>
</tr>
<tr>
<td><sup><a href="#fn_abc" id="reffn_abc">abc</a></sup></td>
<td>查找任何不在方括号之间的字符。</td>
</tr>
<tr>
<td>[0-9]</td>
<td>查找任何从 0 至 9 的数字。</td>
</tr>
<tr>
<td>[a-z]</td>
<td>查找任何从小写 a 到小写 z 的字符。</td>
</tr>
<tr>
<td>[A-Z]</td>
<td>查找任何从大写 A 到大写 Z 的字符。</td>
</tr>
<tr>
<td>[A-z]</td>
<td>查找任何从大写 A 到小写 z 的字符。</td>
</tr>
<tr>
<td>(z)</td>
<td>查找任何指定的选项。</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>z = red|blue|green</li>
</ul>
<h3 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h3><div class="table-container">
<table>
<thead>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>执行对大小写不敏感的匹配。</td>
</tr>
<tr>
<td>g</td>
<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>
</tr>
<tr>
<td>m</td>
<td>执行多行匹配。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><ul>
<li><p>支持正则表达式的字符串方法</p>
<ul>
<li>search()</li>
<li>split()</li>
<li>match()</li>
<li>replace()</li>
</ul>
</li>
<li><p>例子</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将 2016-02-02 替换成 2016/02.02</span></span><br><span class="line">str = <span class="string">&#x27;2016-02-02&#x27;</span>;</span><br><span class="line"><span class="comment">// $1 = 206</span></span><br><span class="line"><span class="comment">// $2 = 02</span></span><br><span class="line"><span class="comment">// $3 = 02</span></span><br><span class="line">str2 = str.replace(<span class="regexp">/(\d+)-(\d+)-(\d+)/</span>,<span class="string">&#x27;$1/$2.$3&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 密码长度 (8位以上)</span></span><br><span class="line">rues = <span class="regexp">/^\w&#123;8,&#125;$/</span></span><br><span class="line"><span class="comment">// 邮箱格式</span></span><br><span class="line">rules = <span class="regexp">/^\w+@\w+\.\w+$/</span></span><br><span class="line"><span class="comment">// 手机格式</span></span><br><span class="line">rules = <span class="regexp">/^123\d&#123;8&#125;$/</span></span><br></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li>属性<ul>
<li>length</li>
</ul>
</li>
<li>方法<ul>
<li>join() // 把数组连接成字符串</li>
<li>pop()  // 删除数组中的最后一个元素，数组会改变，返回删除的值</li>
<li>push() // 添加元素到数组的最后一个元素，数组会改变， 会返回新数组的长度</li>
<li>shift() // 删除数组中的第一个元素，数组会改变</li>
<li>unshift() // 添加元素到数组第一个元素，数组会改变</li>
<li>reverse() // 逆序数组中的元素，数组翻转</li>
<li>concat() // 两个数组进行合并</li>
<li>slice(start, end) //不包括end 索引的值</li>
<li>sort()</li>
<li>splice(start, length,[a,b,c]) //会改变原数组的值, a,b,c会添补会原来数组的相应位置</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">56</span>,<span class="number">4</span>,<span class="number">44</span>,<span class="number">66</span>,<span class="number">33</span>]</span><br><span class="line">arr.sort(show);</span><br><span class="line"><span class="function"><span class="title">show</span>(<span class="params">a, b</span>)</span> &#123; </span><br><span class="line">  <span class="keyword">return</span> a-b; <span class="comment">// 正序 </span></span><br><span class="line">  <span class="keyword">return</span> b-a 倒序</span><br><span class="line">&#125;</span><br><span class="line">alert(arr); <span class="comment">//原数组会改变</span></span><br></pre></td></tr></table></figure>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">触发事件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">鼠标事件</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">onclick</td>
<td style="text-align:center">鼠标点击某个对象</td>
</tr>
<tr>
<td style="text-align:center">ondblclick</td>
<td style="text-align:center">鼠标双击某个对象</td>
</tr>
<tr>
<td style="text-align:center">onmousedown</td>
<td style="text-align:center">某个鼠标按键被按下,未放开</td>
</tr>
<tr>
<td style="text-align:center">onmouseup</td>
<td style="text-align:center">某个鼠标按键被按下后放开</td>
</tr>
<tr>
<td style="text-align:center">onmousemove</td>
<td style="text-align:center">鼠标被移动</td>
</tr>
<tr>
<td style="text-align:center">onmouseleave</td>
<td style="text-align:center">鼠标移开</td>
</tr>
<tr>
<td style="text-align:center">onmouseenter</td>
<td style="text-align:center">鼠标移入</td>
</tr>
<tr>
<td style="text-align:center">键盘事件事件</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">onkeydown</td>
<td style="text-align:center">某个键盘的键被按下 （document）</td>
</tr>
<tr>
<td style="text-align:center">onkeypress</td>
<td style="text-align:center">某个键盘的键被按下或按住</td>
</tr>
<tr>
<td style="text-align:center">onkeyup</td>
<td style="text-align:center">某个键盘的键被松开</td>
</tr>
<tr>
<td style="text-align:center">表单事件</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">onblur</td>
<td style="text-align:center">元素失去焦点</td>
</tr>
<tr>
<td style="text-align:center">onfocus</td>
<td style="text-align:center">元素获得焦点</td>
</tr>
<tr>
<td style="text-align:center">onselect</td>
<td style="text-align:center">文本被选定</td>
</tr>
<tr>
<td style="text-align:center">onsubmit</td>
<td style="text-align:center">提交按钮被点击</td>
</tr>
<tr>
<td style="text-align:center">onreset</td>
<td style="text-align:center">重置按钮被点击</td>
</tr>
<tr>
<td style="text-align:center">onchange</td>
<td style="text-align:center">用户改变域的内容</td>
</tr>
<tr>
<td style="text-align:center">窗口事件</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">onload</td>
<td style="text-align:center">某个页面或图像被完成加载</td>
</tr>
<tr>
<td style="text-align:center">onresize</td>
<td style="text-align:center">窗口或框架被调整尺寸</td>
</tr>
<tr>
<td style="text-align:center">onscroll</td>
<td style="text-align:center">窗口滚动</td>
</tr>
<tr>
<td style="text-align:center">其他事件</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">onabort</td>
<td style="text-align:center">图像加载被中断</td>
</tr>
<tr>
<td style="text-align:center">onerror</td>
<td style="text-align:center">当加载文档或图像时发生某个错误</td>
</tr>
<tr>
<td style="text-align:center">onunload</td>
<td style="text-align:center">用户退出页面</td>
</tr>
<tr>
<td style="text-align:center">oncontextmenu</td>
<td style="text-align:center">右键打开菜单</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>鼠标点击类型: event.button</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&#x27;dai.png&#x27;</span> id=<span class="string">&#x27;imgid&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">imgObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgid&#x27;</span>);</span><br><span class="line"></span><br><span class="line">imgObj.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//0代表鼠标左键，1代表鼠标中间滚轮键，2代表鼠标右键</span></span><br><span class="line">    alert(event.button); <span class="comment">// 0，1，2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>坐标： event.clienX;event.ClientY;</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//鼠标移动、图片追随 </span></span><br><span class="line">    img &#123;</span><br><span class="line">        <span class="attr">cursor</span>:pointer;</span><br><span class="line">        position:absolute;</span><br><span class="line">        top:0px;</span><br><span class="line">        left:0px;</span><br><span class="line">        width:100px;</span><br><span class="line">        height:100px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;img src=<span class="string">&#x27;dai.png&#x27;</span> id=<span class="string">&#x27;imgid&#x27;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    imgObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgid&#x27;</span>);</span><br><span class="line">    <span class="comment">//整个文档绑定事件</span></span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        x = event.clientX + <span class="number">20</span>;</span><br><span class="line">        y = event.clientY + <span class="number">20</span>;</span><br><span class="line">        imgObj.style.left = x+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        imgObj.style.top = y+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<ul>
<li>键盘码: event.keyCode</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上下左右键实现图片移动</span></span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">    <span class="attr">cursor</span>:pointer;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top:0px;</span><br><span class="line">    left:0px;</span><br><span class="line">    width:100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&#x27;dai.png&#x27;</span> id=<span class="string">&#x27;imgid&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">imgObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgid&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可视屏幕的高、宽</span></span><br><span class="line">screenWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">screenHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片移动的有效距离</span></span><br><span class="line">ableWidth = screenWidth - <span class="number">100</span>;  <span class="comment">//向右</span></span><br><span class="line">ableHeight = screenHeight - <span class="number">100</span>; <span class="comment">//向下</span></span><br><span class="line"></span><br><span class="line">yL = <span class="number">0</span>;</span><br><span class="line">yG = <span class="number">10</span>; <span class="comment">//步长</span></span><br><span class="line"></span><br><span class="line">xL = <span class="number">0</span>;</span><br><span class="line">xG = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    ek = event.keyCode;</span><br><span class="line">    <span class="keyword">switch</span> (ek) &#123;</span><br><span class="line">        <span class="comment">//左</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">            xL -= xG;</span><br><span class="line">            <span class="keyword">if</span> (xL &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                xL = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            imgObj.style.top = xL + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//上    </span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">            yL -= yG;</span><br><span class="line">            <span class="keyword">if</span> (yL &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                yL = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            imgObj.style.top = yL + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//右    </span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">            xL += xG;</span><br><span class="line">            <span class="keyword">if</span> (xL &gt;= ableWidth) &#123;</span><br><span class="line">                xL = ableWidth;</span><br><span class="line">            &#125;</span><br><span class="line">            imgObj.style.top = xL + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//下    </span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">            yL += yG;</span><br><span class="line">            <span class="keyword">if</span> (yL &gt;= ableHeight) &#123;</span><br><span class="line">                yL = ableHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            imgObj.style.top = yL + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弹力球</span></span><br><span class="line">img &#123;</span><br><span class="line">    <span class="attr">cursor</span>:pointer;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top:0px;</span><br><span class="line">    left:0px;</span><br><span class="line">    width:100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&#x27;dai.png&#x27;</span> id=<span class="string">&#x27;imgid&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">imgObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgid&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可视屏幕的高、宽</span></span><br><span class="line">screenWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">screenHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片移动的有效距离</span></span><br><span class="line">ableWidth = screenWidth - <span class="number">100</span>;  <span class="comment">//向右</span></span><br><span class="line">ableHeight = screenHeight - <span class="number">100</span>; <span class="comment">//向下</span></span><br><span class="line"></span><br><span class="line">yL = <span class="number">0</span>;</span><br><span class="line">yG = <span class="number">20</span>; <span class="comment">//步长</span></span><br><span class="line"></span><br><span class="line">xL = <span class="number">0</span>;</span><br><span class="line">xG = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    ek = event.keyCode;</span><br><span class="line">    <span class="keyword">if</span> (ek == <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//上下</span></span><br><span class="line">            yL += yG;</span><br><span class="line">            <span class="keyword">if</span> (yL &gt;= ableHeight) &#123;</span><br><span class="line">                yL = ableHeight;</span><br><span class="line">                yG = -yG;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (yL &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                yL = <span class="number">0</span>;</span><br><span class="line">                yG = -yG;</span><br><span class="line">            &#125;</span><br><span class="line">            imgObj.style.top = yL + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//左右</span></span><br><span class="line">            xL += xG;</span><br><span class="line">            <span class="keyword">if</span> (xL &gt;= ableWidth) &#123;</span><br><span class="line">                xL = ableWidth;</span><br><span class="line">                xG = -xG;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (xL &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                xL = <span class="number">0</span>;</span><br><span class="line">                xG = -xG;</span><br><span class="line">            &#125;</span><br><span class="line">            imgObj.style.left = xL + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<ul>
<li>css样式在js中以驼峰样式书写</li>
<li>窗口事件 <strong>高度</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 获取图片的宽度和高度可以放在 window.onload 事件中获取</span></span><br><span class="line">   &lt;img src=<span class="string">&#x27;dai.png&#x27;</span> id=<span class="string">&#x27;imgid&#x27;</span>&gt;</span><br><span class="line">   imgObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgid&#x27;</span>);</span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       h = imgObj.clientHeight;</span><br><span class="line">       w = imgObj.clientWidth;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 可视窗口的高度</span></span><br><span class="line">   screenHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 屏幕（文档）总高度</span></span><br><span class="line">   sumHeight = <span class="built_in">document</span>.documentElement.scrollHeight;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 滚动的高</span></span><br><span class="line">   scrollHeight = <span class="built_in">document</span>.documentElement.scrollTop; <span class="comment">//firefox、IE</span></span><br><span class="line">   </span><br><span class="line">   scrollHeight = <span class="built_in">document</span>.body.scrollTop; <span class="comment">//chrome</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//解决 scrollHeight 兼容性问题</span></span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">       rules = <span class="regexp">/chrome|firefox|trident/i</span>;</span><br><span class="line">       explore = navigator.userAgent <span class="comment">//浏览器内核</span></span><br><span class="line">       <span class="keyword">if</span> (explore.match(<span class="regexp">/chrome/i</span>)) &#123;</span><br><span class="line">           alert(<span class="string">&#x27;谷歌浏览器&#x27;</span>);</span><br><span class="line">           scrollHeight = <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (explore.match(<span class="regexp">/firefox/i</span>)) &#123;</span><br><span class="line">           alert(<span class="string">&#x27;火狐浏览器&#x27;</span>);</span><br><span class="line">           scrollHeight = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (explore.match(<span class="regexp">/Tridnet/i</span>)) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;IE浏览器&#x27;</span>); </span><br><span class="line">           scrollHeight = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<ul>
<li>页面回到顶部 </li>
</ul>
<p>思路是： 当滚动的高超过某个限制后，点击回到顶部事件后，将滚动高度设置为0，就会跳转到顶部</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回到顶部时缓慢进行</span></span><br><span class="line"></span><br><span class="line">topObj.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    scrollTop = <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">    v = -<span class="number">20</span>;</span><br><span class="line">    sObj = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        scrollTop += v;</span><br><span class="line">        <span class="keyword">if</span> (scrollTop &lt;=<span class="number">0</span>) &#123;</span><br><span class="line">            scrollTop = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">clearInterval</span>(sObj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.body.scrollTop = scrollTop;</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>取消浏览器右键菜单默认功能</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//可以自定义右键菜单</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>php 获取图片源码，迟加载</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sleep(<span class="number">5</span>); <span class="number">5</span>秒</span><br><span class="line">readfile(<span class="string">&#x27;a.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="BOM-和-DOM"><a href="#BOM-和-DOM" class="headerlink" title="BOM 和 DOM"></a>BOM 和 DOM</h2><h3 id="BOM-浏览器对象"><a href="#BOM-浏览器对象" class="headerlink" title="BOM (浏览器对象)"></a>BOM (浏览器对象)</h3><h4 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h4><ul>
<li>属性<ul>
<li>frames</li>
<li>opener</li>
<li>top</li>
</ul>
</li>
</ul>
<ul>
<li>方法<ul>
<li>open()</li>
<li>alert()</li>
<li>confirm()</li>
<li>prompt()</li>
<li>setInterval()</li>
<li>clearInterval()</li>
<li>setTimeout()</li>
<li>clearTimeout()</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">windown.open(); <span class="comment">//浏览器默认阻拦此事件</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> <span class="comment">//链接无法跳转</span></span><br></pre></td></tr></table></figure>
<h4 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h4><ul>
<li>浏览器特性</li>
<li>属性<ul>
<li>userAgent</li>
</ul>
</li>
</ul>
<h4 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h4><ul>
<li>客户端屏幕</li>
<li>属性<ul>
<li>width</li>
<li>heigth</li>
<li>availWidth</li>
<li>availHeight //有效高（不包括任务栏高度）</li>
</ul>
</li>
</ul>
<h4 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h4><ul>
<li>历史对象</li>
<li>属性</li>
<li>方法<ul>
<li>back()</li>
<li>go(lG) // 前进、后退的步长</li>
<li>forward()</li>
</ul>
</li>
</ul>
<h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><ul>
<li>地址栏对象</li>
<li>属性<ul>
<li>href // 地址</li>
<li>hash // 捕捉地址栏锚点</li>
<li>host // 主机名</li>
<li>pathname // 目录结构</li>
<li>protocol // 访问协议</li>
<li>search // 地址栏中的相关参数</li>
</ul>
</li>
</ul>
<ul>
<li>方法<ul>
<li>reload()</li>
</ul>
</li>
</ul>
<h3 id="document对象（DOM对象）"><a href="#document对象（DOM对象）" class="headerlink" title="document对象（DOM对象）"></a>document对象（DOM对象）</h3><ul>
<li>文档对象</li>
</ul>
<ul>
<li>属性<ul>
<li>document.documentElement  // <html></li>
<li>document.head</li>
<li>document.title</li>
<li>document.body  // <body></li>
</ul>
</li>
</ul>
<ul>
<li>方法<ul>
<li>document.getElementById()</li>
<li>document.getElementsByName() // object Nodelist <a> \<input name=''></li>
<li>document.getElementsByTagName()</li>
<li>document.getElementsByClassName() // object Collection</li>
</ul>
</li>
</ul>
<h2 id="获取对象属性"><a href="#获取对象属性" class="headerlink" title="获取对象属性"></a>获取对象属性</h2><ul>
<li>标签自定义的</li>
<li>标准  <code>obj.id</code></li>
<li><strong>非标准</strong> 或 <strong>标准</strong> 统一方法  <code>obj.getAttribute()</code></li>
</ul>
<h2 id="元素对象js属性"><a href="#元素对象js属性" class="headerlink" title="元素对象js属性"></a>元素对象js属性</h2><ul>
<li>obj.innerHTML // 获取标签内部的值</li>
<li>obj.outerHTML // 获取标签本身</li>
<li>obj.tagName;</li>
<li>obj.textContent; // 不包括内部的标签</li>
<li>this</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;<span class="number">1</span>&lt;/h1&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>6<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">h1Obj = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;h1Obj.length;i++) &#123;</span><br><span class="line">    h1Obj[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//h1Obj 是定值，可以使用 h1Obj.style.....</span></span><br><span class="line">    <span class="comment">//h1Obj 是变值，必须使用 this</span></span><br><span class="line">        <span class="built_in">this</span>.style.backgroud = <span class="string">&#x27;#ccc&#x27;</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<ul>
<li>图片循环点击切换</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&#x27;dai.png&#x27;</span> id=<span class="string">&#x27;imgid&#x27;</span>&gt;</span><br><span class="line">imgObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgid&#x27;</span>);</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">imgObj.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.src = <span class="string">&#x27;cai.png&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.src = <span class="string">&#x27;dai.png&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="DOM-元素示例"><a href="#DOM-元素示例" class="headerlink" title="DOM 元素示例"></a>DOM 元素示例</h3><ul>
<li>移入移除特效</li>
<li>循环点击换色</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;<span class="number">1</span>&lt;/h1&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">h1Obj = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;h1Obj.length;i++) &#123;</span><br><span class="line">    h1Obj[i].setAttribute(<span class="string">&#x27;s&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    h1Obj[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        s = <span class="built_in">parseInt</span>(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;s&#x27;</span>));</span><br><span class="line">        <span class="keyword">if</span> (s % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.style.backgroud = <span class="string">&#x27;#ccc&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.style.backgroud = <span class="string">&#x27;#fff&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setAttribute(<span class="string">&#x27;s&#x27;</span>, s+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>点击换行号</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;aa&lt;/h1&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>cc<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">h1Obj = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;h1Obj.length;i++) &#123;</span><br><span class="line">    h1Obj[i].setAttribute(<span class="string">&#x27;s&#x27;</span>, i+<span class="number">1</span>);</span><br><span class="line">    h1Obj[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        s = <span class="built_in">this</span>.getAttribute(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.innerHTML = s;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>点击标题切换内容</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;linux&lt;/h1&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>linux is very much is very much linux is very much linux is very muchlinux is very much<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>php<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>php is very much php is very much  php is very much php is very much <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>mysql is very much mysql is very much mysql is very much mysql is very much<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">h1Obj = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">pObj  = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;h1Obj.length;i++) &#123;</span><br><span class="line">    <span class="comment">// 计数，点击时判断是显示还是隐藏</span></span><br><span class="line">    h1Obj[i].setAttribute(<span class="string">&#x27;m&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 和 p 标签 形成关联</span></span><br><span class="line">    h1Obj[i].setAttribute(<span class="string">&#x27;n&#x27;</span>, i);</span><br><span class="line">    </span><br><span class="line">    pObj[i].setAttribute(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;p&#x27;</span> + i);</span><br><span class="line">    </span><br><span class="line">    h1Obj[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        m = <span class="built_in">parseInt</span>(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;m&#x27;</span>));</span><br><span class="line">        n = <span class="built_in">this</span>.getAttribute(<span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        p = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p&#x27;</span>+n);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            p.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.setAttribute(<span class="string">&#x27;m&#x27;</span>, i+<span class="number">1</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<ul>
<li>多选、反选和全不选</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;请选择以下选项: &lt;/h2&gt;</span><br><span class="line">&lt;form action=&#x27;&#x27;&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;lable&gt;&lt;input type=&#x27;checkbox&#x27; class=&quot;chk&quot;&gt; Linux &lt;/lable&gt;</span><br><span class="line">    &lt;/p&gt;   </span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;lable&gt;&lt;input type=&#x27;checkbox&#x27; class=&quot;chk&quot;&gt; php &lt;/lable&gt;</span><br><span class="line">    &lt;/p&gt; </span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;lable&gt;&lt;input type=&#x27;checkbox&#x27; class=&quot;chk&quot;&gt; laravel &lt;/lable&gt;</span><br><span class="line">    &lt;/p&gt; </span><br><span class="line">    &lt;p&gt;    </span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;全选&quot; id=&quot;btn1&quot;&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot;  value=&quot;全不选&quot; id=&quot;btn2&quot;&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot;  value=&quot;反选&quot; id=&quot;btn3&quot;&gt;</span><br><span class="line">    &lt;/p&gt;    </span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;  </span><br><span class="line">btn1Obj = document.getElementById(&#x27;btn1&#x27;);</span><br><span class="line"></span><br><span class="line">btn2Obj = document.getElementById(&#x27;btn2&#x27;);</span><br><span class="line"></span><br><span class="line">btn3Obj = document.getElementById(&#x27;btn3&#x27;);</span><br><span class="line"></span><br><span class="line">chkObj =  document.getElementsByTagName(&#x27;chk&#x27;);</span><br><span class="line"></span><br><span class="line">//全选</span><br><span class="line">    btn1Obj.onclick = function () &#123;</span><br><span class="line">        for (i=0;i&lt;chkObj.length;i++) &#123;</span><br><span class="line">            // i 0-3</span><br><span class="line">            chkObj[i].checked = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //全不选</span><br><span class="line">    btn2Obj.onclick = function () &#123;</span><br><span class="line">        for (i=0;i&lt;chkObj.length;i++) &#123;</span><br><span class="line">            // i 3-0</span><br><span class="line">            chkObj[i].checked = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //反选 true-false false-true</span><br><span class="line">    btn3Obj.onclick = function () &#123;</span><br><span class="line">        for (i=0;i&lt;chkObj.length;i++) &#123;</span><br><span class="line">            chkObj[i].checked = ! chkObj[i].checked;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;    </span><br></pre></td></tr></table></figure>
<ul>
<li>选水果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">select &#123;</span><br><span class="line">    <span class="attr">height</span>:150px;</span><br><span class="line">    width:100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;请选择你喜欢的水果: &lt;/h2&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span> <span class="attr">size</span> =<span class="string">&#x27;2&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;南瓜&quot;</span>&gt;</span>南瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;冬瓜&quot;</span>&gt;</span>冬瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;面包&quot;</span>&gt;</span>面包<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bth&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&gt;&gt;&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;s2&quot;</span> <span class="attr">size</span> =<span class="string">&#x27;2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">s1Obj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;s1&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">s2Obj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;s2&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">btnObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">btnObj.onclick  = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 被选中的索引值 0开始</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    s1Index = s1Obj.selectedIndex;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//options</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    s1Opt = s1Obj.options;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    out = s1Opt[s1Index];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    s2Obj.add(out);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>       </span></span><br></pre></td></tr></table></figure>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ajax object</span></span><br><span class="line">xhr  = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">&#x27;method&#x27;</span>,url,<span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">open(method,url,async)</td>
<td style="text-align:center">method：请求的类型；GET 或 POST; url：文件在服务器上的位置 ;   async：true（异步）或 false（同步）</td>
</tr>
<tr>
<td style="text-align:center">send(string)</td>
<td style="text-align:center">string：仅用于 POST 请求</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>GET</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;demo_get.asp&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;demo_get2.asp?fname=Bill&amp;lname=Gates&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>POST</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">xmlhttp.open(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;demo_post.asp&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 form-post</span></span><br><span class="line">xmlhttp.open(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;ajax_test.asp&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xmlhttp.send(<span class="string">&quot;fname=Bill&amp;lname=Gates&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>URL<ul>
<li>参数是服务器上文件的地址</li>
</ul>
</li>
</ul>
<ul>
<li>异步 - <strong>True</strong> 或 <strong>False</strong>？<ul>
<li>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true：</li>
<li>Async = true</li>
<li>Async = false<ul>
<li>很少使用，不建议使用</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：</span></span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)  &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;test1.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><ul>
<li>获取响应值<ul>
<li>xmlHttp.responseText;  // 获得字符串形式的响应数据。</li>
<li>xmlHttp.responseXML;   // 获得 XML 形式的响应数据。</li>
</ul>
</li>
</ul>
<h3 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h3><ul>
<li>readyState 等于 4 且状态为 200 时，表示响应已就绪：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">onreadystatechange</td>
<td style="text-align:center">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td>
</tr>
<tr>
<td style="text-align:center">readyState</td>
<td style="text-align:center">0: 请求未初始化; 1: 服务器连接已建立; 2: 请求已接收; 3: 请求处理中; 4: 请求已完成，且响应已就绪</td>
</tr>
<tr>
<td style="text-align:center">status</td>
<td style="text-align:center">200: “OK” ; 404: 未找到页面</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Callback-函数"><a href="#Callback-函数" class="headerlink" title="Callback 函数"></a>Callback 函数</h3><ul>
<li>callback 函数是一种以参数形式传递给另一个函数的函数。</li>
<li>例子</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript"><span class="comment">//callback 函数</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params">url,cfunc</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span></span><br><span class="line"><span class="javascript">        xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// code for IE6, IE5</span></span></span><br><span class="line"><span class="javascript">        xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    xmlhttp.onreadystatechange=cfunc;</span></span><br><span class="line"><span class="javascript">    xmlhttp.open(<span class="string">&quot;GET&quot;</span>,url,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    xmlhttp.send();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">    loadXMLDoc(<span class="string">&quot;/ajax/test1.txt&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)  &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).innerHTML=xmlhttp.responseText;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Let AJAX change this text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>通过 AJAX 改变内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="ajax-示例"><a href="#ajax-示例" class="headerlink" title="ajax 示例"></a>ajax 示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;table width=<span class="string">&quot;1000px&quot;</span> border=<span class="string">&quot;1px&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">    &lt;?php</span><br><span class="line">        <span class="function"><span class="title">foreach</span>(<span class="params">$data <span class="keyword">as</span> $key =&gt; $value</span>)</span> &#123;</span><br><span class="line">            echo <span class="string">&quot;&lt;tr id=&#x27;tr&#123;$value[&#x27;id&#x27;]&#125;&#x27;&gt;&quot;</span>;</span><br><span class="line">            echo <span class="string">&quot;&lt;td&gt;&#123;$value[&#x27;id&#x27;]&#125;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            echo <span class="string">&quot;&lt;td&gt;&#123;$value[&#x27;username&#x27;]&#125;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            echo <span class="string">&quot;&lt;td&gt;&#123;$value[&#x27;password&#x27;]&#125;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            echo <span class="string">&quot;&lt;td&gt;&lt;a href=&quot;</span>javascript:<span class="string">&quot; id=&quot;</span>&#123;$value[<span class="string">&#x27;id&#x27;</span>]&#125;<span class="string">&quot; class=&quot;</span>del<span class="string">&quot;&gt;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            echo <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    ?    </span><br><span class="line">    &lt;/tr&gt;    </span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">delObj = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;del&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;delObj.length;i++) &#123;</span><br><span class="line">    delObj[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        id = <span class="built_in">this</span>.id;</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取通讯结果的返回值</span></span><br><span class="line">        xhr.onreadstatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 服务器处理完请求</span></span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                xs = xhr.reponseText;</span><br><span class="line">                <span class="comment">// 约定值</span></span><br><span class="line">                <span class="keyword">if</span> (xs == <span class="number">1</span>) &#123;</span><br><span class="line">                    trObj = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tr&#x27;</span>+id);</span><br><span class="line">                    trObj.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//准备参数</span></span><br><span class="line">        xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;delete.php?id=&#x27;</span>+id,<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//发起请求</span></span><br><span class="line">        xhr.send();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql知识汇总篇</title>
    <url>/article/mysql-knowledge/</url>
    <content><![CDATA[<h2 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h2><p>通过<strong>apt-get install</strong> 方式安装完MySQL后，在 <strong>/etc/mysql/</strong> 目录下有一个<font color="red">debian.cnf</font>配置文件,文件内容是一个配置好权限的登录用户和密码;<br>不知道root用户密码，需要用这个配置好的用户名和密码登录到数据库中去修改root的用户名和密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br><span class="line">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure>
<p>好了,已经可以成功进入数据库了,接下来查看一下root用户的配置项<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select user,host, authentication_string from mysql.user where user=&#x27;root&#x27;;</span><br><span class="line">+------+-----------+-----------------------+</span><br><span class="line">| user | host      | authentication_string |</span><br><span class="line">+------+-----------+-----------------------+</span><br><span class="line">| root | localhost |                       |</span><br><span class="line">+------+-----------+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><br>发现密码的那一项是空的,第一反应是不是在终端输入 <code>msyql -u root -p</code> 然后回车,心里美滋滋的以为可以用root用户登录了,但是现实很残酷啊,<br>终端会给你提示验证错误,是不是一脸蒙蔽了,手动狗头,mysql中看一个用户的配置除了上面的查看项还需要知道有一个plugin字段,这个里面放置了当前用户的加密插件,mysql内置了很多的插件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show plugins;</span><br><span class="line">+---------------------------------+----------+--------------------+----------------+---------+</span><br><span class="line">| Name                            | Status   | Type               | Library        | License |</span><br><span class="line">+---------------------------------+----------+--------------------+----------------+---------+</span><br><span class="line">| binlog                          | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| mysql_native_password           | ACTIVE   | AUTHENTICATION     | NULL           | GPL     |</span><br><span class="line">| sha256_password                 | ACTIVE   | AUTHENTICATION     | NULL           | GPL     |</span><br><span class="line">| caching_sha2_password           | ACTIVE   | AUTHENTICATION     | NULL           | GPL     |</span><br><span class="line">| sha2_cache_cleaner              | ACTIVE   | AUDIT              | NULL           | GPL     |</span><br><span class="line">| CSV                             | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| MEMORY                          | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| InnoDB                          | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| INNODB_TRX                      | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMP                      | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMP_RESET                | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMPMEM                   | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMPMEM_RESET             | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMP_PER_INDEX            | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMP_PER_INDEX_RESET      | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_BUFFER_PAGE              | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_BUFFER_PAGE_LRU          | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_BUFFER_POOL_STATS        | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_TEMP_TABLE_INFO          | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_METRICS                  | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_DEFAULT_STOPWORD      | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_DELETED               | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_BEING_DELETED         | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_CONFIG                | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_INDEX_CACHE           | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_INDEX_TABLE           | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_TABLES                   | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_TABLESTATS               | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_INDEXES                  | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_TABLESPACES              | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_COLUMNS                  | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_VIRTUAL                  | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CACHED_INDEXES           | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_SESSION_TEMP_TABLESPACES | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| MyISAM                          | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| MRG_MYISAM                      | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| PERFORMANCE_SCHEMA              | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| TempTable                       | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| ARCHIVE                         | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| BLACKHOLE                       | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| FEDERATED                       | DISABLED | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| ngram                           | ACTIVE   | FTPARSER           | NULL           | GPL     |</span><br><span class="line">| mysqlx_cache_cleaner            | ACTIVE   | AUDIT              | NULL           | GPL     |</span><br><span class="line">| mysqlx                          | ACTIVE   | DAEMON             | NULL           | GPL     |</span><br><span class="line">| auth_socket                     | ACTIVE   | AUTHENTICATION     | auth_socket.so | GPL     |</span><br><span class="line">+---------------------------------+----------+--------------------+----------------+---------+</span><br><span class="line">45 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><br>我们再一次查看root用户的插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select user,host,authentication_string,plugin from mysql.user where user=&#x27;root&#x27;;</span><br><span class="line">+------------------+-----------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">| user             | host      | authentication_string                                                  | plugin                |</span><br><span class="line">+------------------+-----------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">| root             | localhost |                                                                        | auth_socket           |</span><br><span class="line">+------------------+-----------+------------------------------------------------------------------------+-----------------------+</span><br></pre></td></tr></table></figure>
<p>通过以上的SQL结果我们可以看出 root用户的密码验证插件使用的auth_socket方式,简单地来介绍一个这个插件：</p>
<ul>
<li>第一点：这种验证方式不需要输入密码,即使你好奇输入了密码它也不会进行验证</li>
<li>第二点：这种只能通过uninx的socket方式登录,什么意思呢,就是说只能本地连接,不支持远程连接,而且这种方式在用户登录数据库之前已经通过了操作 系统层级的安全验证</li>
<li>第三点：当前要登录数据库的用户名和操作系统的用户名一致.举个例子来说,在这个场景下你要登录数据库的root用户你就必须把你操作系统的用户 切换到root用户中去才能登录</li>
</ul>
<p>现在我们已经清楚了问题所在,近接下来改root用户对应的plugin就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+-------------------------+</span><br><span class="line">| version()               |</span><br><span class="line">+-------------------------+</span><br><span class="line">| 8.0.23-0ubuntu0.20.04.1 |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update mysql.user set plugin =&#x27;caching_sha2_password&#x27; where user=&#x27;root&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select user,host,authentication_string,plugin from mysql.user where user=&#x27;root&#x27;;</span><br><span class="line">+------+-----------+-----------------------+-----------------------+</span><br><span class="line">| user | host      | authentication_string | plugin                |</span><br><span class="line">+------+-----------+-----------------------+-----------------------+</span><br><span class="line">| root | localhost |                       | caching_sha2_password |</span><br><span class="line">+------+-----------+-----------------------+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里改成<font color="red">caching_sha2_password</font>这个插件是mysql官方默认的auth插件使用的这个,接下来使用<code>shell mysql -u root -p</code><br>回车就可以直接进入数据库了,到此数据库的root用户密码修改完成了<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><br>这里将root用户的密码设置为123456</p>
<h2 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+-------------------------+</span><br><span class="line">| version()               |</span><br><span class="line">+-------------------------+</span><br><span class="line">| 8.0.23-0ubuntu0.20.04.1 |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#x27;password%&#x27;;</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">| Variable_name            | Value |</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">| password_history         | 0     |</span><br><span class="line">| password_require_current | OFF   |</span><br><span class="line">| password_reuse_interval  | 0     |</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>password_history = 3, 新密码不能和前面三次的密码相同<br>password_require_current = ON, 默认是OFF,开启后用户修改密码时需要提供当前的密码,root用户不需要提供<br>password_reuse_interval = 60, 新密码不能和前面60天内使用的密码相同</p>
<h2 id="密码策略"><a href="#密码策略" class="headerlink" title="密码策略"></a>密码策略</h2><p>mysql 密码策略相关参数：</p>
<ul>
<li>validate_password_check_user_name 设置为ON的时候表示能将密码设置成当前用户名</li>
<li>validate_password_length 固定密码的总长度；</li>
<li>validate_password_dictionary_file 指定密码验证的文件路径；</li>
<li>validate_password_mixed_case_count 整个密码中至少要包含大/小写字母的总个数；</li>
<li>validate_password_number_count 整个密码中至少要包含阿拉伯数字的个数；</li>
<li>validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；</li>
<li>validate_password_policy 指定密码的强度验证等级，默认为 MEDIUM；<br>关于 validate_password.policy 的取值：<br>0/LOW：只验证长度；<br>1/MEDIUM：验证长度、数字、大小写、特殊字符；<br>2/STRONG：验证长度、数字、大小写、特殊字符、字典文件；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;validate_password%&#x27;;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>当前环境下mysql的默认密码策略都是未设置,出现这种返回结果是validate这个插件没有安装导致的,参考下一节的插件管理,安装好插件后再次查看<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show plugins;</span><br><span class="line">+---------------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">| Name                            | Status   | Type               | Library              | License |</span><br><span class="line">+---------------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">| binlog                          | ACTIVE   | STORAGE ENGINE     | NULL                 | GPL     |</span><br><span class="line">********************************************************************************</span><br><span class="line">| validate_password               | ACTIVE   | VALIDATE PASSWORD  | validate_password.so | GPL     |</span><br><span class="line">| auth_socket                     | ACTIVE   | AUTHENTICATION     | auth_socket.so       | GPL     |</span><br><span class="line">+---------------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">46 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><br>现在可以看到validate_password这个插件成功加载了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;validate_password%&#x27;;</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password_check_user_name    | ON     |</span><br><span class="line">| validate_password_dictionary_file    |        |</span><br><span class="line">| validate_password_length             | 8      |</span><br><span class="line">| validate_password_mixed_case_count   | 1      |</span><br><span class="line">| validate_password_number_count       | 1      |</span><br><span class="line">| validate_password_policy             | MEDIUM |</span><br><span class="line">| validate_password_special_char_count | 1      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h2><p>查看系统已经加载的插件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show plugins;</span><br><span class="line">+---------------------------------+----------+--------------------+----------------+---------+</span><br><span class="line">| Name                            | Status   | Type               | Library        | License |</span><br><span class="line">+---------------------------------+----------+--------------------+----------------+---------+</span><br><span class="line">| binlog                          | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| mysql_native_password           | ACTIVE   | AUTHENTICATION     | NULL           | GPL     |</span><br><span class="line">| sha256_password                 | ACTIVE   | AUTHENTICATION     | NULL           | GPL     |</span><br><span class="line">| caching_sha2_password           | ACTIVE   | AUTHENTICATION     | NULL           | GPL     |</span><br><span class="line">| sha2_cache_cleaner              | ACTIVE   | AUDIT              | NULL           | GPL     |</span><br><span class="line">| CSV                             | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| MEMORY                          | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| InnoDB                          | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| INNODB_TRX                      | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMP                      | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMP_RESET                | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMPMEM                   | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMPMEM_RESET             | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMP_PER_INDEX            | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CMP_PER_INDEX_RESET      | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_BUFFER_PAGE              | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_BUFFER_PAGE_LRU          | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_BUFFER_POOL_STATS        | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_TEMP_TABLE_INFO          | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_METRICS                  | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_DEFAULT_STOPWORD      | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_DELETED               | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_BEING_DELETED         | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_CONFIG                | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_INDEX_CACHE           | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_FT_INDEX_TABLE           | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_TABLES                   | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_TABLESTATS               | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_INDEXES                  | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_TABLESPACES              | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_COLUMNS                  | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_VIRTUAL                  | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_CACHED_INDEXES           | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| INNODB_SESSION_TEMP_TABLESPACES | ACTIVE   | INFORMATION SCHEMA | NULL           | GPL     |</span><br><span class="line">| MyISAM                          | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| MRG_MYISAM                      | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| PERFORMANCE_SCHEMA              | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| TempTable                       | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| ARCHIVE                         | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| BLACKHOLE                       | ACTIVE   | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| FEDERATED                       | DISABLED | STORAGE ENGINE     | NULL           | GPL     |</span><br><span class="line">| ngram                           | ACTIVE   | FTPARSER           | NULL           | GPL     |</span><br><span class="line">| mysqlx_cache_cleaner            | ACTIVE   | AUDIT              | NULL           | GPL     |</span><br><span class="line">| mysqlx                          | ACTIVE   | DAEMON             | NULL           | GPL     |</span><br><span class="line">| auth_socket                     | ACTIVE   | AUTHENTICATION     | auth_socket.so | GPL     |</span><br><span class="line">+---------------------------------+----------+--------------------+----------------+---------+</span><br><span class="line">45 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>查看插件加载目录<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;plugin_dir&#x27;;</span><br><span class="line">+---------------+------------------------+</span><br><span class="line">| Variable_name | Value                  |</span><br><span class="line">+---------------+------------------------+</span><br><span class="line">| plugin_dir    | /usr/lib/mysql/plugin/ |</span><br><span class="line">+---------------+------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><font color="red">安装的插件必须要已经存在于数据库的插件配置目录中</font>

<p>第一种：通过配置文件在启动时加载插件, 需要在mysqld配置项下面添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~$ sudo service mysql stop</span><br></pre></td></tr></table></figure>
<p>修改mysqld配置项, 文件位置 <strong>/etc/mysql/mysql.conf.d/mysqld.cnf</strong><br>[mysqld]<br>plugin-load-add = validate_password.so<br>validate-password = FORCE_PLUS_PERMANENT<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xiaoxiao@xiaoxiao:~$ sudo service mysql start</span><br><span class="line">xiaoxiao@xiaoxiao:~$ ps -ef | grep mysql | grep -v &quot;grep&quot;</span><br><span class="line">mysql     828802       1 14 16:56 ?        00:00:00 /usr/sbin/mysqld</span><br></pre></td></tr></table></figure><br>登录到数据库中运行 <code>&gt; show plugins;</code> 就可以看到validate_password这个插件已经成功加载了</p>
<p>第二种 ：在MySQL运行时注册插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> install plugin validate_password soname <span class="string">&#x27;validate_password.so&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<p>validate_password.so 这个后缀文件根据你使用的操作系统来决定的</p>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; uninstall plugin validate_password;</span><br><span class="line">&gt; show plugins;</span><br></pre></td></tr></table></figure>
<h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>第一处需要修改的地方是MySQL配置文件项 <strong>bind-address</strong>，这个是MySQL服务的监听地址，默认是监听的本地</p>
<p>第二处是配置一个远程登录的连接用户</p>
<p>接下来是操作<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.conf</span><br><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; create user &#x27;remote&#x27;@&#x27;192.168.56.%&#x27; identified by &#x27;remote_pass&#x27;;</span><br><span class="line">&gt; grant all privileges on *.* to &#x27;remote&#x27;@&#x27;192.168.56.%&#x27;;</span><br><span class="line">&gt; flush privileges ;</span><br></pre></td></tr></table></figure></p>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>psr</title>
    <url>/article/psr/</url>
    <content><![CDATA[<p><a href="https://laravel-china.org/docs/psr" title="PSR-Laravel_china">参考</a></p>
<h2 id="PSR-0-自动加载规范-舍弃"><a href="#PSR-0-自动加载规范-舍弃" class="headerlink" title="PSR-0 自动加载规范 (舍弃)"></a>PSR-0 自动加载规范 (舍弃)</h2><p> 说明</p>
<ul>
<li>一个标准的命名空间（namespace）与 类（class）名称的定义应该符合以下结构：<br><code>\&lt;Vendor Name&gt;\(&lt;Namespace&gt;\)*(&lt;Class Name&gt;)</code></li>
</ul>
<blockquote>
<p>Vendor Name 是每一个命名空间的顶级命名空间名；</p>
<p>每个命名空间下面可以有多个子命名空间名；</p>
<p>根据完整的命名空间名从文件系统中载入类文件时，每一个命名空间之间的分隔符都会被转换成文件夹路径分隔符;</p>
<p>类名称中的每个 _ 字符也会被转换成文件夹路径分隔符，而命名空间中的 _ 字符则是无特殊含义的;</p>
<p>当从文件系统中载入标准的命名空间或类时，都将添加 .php 为目标文件后缀；</p>
<p>组织名称(Vendor Name)、命名空间(Namespace) 以及 类的名称(Class Name) 可由任意大小写字母组成。</p>
</blockquote>
<ul>
<li>命名空间、类名 不包含下划线</li>
</ul>
<blockquote>
<p>\Doctrine\Common\IsolatedClassLoader =&gt; /path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php</p>
<p>\Symfony\Core\Request =&gt; /path/to/project/lib/vendor/Symfony/Core/Request.php</p>
<p>\Zend\Acl =&gt; /path/to/project/lib/vendor/Zend/Acl.php</p>
<p>\Zend\Mail\Message =&gt; /path/to/project/lib/vendor/Zend/Mail/Message.php</p>
</blockquote>
<ul>
<li>命名空间、类名 包含下划线</li>
</ul>
<blockquote>
<p>\namespace\package\Class_Name =&gt; /path/to/project/lib/vendor/namespace/package/Class/Name.php</p>
<p>\namespace\package_name\Class_Name =&gt; /path/to/project/lib/vendor/namespace/package_name/Class/Name.php</p>
</blockquote>
<p> 实现<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span>(<span class="params"><span class="variable">$className</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$className</span> = ltrim(<span class="variable">$className</span>, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="variable">$fileName</span>  = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$namespace</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$lastNsPos</span> = strrpos(<span class="variable">$className</span>, <span class="string">&#x27;\\&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable">$namespace</span> = substr(<span class="variable">$className</span>, <span class="number">0</span>, <span class="variable">$lastNsPos</span>);</span><br><span class="line">        <span class="variable">$className</span> = substr(<span class="variable">$className</span>, <span class="variable">$lastNsPos</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$fileName</span>  = str_replace(<span class="string">&#x27;\\&#x27;</span>, DIRECTORY_SEPARATOR, <span class="variable">$namespace</span>) . DIRECTORY_SEPARATOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$fileName</span> .= str_replace(<span class="string">&#x27;_&#x27;</span>, DIRECTORY_SEPARATOR, <span class="variable">$className</span>) . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">require</span> <span class="variable">$fileName</span>;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(<span class="string">&#x27;autoload&#x27;</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="PSR-1-基础代码规范"><a href="#PSR-1-基础代码规范" class="headerlink" title="PSR-1 基础代码规范"></a>PSR-1 基础代码规范</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul>
<li>PHP 代码文件 必须 以 &lt;?php 或 &lt;?= 标签开始;</li>
<li>PHP 代码文件 必须 以 不带 BOM 的 UTF-8 编码；</li>
<li>PHP 代码中 应该 只定义类、函数、常量等声明，或其他会产生 副作用 的操作（如：生成文件输出以及修改 .ini 配置文件等），二者只能选其一；</li>
<li>命名空间以及类 必须 符合 PSR 的自动加载规范： [PSR-0（已废弃）或 PSR-4] 中的一个。</li>
<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范；</li>
<li>类中的常量所有字母都 必须 大写，单词间用下划线分隔；</li>
<li>方法名称 必须 符合 camelCase 式的小写开头驼峰命名规范</li>
</ul>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul>
<li><p>PHP 标签</p>
</li>
<li><p>PHP 代码 必须 使用 &lt;?php ?&gt; 长标签 或 &lt;?= ?&gt; 短输出标签；一定不可 使用其它自定义标签</p>
</li>
<li><p>字符集编码</p>
<ul>
<li>PHP代码 必须 且只可使用 不带 BOM 的 UTF-8 编码</li>
</ul>
</li>
<li><p>副作用</p>
<ul>
<li><p>一份 PHP 文件中 应该 要不就只定义新的声明，如类、函数或常量等不产生 副作用 的操作，要不就只书写会产生 副作用 的逻辑操作，但 不该 同时具有两者。</p>
</li>
<li><p>「副作用」(side effects) 一词的意思是，仅仅通过包含文件，不直接声明类、函数和常量等，而执行的逻辑操作。</p>
</li>
<li><p>「副作用」包含却不仅限于：生成输出，明确使用require或include，连接到外部服务，修改ini设置，发出错误或异常，修改全局或静态变量，读取或写入一个文件，等等。</p>
</li>
</ul>
</li>
<li><p>命名空间和类名</p>
<ul>
<li>命名空间和类名 必须 遵循『自动加载』规范： [PSR-0， PSR-4]。</li>
<li>这意味着每个类都独立为一个文件，并且至少在一个层次的命名空间内，那就是：顶级组织名（vendor name）。</li>
<li>类名 必须 以类似 StudlyCaps 形式的大写开头的驼峰命名方式声明。</li>
<li>PHP 5.3 及更高版本的代码 必须 使用正式的命名空间</li>
<li>PHP 5.2 及更低版本 应该 使用伪命名空间，约定俗成，以顶级组织名称 Vendor_ 为类名前缀</li>
</ul>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// php 5.3 及更高版本</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// php 5.2.x 及更旧的版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vendor_Model_Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>类的常量、属性和方法</li>
<li>类的常量中所有字母都 必须 大写，词间以下划线分隔。<ul>
<li>类的属性命名 可以 遵循：<ul>
<li>大写开头的驼峰式 ($StudlyCaps)</li>
<li>小写开头的驼峰式 ($camelCase) </li>
<li>下划线分隔式 ($under_score)</li>
</ul>
</li>
<li>方法名称 必须 符合 camelCase() 式的小写开头驼峰命名规范</li>
</ul>
</li>
</ul>
<h2 id="PSR-2-编码风格规范"><a href="#PSR-2-编码风格规范" class="headerlink" title="PSR-2 编码风格规范"></a>PSR-2 编码风格规范</h2><h3 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h3><ul>
<li>代码 必须 遵循 [PSR-1] 中的编码规范 。</li>
<li>代码 必须 使用 4 个空格符而不是「Tab 键」进行缩进。</li>
<li>每行的字符数 应该 软性保持在 80 个之内，理论上 一定不可 多于 120 个，但 一定不可 有硬性限制。</li>
<li>每个 namespace 命名空间声明语句和 use 声明语句块后面，必须 插入一个空白行。</li>
<li>类的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>
<li>方法的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>
<li>类的属性和方法 必须 添加访问修饰符（private、protected 以及 public），abstract 以及 final 必须 声明在访问修饰符之前，而 static 必须 声明在访问修饰符之后。</li>
<li>控制结构的关键字后 必须 要有一个空格符，而调用方法或函数时则 一定不可 有。</li>
<li>控制结构的开始花括号（{） 必须 写在声明的同一行，而结束花括号（}） 必须 写在主体后自成一行。</li>
<li><p>控制结构的开始左括号后和结束右括号前，都 一定不可 有空格符</p>
<p>示例</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> <span class="keyword">implements</span> <span class="title">FooInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span> === <span class="variable">$b</span>) &#123;</span><br><span class="line">            bar();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$a</span> &gt; <span class="variable">$b</span>) &#123;</span><br><span class="line">            <span class="variable">$foo</span>-&gt;bar(<span class="variable">$arg1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BazClass::bar(<span class="variable">$arg2</span>, <span class="variable">$arg3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="通则"><a href="#通则" class="headerlink" title="通则"></a>通则</h3><p> 2.1 基本编码规则</p>
<ul>
<li><p>代码 必须 符合 PSR-1 中的所有规范。</p>
<p>2.2 文件</p>
</li>
<li>所有 PHP 文件 必须 使用 Unix LF (linefeed) 作为行的结束符。</li>
<li>所有 PHP 文件 必须 以一个空白行作为结束。</li>
<li><p>纯 PHP 代码文件 必须 省略最后的 ?&gt; 结束标签。</p>
<p>2.3 行</p>
</li>
<li>行的长度 一定不可 有硬性的约束。</li>
<li>软性的长度约束 必须 要限制在 120个字符以内，若超过此长度，</li>
<li>带代码规范检查的编辑器 必须 要发出警告，不过 一定不可 发出错误提示。</li>
<li>每行 不该 多于80个字符，大于80字符的行 应该 折成多行。</li>
<li>非空行后 一定不可 有多余的空格符。</li>
<li>空行 可以 使得阅读代码更加方便以及有助于代码的分块。</li>
<li><p>每行 一定不可 存在多于一条语句。</p>
<p>2.4 缩进</p>
</li>
<li><p>代码 必须 使用 4 个空格来进行缩进， 并且 一定不能 使用 tab 键来缩进。</p>
<blockquote>
<p>注：仅使用空格，而不是使用空格和 tab 键混在一起， 能帮助避免在查看代码差异，打补丁，查看提交历史，以及进行注解时产生问题。使用空格也使得代码对齐更轻松。</p>
</blockquote>
<p>2.5 关键字与 True/False/Null</p>
</li>
<li>PHP 的 关键字 必须 使用小写形式。</li>
<li>PHP 的常量 true， false， 还有 null 必须 使用小写形式。</li>
</ul>
<h3 id="命名空间和使用声明"><a href="#命名空间和使用声明" class="headerlink" title="命名空间和使用声明"></a>命名空间和使用声明</h3><ul>
<li>namespace 声明之后 必须 存在一个空行。</li>
<li>所有的 use 声明 必须 位于 namespace 声明之后。</li>
<li>每条 use 声明 必须 只有一个 use 关键字。</li>
<li>use 语句块之后 必须 存在一个空行</li>
</ul>
<h3 id="类、属性和方法"><a href="#类、属性和方法" class="headerlink" title="类、属性和方法"></a>类、属性和方法</h3><p>扩展与继承</p>
<ul>
<li>关键词 extends 和 implements 必须 写在类名称的同一行。</li>
<li>类的开始花括号 必须 独占一行，结束花括号也 必须 在类主体后独占一行。</li>
<li>implements 的继承列表也 可以 分成多行，这样的话，每个继承接口名称都 必须 分开独立成行，包括第一个。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooClass</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">    \<span class="title">ArrayAccess</span>,</span></span><br><span class="line"><span class="class">    \<span class="title">Countable</span>,</span></span><br><span class="line"><span class="class">    \<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里面是常量、属性、类方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 属性</p>
<ul>
<li>每个属性都 必须 添加访问修饰符。</li>
<li>一定不可 使用关键字 var 声明一个属性。</li>
<li>每条语句 一定不可 定义超过一个属性。</li>
<li>不该 使用下划线作为前缀，来区分属性是 protected 或 private。</li>
</ul>
<p>方法</p>
<ul>
<li>所有方法都 必须 添加访问修饰符。</li>
<li>不该 使用下划线作为前缀，来区分方法是 protected 或 private 访问修饰符。</li>
<li>方法名称后 一定不可 有空格符，其开始花括号 必须 独占一行，结束花括号也 必须 在方法主体后单独成一行。参数左括号后和右括号前 一定不可 有空格。</li>
</ul>
<p>方法的参数</p>
<ul>
<li>参数列表中，每个逗号后面 必须 要有一个空格，而逗号前面 一定不可 有空格。</li>
<li>有默认值的参数，必须 放到参数列表的末尾。</li>
<li>参数列表 可以 分列成多行，这样，包括第一个参数在内的每个参数都 必须 单独成行。</li>
<li>拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aVeryLongMethodName</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        ClassTypeHint <span class="variable">$arg1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        &amp;<span class="variable">$arg2</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">array</span> <span class="variable">$arg3</span> = []</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 方法主体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>abstract, final,和 static 关键字</p>
<ul>
<li>需要添加 abstract 或 final 声明时，必须 写在访问修饰符前，而 static 则 必须 写在其后。</li>
</ul>
<p>方法及函数调用</p>
<ul>
<li>方法及函数调用时，方法名或函数名与参数左括号之间 一定不可 有空格，参数右括号前也 一定不可 有空格。每个逗号前 一定不可 有空格，但其后 必须 有一个空格。</li>
<li>参数 可以 分列成多行，此时包括第一个参数在内的每个参数都 必须 单独成行。</li>
</ul>
<h3 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h3><p>基本规范</p>
<ul>
<li>控制结构关键词后 必须 有一个空格。</li>
<li>左括号 ( 后 一定不可 有空格。</li>
<li>右括号 ) 前也 一定不可 有空格。</li>
<li>右括号 ) 与开始花括号 { 间 必须 有一个空格。</li>
<li>结构体主体 必须 要有一次缩进。</li>
<li>结束花括号 } 必须 在结构体主体后单独成行。</li>
</ul>
<p>if，elseif, else<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$expr1</span>) &#123;</span><br><span class="line">    <span class="comment">// if body</span></span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$expr2</span>) &#123;</span><br><span class="line">    <span class="comment">// elseif body</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// else body;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>switch，case<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$expr</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;First case, with a break&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Second case, which falls through&#x27;</span>;</span><br><span class="line">        <span class="comment">// no break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Third case, return instead of break&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Default case&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>while, do while</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 结构体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 结构体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="variable">$expr</span>);</span><br></pre></td></tr></table></figure>
<p> for<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="comment">// for 循环主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> foreach<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$iterable</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="comment">// foreach 主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> try，catch<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// try 主体</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FirstExceptionType <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// catch 主体</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (OtherExceptionType <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// catch 主体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul>
<li>闭包声明时，关键词 function 后以及关键词 use 的前后都 必须 要有一个空格。</li>
<li>开始花括号 必须 写在声明的同一行，结束花括号 必须 紧跟主体结束的下一行。</li>
<li>参数列表和变量列表的左括号后以及右括号前，一定不可 有空格。</li>
<li>参数和变量列表中，逗号前 一定不可 有空格，而逗号后 必须 要有空格。</li>
<li>闭包中有默认值的参数 必须 放到列表的后面。</li>
<li>参数列表以及变量列表 可以 分成多行，这样，包括第一个在内的每个参数或变量都 必须 单独成行，而列表<br>的右括号与闭包的开始花括号 必须 放在同一行。</li>
</ul>
<h2 id="RSR-3-日志接口规范"><a href="#RSR-3-日志接口规范" class="headerlink" title="RSR-3 日志接口规范"></a>RSR-3 日志接口规范</h2><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p> 1.1 基本规范</p>
<ul>
<li><p>LoggerInterface 接口对外定义了八个方法，分别用来记录 RFC 5424 中定义的八个等级的日志：<strong>debug</strong>、 <strong>info</strong>、 <strong>notice</strong>、 <strong>warning</strong>、 <strong>error</strong>、 <strong>critical</strong>、 <strong>alert</strong> 以及 <strong>emergency</strong> 。</p>
</li>
<li><p>第九个方法 —— log，其第一个参数为记录的等级。可使用一个预先定义的等级常量作为参数来调用此方法，必须与直接</p>
<p>调用以上八个方法具有相同的效果。如果传入的等级常量参数没有预先定义，则 必须 抛出 Psr\Log\InvalidArgumentException 类型的异常。</p>
</li>
<li><p>在不确定的情况下，使用者 不该 使用未支持的等级常量来调用此方法</p>
<p>1.2 消息</p>
</li>
<li><p>以上每个方法都接受一个字符串类型或者是有 __toString() 方法的对象作为记录信息参数，这样，实现者就能把它当成字符串来处理，否则实现者必须自己把它转换成字符串。</p>
</li>
<li><p>记录信息参数 可以 携带占位符，实现者 可以 根据上下文将其它替换成相应的值。其中占位符 必须 与上下文数组中的键名保持一致。</p>
<p>占位符的名称 必须 由一个左花括号 { 以及一个右括号 } 包含。但花括号与名称之间 一定不可有空格符。占位符的名称 应该</p>
<p> 只由 A-Z、a-z、0-9、下划线 _、以及英文的句号 . 组成，其它字符作为将来占位符规范的保留。实现者 可以 通过对占位符采用不同的转义和转换策略，来生成最终的日志。而使用者在不知道上下文的前提下，不该提前转义占位符</p>
</li>
<li><p>示例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用上下文信息替换记录信息中的占位符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interpolate</span>(<span class="params"><span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 构建一个花括号包含的键名的替换数组</span></span><br><span class="line">    <span class="variable">$replace</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$context</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查该值是否可以转换为字符串</span></span><br><span class="line">        <span class="keyword">if</span> (!is_array(<span class="variable">$val</span>) &amp;&amp; (!is_object(<span class="variable">$val</span>) || method_exists(<span class="variable">$val</span>, <span class="string">&#x27;__toString&#x27;</span>))) &#123;</span><br><span class="line">            <span class="variable">$replace</span>[<span class="string">&#x27;&#123;&#x27;</span> . <span class="variable">$key</span> . <span class="string">&#x27;&#125;&#x27;</span>] = <span class="variable">$val</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换记录信息中的占位符，最后返回修改后的记录信息。</span></span><br><span class="line">    <span class="keyword">return</span> strtr(<span class="variable">$message</span>, <span class="variable">$replace</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 含有带花括号占位符的记录信息。</span></span><br><span class="line"><span class="variable">$message</span> = <span class="string">&quot;User &#123;username&#125; created&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有替换信息的上下文数组，键名为占位符名称，键值为替换值。</span></span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;bolivar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 &quot;Username bolivar created&quot;</span></span><br><span class="line"><span class="keyword">echo</span> interpolate(<span class="variable">$message</span>, <span class="variable">$context</span>);</span><br></pre></td></tr></table></figure>
<p>1.3 上下文</p>
</li>
<li><p>每个记录函数都接受一个上下文数组参数，用来装载字符串类型无法表示的信息。它可以装载任何信息，所以实现者必须确保能正确处理其装载的信息，<br>对于其装载的数据，一定不可抛出异常，或产生PHP出错、警告或提醒信息（error、warning、notice）。</p>
</li>
<li><p>如需通过上下文参数传入了一个 Exception 对象，必须 以 exception 作为键名。记录异常信息是很普遍的，所以如果它能够在记录类库的底层实现，<br>就能够让实现者从异常信息中抽丝剥茧。当然，实现者在使用它时，必须 确保键名为 exception 的键值是否真的是一个 Exception，毕竟它 可以 装载任何信息。</p>
<p>1.4 助手类和接口</p>
</li>
<li><p>Psr\Log\AbstractLogger 类使得只需继承它和实现其中的 log 方法，就能够很轻易地实现 LoggerInterface 接口，而另外八个方法就能够把记录信息和上下文信息传给它。</p>
</li>
<li>同样地，使用 Psr\Log\LoggerTrait 也只需实现其中的 log 方法。不过，需要特别注意的是，在 traits 可复用代码块还不能实现接口前，还需要 implement LoggerInterface。</li>
<li>在没有可用的日志记录器时，Psr\Log\NullLogger 接口 可以 为使用者提供一个备用的日志「黑洞」。不过，当上下文的构建非常消耗资源时，带条件检查的日志记录或许是更好的办法。</li>
<li>Psr\Log\LoggerAwareInterface 接口仅包括一个setLogger(LoggerInterface $logger) 方法，框架可以使用它实现自动连接任意的日志记录实例。</li>
<li>Psr\Log\LoggerAwareTrait trait可复用代码块可以在任何的类里面使用，只需通过它提供的 $this-&gt;logger，就可以轻松地实现等同的接口。Psr\Log\LogLevel 类装载了八个记录等级常量</li>
</ul>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul>
<li><p>接口和类的描述、相关的异常类以及用于验证你所写代码的测试套件都将作为psr/log包的一部分提供.</p>
<h3 id="Psr-Log-LoggerInterface"><a href="#Psr-Log-LoggerInterface" class="headerlink" title="Psr\Log\LoggerInterface"></a>Psr\Log\LoggerInterface</h3></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Psr</span>\<span class="title">Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述一个日志记录器实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该消息必须实现一个__toString()的字符串或者对象.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该消息可能包含以下形式的占位符: &#123;foo&#125;  </span></span><br><span class="line"><span class="comment"> * foo 将会被关键词 &quot;foo&quot;中的上下文数据替换.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 上下文数组可以包含任意数据, 我们只能假设代码实现者</span></span><br><span class="line"><span class="comment"> * 如果给出一个生成堆栈跟踪的异常实例, 那么它的键名</span></span><br><span class="line"><span class="comment"> * 必须为 &quot;exception&quot;。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 请前往 https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md</span></span><br><span class="line"><span class="comment"> * 查看完整的接口规范.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LoggerInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统无法使用。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">emergency</span>(<span class="params"><span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须立即采取行动。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 例如: 整个网站宕机了，数据库挂了，等等。 这应该</span></span><br><span class="line"><span class="comment">     * 发送短信通知警告你.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">alert</span>(<span class="params"><span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 临界条件。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 例如: 应用组件不可用，意外的异常。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">critical</span>(<span class="params"><span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运行时错误不需要马上处理，</span></span><br><span class="line"><span class="comment">     * 但通常应该被记录和监控。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"><span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 例外事件不是错误。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 例如: 使用过时的API，API使用不当，不合理的东西不一定是错误。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">warning</span>(<span class="params"><span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常但重要的事件.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notice</span>(<span class="params"><span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有趣的事件.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 例如: 用户登录，SQL日志。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params"><span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 详细的调试信息。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">debug</span>(<span class="params"><span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可任意级别记录日志。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$level</span>, <span class="variable">$message</span>, <span class="keyword">array</span> <span class="variable">$context</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Psr-Log-LoggerAwareInterface"><a href="#Psr-Log-LoggerAwareInterface" class="headerlink" title="Psr\Log\LoggerAwareInterface"></a>Psr\Log\LoggerAwareInterface</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Psr</span>\<span class="title">Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * logger-aware 定义实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LoggerAwareInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置一个日志记录实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> LoggerInterface $logger</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLogger</span>(<span class="params">LoggerInterface <span class="variable">$logger</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Psr-Log-LogLevel"><a href="#Psr-Log-LogLevel" class="headerlink" title="Psr\Log\LogLevel"></a>Psr\Log\LogLevel</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Psr</span>\<span class="title">Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志等级常量定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogLevel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> EMERGENCY = <span class="string">&#x27;emergency&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> ALERT     = <span class="string">&#x27;alert&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> CRITICAL  = <span class="string">&#x27;critical&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">ERROR</span>     = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> WARNING   = <span class="string">&#x27;warning&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> NOTICE    = <span class="string">&#x27;notice&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> INFO      = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> DEBUG     = <span class="string">&#x27;debug&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PSR-4-自动加载规范"><a href="#PSR-4-自动加载规范" class="headerlink" title="PSR-4 自动加载规范"></a>PSR-4 自动加载规范</h2><ol>
<li>总览</li>
</ol>
<ul>
<li><p>PSR-4 描述了从文件路径中 自动加载 类的规范。 它拥有非常好的兼容性，并且可以在任何自动加载规范中使用，包括 PSR-0。 PSR-4 规范也描述了放置 autoload 文件（就是我们经常引入的 vendor/autoload.php）的位置。</p>
<p>2.规范</p>
</li>
</ul>
<ol>
<li>术语「class」指的是类（classes）、接口（interfaces）、特征（traits）和其他类似的结构。</li>
</ol>
<ol>
<li>全限定类名具有以下形式：<blockquote>
<p><code>\&lt;NamespaceName&gt;(\&lt;SubNamespaceNames&gt;)*\&lt;ClassName&gt;</code></p>
</blockquote>
</li>
</ol>
<ul>
<li>全限定类名必须拥有一个顶级命名空间名称，也称为供应商命名空间（vendor namespace）。</li>
<li>全限定类名可以有一个或者多个子命名空间名称。</li>
<li>全限定类名必须有一个最终的类名（我想意思应该是你不能这样\<NamespaceName>(\<SubNamespaceNames>)*\来表示一个完整的类）。</li>
<li>下划线在全限定类名中没有任何特殊含义（在 PSR-0 中下划是有含义的）。</li>
<li>全限定类名可以是任意大小写字母的组合。</li>
<li>所有类名的引用必须区分大小写。</li>
</ul>
<ol>
<li><p>全限定类名的加载过程</p>
<ol>
<li>在全限定的类名（一个「命名称空间前缀」）中，一个或多个前导命名空间和子命名空间组成的连续命名空间，不包括前导命名空间的分隔符，至少对应一个「根目录」。</li>
<li>「名称空间前缀」后面的相邻子命名空间与根目录下的目录名称相对应（且必须区分大小写），其中名称空间的分隔符表示目录分隔符。</li>
<li><p>最终的类名与以.php结尾的文件名保持一致，这个文件的名字必须和最终的类名相匹配（意思就是如果类名是FooController，那么这个类所在的文件名必须是FooController.php）。</p>
</li>
<li><p>范例</p>
</li>
</ol>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Fully Qualified Class Name</th>
<th style="text-align:center">Namespace Prefix</th>
<th style="text-align:center">Base Directory</th>
<th style="text-align:center">Resulting File Path</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\Acme\Log\Writer\File_Writer</td>
<td style="text-align:center">Acme\Log\Writer</td>
<td style="text-align:center">./acme-log-writer/lib/</td>
<td style="text-align:center">./acme-log-writer/lib/File_Writer.php</td>
</tr>
</tbody>
</table>
</div>
<hr>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>psr</tag>
      </tags>
  </entry>
  <entry>
    <title>redis高可用之主从复制</title>
    <url>/article/redis-mmm-master-slave/</url>
    <content><![CDATA[<h2 id="单机问题"><a href="#单机问题" class="headerlink" title="单机问题"></a>单机问题</h2><p>&emsp;&emsp;我们通过学习Redis的持久化功能，即使服务器宕机了也会丢失少量的数据，但是如果这个服务器直接故障了呢？比如说硬盘坏了、系统崩溃等等，这样就不仅仅是造成数据丢失还有可能造成我们线上的业务直接挂掉。这也是单点服务器不安全的原因之一吧。</p>
<p>&emsp;&emsp;为了避免单机故障的发生，通常是将数据复制多个副本保存在不同的服务器上，这样即使其中有一台服务器发生故障了，其他的服务器也可以继续提供服务器保证业务正常运行，对此Redis提供了多种的高可用方案，包括主从复制、哨兵模式的主从复制以及集群模式，今天我们来说最基础的主从复制模式。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;在主从复制中有两种角色，一种是主库，一种是从库。主库可以进行读写操作，从库只能进行读操作(特殊情况下从库也能进行写操作，这个由参数slave-read-only指定)，从库只接收来自主库的数据，一个主库可以拥有多个从库，但是一个从库只能有一个主库，因此，我们可以看出主从模式是有两种，一种是一主多从另一种是链式复制，即某一个从库也可以作为其他的从库的主库。</p>
<p>&emsp;&emsp;默认情况下，每台Redis服务器都是主节点，且主节点可以没有从节点</p>
<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><a href="https://imgtu.com/i/cxkidK"><img src="https://z3.ax1x.com/2021/04/25/cxkidK.png" alt="cxkidK.png"></a></p>
<p><a href="https://imgtu.com/i/cxkAiD"><img src="https://z3.ax1x.com/2021/04/25/cxkAiD.png" alt="cxkAiD.png"></a></p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li>
<li>故障恢复：当主节点出现问题时，可以由从节点提供服务器，实现快速的故障恢复，它实际上是一种服务的冗余。</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，从节点提供读服务，分担服务器负载；尤其在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis的并发量。</li>
<li>高可用基础：它是哨兵模式和集群模式部署的基础。</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>&emsp;&emsp;主从复制过程大概可以分为以下3个阶段：</p>
<ul>
<li>建立链接阶段</li>
<li>数据同步阶段</li>
<li>命令广播阶段</li>
</ul>
<h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>&emsp;&emsp;当前阶段主要作用是在主从节点之间建立连接，为数据同步做好准备。</p>
<ol>
<li>保存主节点信息：在从节点服务器内部有两个字段，masterip和masterport，分别是指主库的IP和port信息；slaveof是异步的命令，从节点完成主节点IP和PORT的保存后，客户端会直接返回ok，但是实际上的复制是从当前之后才开始的</li>
<li>建立socket连接：从节点每秒1次调用复制定时函数replicationCron()，如果发现了有主节点可以连接，便会根据主节点的IP和port创建socket连接，连接成功后，<ol>
<li>从节点：为该socket建立一个专门处理复制工作的事件处理器，负责后续的复制工作，如接收rdb文件，接收命令广播等</li>
<li>主节点：接收到从节点的socket连接后，即accept后，为该socket创建相应的客户端状态，并将从节点看做是连接到主节点的一个客户端，后面的工作就是通过此连接来发送命令的请求方式来进行</li>
</ol>
</li>
<li>发送ping命令：从节点称为主节点的客户端之后，发送ping命令进行首次请求，为了检查socket的连接是否可用，以及主节点当前是否能够处理请求，从节点发送ping命令后有以下几种情况发生：<ol>
<li>返回pong，说明和主库的socket连接正常，且主节点当前可用处理请求，复制过程正常进行</li>
<li>超时：一定时间后从节点仍未收到主节点的回复，说明socket连接不可用，则从节点断开连接，并且重新连接主节点</li>
<li>其他结果：返回其他的结果，例如说正在处理超时运行的脚本，说明主节点当前无法处理命令，则从节点断开socket连接，并尝试重新连接</li>
</ol>
</li>
<li>身份验证：如果主节点配置了密码，从节点需要配置masterauth选项来进行身份验证，如果主节点没有配置密码就不需要设置此选项。进行身份验证时从节点通过向主节点发送auth命令进行，密码验证通过则复制功能进行执行，密码验证是吧，则从节点断开socket连接，并重连</li>
<li>发送从节点断开信息：身份认证后，从节点会向主节点发送其监听的端口号，主节点将该信息保存到该从节点对应的客户端的slave_listening_port字段中，该端口信息只是方便查看从节点的监听端口</li>
</ol>
<h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p>&emsp;&emsp;主从节点之间的连接建立以后，就可以开始数据同步工作了，首先便是从节点的数据初始化。具体的执行是从节点向主节点发送psync命令，开始进行同步</p>
<p>&emsp;&emsp;数据同步根据朱从节点的状态不同情况可以分为全量复制和部分复制。这里有个影响就行，后面专门说这两个</p>
<p>&emsp;&emsp;这一个阶段，主节点与从节点互为客户端，原因在于主节点从当前阶段开始需要主动向从节点发送请求传递命令数据，才能完成复制</p>
<h3 id="命令传播"><a href="#命令传播" class="headerlink" title="命令传播"></a>命令传播</h3><p>&emsp;&emsp;这个阶段主要是主节点将自己执行的写命令发送给从节点，从节点接收到命令并执行，从而保证主从节点数据的一致性</p>
<p>&emsp;&emsp;当然，除了发送写命令之外，主从节点还维持着心跳机制：PING和REPLCONF ACK</p>
<p>&emsp;&emsp;主节点发送命令是异步的过程，也就是说主节点发送写命令后不会等待从节点的回复；实际上，主从节点之间很难保持数据实时的一致性，延迟是一定会有的，但是这种不一致的具体情况要看主从节点之间的网络状况，主节点写命令的执行频率以及主节点中的repl-disable-tcp-nodelay的配置</p>
<p>&emsp;&emsp;repl-disable-tcp-nodelay no：这个用来控制主节点是否禁止与从节点的TCP_NODELAY，默认是no，即不禁止TCP_NODELAY。当设置为yes时，TCP会对包进行合并从而减少带宽，但是发送的频率会降低，从节点数据延迟增加，一致性会变差，这个发送频率的参数与linux内核的配置有关，默认配置是40ms，当设置为no时，TCP会立刻将主节点的数据发送给从节点，带宽增加但延迟变小，一般来说，只有当对应Redis数据不一致的容忍度较高时，且主从节点之间网络状况不好时，才会设置为yes，多数情况设置为no</p>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>&emsp;&emsp;在Redis2.8以前，从节点向主节点发送sync命令请求同步数据，此时的同步方式是全量复制；在Redis2.8及以后，从节点可以发送psync命令请求同步数据，此时根据主从节点当前状态的不同，同步方式可能是全量复制或部分复制</p>
<h3 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h3><p>Redis通过psync命令进行全量复制的过程如下：</p>
<p>（1）从节点判断无法进行部分复制，向主节点发送全量复制的请求；或从节点发送部分复制的请求，但主节点判断无法进行部分复制；</p>
<p>（2）主节点收到全量复制的命令后，执行bgsave，在后台生成RDB文件，并使用一个缓冲区（称为复制缓冲区）记录从现在开始执行的所有写命令</p>
<p>（3）主节点的bgsave执行完成后，将RDB文件发送给从节点；<strong>从节点首先清除自己的旧数据，然后载入接收的RDB文件</strong>，将数据库状态更新至主节点执行bgsave时的数据库状态</p>
<p>（4）主节点将复制缓冲区中的所有写命令发送给从节点，从节点执行这些写命令，将数据库状态更新至主节点的最新状态</p>
<p>（5）如果从节点开启了AOF，则会触发bgrewriteaof的执行，从而保证AOF文件更新至主节点的最新状态</p>
<h3 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h3><h4 id="复制偏移量"><a href="#复制偏移量" class="headerlink" title="复制偏移量"></a>复制偏移量</h4><p>&emsp;&emsp;主节点和从节点分别维护一个复制偏移量（offset），代表的是<strong>主节点向从节点传递的字节数</strong>；主节点每次向从节点传播N个字节数据时，主节点的offset增加N；从节点每次收到主节点传来的N个字节数据时，从节点的offset增加N。</p>
<p>&emsp;&emsp;offset用于判断主从节点的数据库状态是否一致：如果二者offset相同，则一致；如果offset不同，则不一致，此时可以根据两个offset找出从节点缺少的那部分数据。例如，如果主节点的offset是1000，而从节点的offset是500，那么部分复制就需要将offset为501-1000的数据传递给从节点。而offset为501-1000的数据存储的位置，就是下面要介绍的复制积压缓冲区</p>
<h4 id="复制积压缓冲区"><a href="#复制积压缓冲区" class="headerlink" title="复制积压缓冲区"></a>复制积压缓冲区</h4><p>&emsp;&emsp;<strong>复制积压缓冲区是由主节点维护的、固定长度的、先进先出(FIFO)队列，默认大小1MB；</strong>当主节点开始有从节点时创建，其作用是备份主节点最近发送给从节点的数据。<strong>无论主节点有一个还是多个从节点，都只需要一个复制积压缓冲区</strong>。</p>
<p>&emsp;&emsp;在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制积压缓冲区，作为写命令的备份；除了存储写命令，复制积压缓冲区中还存储了其中的每个字节对应的复制偏移量（offset）。由于复制积压缓冲区定长且是先进先出，所以它保存的是主节点最近执行的写命令；时间较早的写命令会被挤出缓冲区。</p>
<p>&emsp;&emsp;由于该缓冲区长度固定且有限，因此可以备份的写命令也有限，当主从节点offset的差距过大超过缓冲区长度时，将无法执行部分复制，只能执行全量复制。反过来说，为了提高网络中断时部分复制执行的概率，可以根据需要增大复制积压缓冲区的大小(通过配置repl-backlog-size)；例如如果网络中断的平均时间是60s，而主节点平均每秒产生的写命令(特定协议格式)所占的字节数为100KB，则复制积压缓冲区的平均需求为6MB，保险起见，可以设置为12MB，来保证绝大多数断线情况都可以使用部分复制。</p>
<p>从节点将offset发送给主节点后，主节点根据offset和缓冲区大小决定能否执行部分复制：</p>
<ul>
<li>如果offset偏移量之后的数据，仍然都在复制积压缓冲区里，则执行部分复制；</li>
<li>如果offset偏移量之后的数据已不在复制积压缓冲区中（数据已被挤出），则执行全量复制。</li>
</ul>
<h4 id="服务器运行ID-runid"><a href="#服务器运行ID-runid" class="headerlink" title="服务器运行ID(runid)"></a>服务器运行ID(runid)</h4><p>&emsp;&emsp;每个Redis节点(无论主从)，在启动时都会自动生成一个随机ID(每次启动都不一样)，由40个随机的十六进制字符组成；runid用来唯一识别一个Redis节点。通过info Server命令，可以查看节点的runid：<code>redis-cli info server | grep run_id</code></p>
<p>&emsp;&emsp;主从节点初次复制时，主节点将自己的runid发送给从节点，从节点将这个runid保存起来；当断线重连时，从节点会将这个runid发送给主节点；主节点根据runid判断能否进行部分复制：</p>
<ul>
<li>如果从节点保存的runid与主节点现在的runid相同，说明主从节点之前同步过，主节点会继续尝试使用部分复制(到底能不能部分复制还要看offset和复制积压缓冲区的情况)；</li>
<li>如果从节点保存的runid与主节点现在的runid不同，说明从节点在断线前同步的Redis节点并不是当前的主节点，只能进行全量复制。</li>
</ul>
<h2 id="开启主从"><a href="#开启主从" class="headerlink" title="开启主从"></a>开启主从</h2><p>从主复制的配置主要是在从节点发起的，不需要我们在主节点做什么配置，从节点开启主从复制有以下3种方式：</p>
<ul>
<li>配置文件</li>
</ul>
<p>在从服务器的配置文件中加入 <strong>slaveof <master_ip><master_port> </strong></p>
<ul>
<li>启动时添加参数</li>
</ul>
<p>redis-server启动命令时,<strong>—slaveof <master_ip> <master_port> </strong></p>
<ul>
<li>客户端执行命令</li>
</ul>
<p>redis服务启动后，可以在客户端执行<strong>slaveof <master_ip><master_port></strong>，则改Redis实例会变成从节点</p>
<h2 id="主从配置参数"><a href="#主从配置参数" class="headerlink" title="主从配置参数"></a>主从配置参数</h2><h3 id="主库"><a href="#主库" class="headerlink" title="主库"></a>主库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">#在slave和master同步后（发送psync/sync），后续的同步是否设置成TCP_NODELAY假如设置成yes，则redis会合并小的TCP包从而节省带宽，但会增加同步延（40ms），造成master与slave数据不一致假如设置成no，则redis master会立即发送同步数据，没有延迟#前者关注性能，后者关注一致性</span><br><span class="line"></span><br><span class="line">repl-ping-slave-period 10</span><br><span class="line">#从库会按照一个时间间隔向主库发送PING命令来判断主服务器是否在线，默认是10秒</span><br><span class="line"></span><br><span class="line">repl-backlog-size 1mb</span><br><span class="line">#复制积压缓冲区大小设置</span><br><span class="line"></span><br><span class="line">repl-backlog-ttl 3600</span><br><span class="line">#master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。</span><br><span class="line"></span><br><span class="line">min-slaves-to-write 3</span><br><span class="line">min-slaves-max-lag 10</span><br><span class="line">#设置某个时间断内，如果从库数量小于该某个值则不允许主机进行写操作，以上参数表示10秒内如果主库的从节点小于3个，则主库不接受写请求，min-slaves-to-write 0代表关闭此功能。</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">#作用于全量复制阶段，控制主节点是否使用diskless复制（无盘复制）。所谓diskless复制，是指在全量复制时，主节点不再先把数据写入RDB文件，而是直接写入slave的socket中，整个过程中不涉及硬盘；diskless复制在磁盘IO很慢而网速很快时更有优势。需要注意的是，截至Redis3.0，diskless复制处于实验阶段，默认是关闭的。</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">#该配置作用于全量复制阶段，当主节点使用diskless复制时，该配置决定主节点向从节点发送之前停顿的时间，单位是秒；只有当diskless复制打开时有效，默认5s。之所以设置停顿时间，是基于以下两个考虑：(1)向slave的socket的传输一旦开始，新连接的slave只能等待当前数据传输结束，才能开始新的数据传输 (2)多个从节点有较大的概率在短时间内建立主从复制。</span><br><span class="line">client-output-buffer-limit slave 256MB 64MB 60</span><br><span class="line">#全量复制阶段主节点的缓冲区大小</span><br></pre></td></tr></table></figure>
<h3 id="从库"><a href="#从库" class="headerlink" title="从库"></a>从库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt; </span><br><span class="line">#设置该数据库为其他数据库的从数据库</span><br><span class="line"></span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line">#主从复制中，设置连接master服务器的密码（前提master启用了认证）</span><br><span class="line"></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"># 当从库同主库失去连接或者复制正在进行，从库有两种运行方式：</span><br><span class="line"># 1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续相应客户端的请求</span><br><span class="line"># 2) 如果slave-serve-stale-data设置为no，除了INFO和SLAVOF命令之外的任何请求都会返回一个错误&quot;SYNC with master in progress&quot;</span><br><span class="line"></span><br><span class="line">slave-priority 100</span><br><span class="line">#当主库发生宕机时候，哨兵会选择优先级最高的一个称为主库，从库优先级配置默认100，数值越小优先级越高</span><br><span class="line"></span><br><span class="line">slave-read-only yes</span><br><span class="line">#从节点是否只读；默认yes只读，为了保持数据一致性，应保持默认</span><br><span class="line">repl-timeout 60</span><br><span class="line">#与各个阶段主从节点连接超时判断</span><br></pre></td></tr></table></figure>
<h2 id="psync命令"><a href="#psync命令" class="headerlink" title="psync命令"></a>psync命令</h2><p><a href="https://imgtu.com/i/gSWqKI"><img src="https://z3.ax1x.com/2021/04/26/gSWqKI.png" alt="gSWqKI.png"></a></p>
<p>1）首先，从节点根据当前状态，决定如何调用psync命令：</p>
<ul>
<li>如果从节点之前未执行过slaveof或最近执行了slaveof no one，则从节点发送命令为psync ? -1，向主节点请求全量复制；</li>
<li>如果从节点之前执行了slaveof，则发送命令为<strong>psync <runid> <offset></strong>，其中runid为上次复制的主节点的runid，offset为上次复制截止时从节点保存的复制偏移量。</li>
</ul>
<p>2）主节点根据收到的psync命令，及当前服务器状态，决定执行全量复制还是部分复制：</p>
<ul>
<li>如果主节点版本低于Redis2.8，则返回-ERR回复，此时从节点重新发送sync命令执行全量复制；</li>
<li>如果主节点版本够新，且runid与从节点发送的runid相同，且从节点发送的offset之后的数据在复制积压缓冲区中都存在，则回复+CONTINUE，表示将进行部分复制，从节点等待主节点发送其缺少的数据即可；</li>
<li>如果主节点版本够新，但是runid与从节点发送的runid不同，或从节点发送的offset之后的数据已不在复制积压缓冲区中(在队列中被挤出了)，则回复<strong>+FULLRESYNC <runid> <offset></strong>，表示要进行全量复制，其中runid表示主节点当前的runid，offset表示主节点当前的offset，从节点保存这两个值，以备使用。</li>
</ul>
<h2 id="psync2"><a href="#psync2" class="headerlink" title="psync2"></a>psync2</h2><p>&emsp;&emsp;redis4.0新版本除了增加混合持久化，还优化了psync（以下称psync2）并实现即使redis实例重启的情况下也能实现部分同步，下面主要介绍psync2实现过程。psync2在psync1基础上新增两个复制id,分别是master_replid和master_replid2</p>
<ul>
<li>master_replid: 复制id1(后文简称：replid1)，一个长度为41个字节(40个随机串+’0’)的字符串，每个redis实例都有，和runid没有直接关联，但和runid生成规则相同。当实例变为从实例后，自己的replid1会被主实例的replid1覆盖</li>
<li>master_replid2：复制id2(后文简称:replid2),默认初始化为全0，用于存储上次主实例的replid1</li>
</ul>
<p>在4.0之前的版本，redis复制信息完全丢失，所以每个实例重启后只能进行全量复制，到了4.0版本，任然可以使用部分同步，其实现过程：</p>
<p><strong>第一步：存储复制信息</strong></p>
<p>　　redis在关闭时，通过shutdown save,都会调用rdbSaveInfoAuxFields函数，把当前实例的repl-id和repl-offset保存到RDB文件中,当前的RDB存储的数据内容和复制信息是一致性的可通过redis-check-rdb命令查看。</p>
<p><strong>第二步：重启后加载RDB文件中的复制信息</strong></p>
<p>　　redis加载RDB文件，会专门处理文件中辅助字段(AUX fields）信息，把其中repl_id和repl_offset加载到实例中，分别赋给master_replid和master_repl_offset两个变量值，特别注意当从库开启了AOF持久化，redis加载顺序发生变化优先加载AOF文件，但是由于aof文件中没有复制信息，所以导致重启后从实例依旧使用全量复制！</p>
<p><strong>第三步：向主库上报复制信息，判断是否进行部分同步</strong></p>
<p>　　从实例向主库上报master_replid和master_repl_offset+1；从实例同时满足以下两条件，就可以部分重新同步，否则执行全量同步：</p>
<ul>
<li>从实例上报master_replid串，与主实例的master_replid1或replid2有一个相等，用于判断主从未发生改变；</li>
<li>从实例上报的master_repl_offset+1字节，还存在于主实例的复制积压缓冲区中，用于判断从库丢失部分是否在复制缓冲区中；</li>
</ul>
<p>psync2除了解决redis重启使用部分同步外，还为解决在主库故障时候从库切换为主库时候使用部分同步机制。redis从库默认开启复制积压缓冲区功能，以便从库故障切换变化master后，其他落后该从库可以从缓冲区中获取缺少的命令。该过程的实现通过两组replid、offset替换原来的master runid和offset变量实现：</p>
<ul>
<li><p>第一组：master_replid和master_repl_offset：如果redis是主实例，则表示为自己的replid和复制偏移量； 如果redis是从实例，则表示为自己主实例的replid1和同步主实例的复制偏移量。</p>
</li>
<li><p>第二组：master_replid2和second_repl_offset：无论主从，都表示自己上次主实例repid1和复制偏移量；用于兄弟实例或级联复制，主库故障切换psync。</p>
</li>
</ul>
<p>判断是否使用部分复制条件：如果从库提供的master_replid与master的replid不同，且与master的replid2不同，或同步速度快于master； 就必须进行全量复制，否则执行部分复制。</p>
<p>以下常见的主从切换都可以使用部分复制：</p>
<ol>
<li>一主一从发生切换，A-&gt;B 切换变成 B-&gt;A ;</li>
<li>一主多从发生切换，兄弟节点变成父子节点时；</li>
<li>级别复制发生切换， A-&gt;B-&gt;C 切换变成 B-&gt;C-&gt;A；</li>
</ol>
<h2 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h2><p>&emsp;&emsp;在命令传播阶段，除了发送写命令，主从节点还维持着心跳机制：PING和REPLCONF ACK。心跳机制对于主从复制的超时判断、数据安全等有作用。</p>
<h3 id="主-gt-从：PING"><a href="#主-gt-从：PING" class="headerlink" title="主-&gt;从：PING"></a>主-&gt;从：PING</h3><p>&emsp;&emsp;每隔指定的时间，<strong>主节点会向从节点发送PING命令</strong>，这个PING命令的作用，主要是为了让从节点进行超时判断。</p>
<p>&emsp;&emsp;PING发送的频率由<strong>repl-ping-slave-period</strong>参数控制，单位是秒，默认值是10s。</p>
<h3 id="从-gt-主：REPLCONF-ACK"><a href="#从-gt-主：REPLCONF-ACK" class="headerlink" title="从-&gt;主：REPLCONF ACK"></a>从-&gt;主：REPLCONF ACK</h3><p>&emsp;&emsp;在命令传播阶段，<strong>从节点会向主节点发送REPLCONF ACK命令，</strong>频率是每秒1次；命令格式为：REPLCONF ACK {offset}，其中offset指从节点保存的复制偏移量。REPLCONF ACK命令的作用包括：</p>
<ul>
<li>实时监测主从节点网络状态：该命令会被主节点用于复制超时的判断。此外，在主节点中使用info Replication，可以看到其从节点的状态中的lag值，代表的是主节点上次收到该REPLCONF ACK命令的时间间隔，在正常情况下，该值应该是0或1<ul>
<li><code>shell redis-cli info replication |grep lag</code> </li>
</ul>
</li>
<li>检测命令丢失：从节点发送了自身的offset，主节点会与自己的offset对比，如果从节点数据缺失（如网络丢包），主节点会推送缺失的数据（这里也会利用复制积压缓冲区）。<strong>注意,offset和复制积压缓冲区，不仅可以用于部分复制，也可以用于处理命令丢失等情形；区别在于前者是在断线重连后进行的，而后者是在主从节点没有断线的情况下进行的。</strong></li>
<li>辅助保证从节点的数量和延迟：Redis主节点中使用min-slaves-to-write和min-slaves-max-lag参数，来保证主节点在不安全的情况下不会执行写命令；所谓不安全，是指从节点数量太少，或延迟过高。例如min-slaves-to-write和min-slaves-max-lag分别是3和10，含义是如果从节点数量小于3个，或所有从节点的延迟值都大于10s，则主节点拒绝执行写命令。而这里从节点延迟值的获取，就是通过主节点接收到REPLCONF ACK命令的时间来判断的，即前面所说的info Replication中的lag值。</li>
</ul>
<h2 id="问题与优化"><a href="#问题与优化" class="headerlink" title="问题与优化"></a>问题与优化</h2><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>&emsp;&emsp;在主从复制基础上实现的读写分离，可以实现Redis的读负载均衡：由主节点提供写服务，由一个或多个从节点提供读服务（多个从节点既可以提高数据冗余程度，也可以最大化读负载能力）；在读负载较大的应用场景下，可以大大提高Redis服务器的并发量。</p>
<h4 id="（1）延迟与不一致问题"><a href="#（1）延迟与不一致问题" class="headerlink" title="（1）延迟与不一致问题"></a>（1）延迟与不一致问题</h4><p>&emsp;&emsp;由于主从复制的命令传播是异步的，延迟与数据的不一致不可避免。如果应用对数据不一致的接受程度程度较低，可能的优化措施包括：优化主从节点之间的网络环境（如在同机房部署）；监控主从节点延迟（通过offset）判断，如果从节点延迟过大，通知应用不再通过该从节点读取数据；使用集群同时扩展写负载和读负载等。</p>
<p>&emsp;&emsp;在命令传播阶段以外的其他情况下，从节点的数据不一致可能更加严重，例如连接在数据同步阶段，或从节点失去与主节点的连接时等。从节点的slave-serve-stale-data参数便与此有关：它控制这种情况下从节点的表现；如果为yes（默认值），则从节点仍能够响应客户端的命令，如果为no，则从节点只能响应info、slaveof等少数命令。该参数的设置与应用对数据一致性的要求有关；如果对数据一致性要求很高，则应设置为no。</p>
<h4 id="（2）数据过期问题"><a href="#（2）数据过期问题" class="headerlink" title="（2）数据过期问题"></a>（2）数据过期问题</h4><p>&emsp;&emsp;在单机版Redis中，存在两种删除策略：</p>
<ul>
<li>惰性删除：服务器不会主动删除数据，只有当客户端查询某个数据时，服务器判断该数据是否过期，如果过期则删除。</li>
<li>定期删除：服务器执行定时任务删除过期数据，但是考虑到内存和CPU的折中（删除会释放内存，但是频繁的删除操作对CPU不友好），该删除的频率和执行时间都受到了限制。</li>
</ul>
<p>&emsp;&emsp;在主从复制场景下，为了主从节点的数据一致性，从节点不会主动删除数据，而是由主节点控制从节点中过期数据的删除。由于主节点的惰性删除和定期删除策略，都不能保证主节点及时对过期数据执行删除操作，因此，当客户端通过Redis从节点读取数据时，很容易读取到已经过期的数据。</p>
<p>&emsp;&emsp;Redis 3.2中，从节点在读取数据时，增加了对数据是否过期的判断：如果该数据已过期，则不返回给客户端；将Redis升级到3.2可以解决数据过期问题。</p>
<h4 id="（3）故障切换问题"><a href="#（3）故障切换问题" class="headerlink" title="（3）故障切换问题"></a>（3）故障切换问题</h4><p>&emsp;&emsp;在没有使用哨兵的读写分离场景下，应用针对读和写分别连接不同的Redis节点；当主节点或从节点出现问题而发生更改时，需要及时修改应用程序读写Redis数据的连接；连接的切换可以手动进行，或者自己写监控程序进行切换，但前者响应慢、容易出错，后者实现复杂，成本都不算低。</p>
<h4 id="（4）总结"><a href="#（4）总结" class="headerlink" title="（4）总结"></a>（4）总结</h4><p>&emsp;&emsp;在使用读写分离之前，可以考虑其他方法增加Redis的读负载能力：如尽量优化主节点（减少慢查询、减少持久化等其他情况带来的阻塞等）提高负载能力；使用Redis集群同时提高读负载能力和写负载能力等。如果使用读写分离，可以使用哨兵，使主从节点的故障切换尽可能自动化，并减少对应用程序的侵入。</p>
<h3 id="复制超时"><a href="#复制超时" class="headerlink" title="复制超时"></a>复制超时</h3><h4 id="超时判断意义"><a href="#超时判断意义" class="headerlink" title="超时判断意义"></a>超时判断意义</h4><p>在复制连接建立过程中及之后，主从节点都有机制判断连接是否超时，其意义在于：</p>
<p>（1）如果主节点判断连接超时，其会释放相应从节点的连接，从而释放各种资源，否则无效的从节点仍会占用主节点的各种资源（输出缓冲区、带宽、连接等）；此外连接超时的判断可以让主节点更准确的知道当前有效从节点的个数，有助于保证数据安全（配合前面讲到的min-slaves-to-write等参数）。</p>
<p>（2）如果从节点判断连接超时，则可以及时重新建立连接，避免与主节点数据长期的不一致。</p>
<h4 id="判断机制"><a href="#判断机制" class="headerlink" title="判断机制"></a>判断机制</h4><p>主从复制超时判断的核心，在于repl-timeout参数，该参数规定了超时时间的阈值（默认60s），对于主节点和从节点同时有效；主从节点触发超时的条件分别如下：</p>
<p>（1）主节点：每秒1次调用复制定时函数replicationCron()，在其中判断当前时间距离上次收到各个从节点REPLCONF ACK的时间，是否超过了repl-timeout值，如果超过了则释放相应从节点的连接。</p>
<p>（2）从节点：从节点对超时的判断同样是在复制定时函数中判断，基本逻辑是：</p>
<ul>
<li>如果当前处于连接建立阶段，且距离上次收到主节点的信息的时间已超过repl-timeout，则释放与主节点的连接；</li>
<li>如果当前处于数据同步阶段，且收到主节点的RDB文件的时间超时，则停止数据同步，释放连接；</li>
<li>如果当前处于命令传播阶段，且距离上次收到主节点的PING命令或数据的时间已超过repl-timeout值，则释放与主节点的连接。</li>
</ul>
<h4 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h4><ul>
<li>数据同步阶段：在主从节点进行全量复制bgsave时，主节点需要首先fork子进程将当前数据保存到RDB文件中，然后再将RDB文件通过网络传输到从节点。如果RDB文件过大，主节点在fork子进程+保存RDB文件时耗时过多，可能会导致从节点长时间收不到数据而触发超时；此时从节点会重连主节点，然后再次全量复制，再次超时，再次重连……这是个悲伤的循环。为了避免这种情况的发生，除了注意Redis单机数据量不要过大，另一方面就是适当增大repl-timeout值，具体的大小可以根据bgsave耗时来调整。</li>
<li>命令传播阶段：如前所述，在该阶段主节点会向从节点发送PING命令，频率由repl-ping-slave-period控制；该参数应明显小于repl-timeout值(后者至少是前者的几倍)。否则，如果两个参数相等或接近，网络抖动导致个别PING命令丢失，此时恰巧主节点也没有向从节点发送数据，则从节点很容易判断超时。</li>
<li>慢查询导致的阻塞：如果主节点或从节点执行了一些慢查询（如keys *或者对大数据的hgetall等），导致服务器阻塞；阻塞期间无法响应复制连接中对方节点的请求，可能导致复制超时。</li>
</ul>
<h3 id="复制中断"><a href="#复制中断" class="headerlink" title="复制中断"></a>复制中断</h3><p>&emsp;&emsp;在全量复制阶段，主节点会将执行的写命令放到复制缓冲区中，该缓冲区存放的数据包括了以下几个时间段内主节点执行的写命令：</p>
<ul>
<li>bgsave生成RDB文件</li>
<li>RDB文件由主节点发往从节点</li>
<li>从节点清空老数据并载入RDB文件中的数据。</li>
</ul>
<p>&emsp;&emsp;当主节点数据量较大，或者主从节点之间网络延迟较大时，可能导致该缓冲区的大小超过了限制，此时主节点会断开与从节点之间的连接；这种情况可能引起全量复制-&gt;复制缓冲区溢出导致连接中断-&gt;重连-&gt;全量复制-&gt;复制缓冲区溢出导致连接中断……的循环。</p>
<p>&emsp;&emsp;复制缓冲区的大小由client-output-buffer-limit slave {hard limit} {soft limit} {soft seconds}配置，默认值为client-output-buffer-limit slave 256MB 64MB 60，其含义是：如果buffer大于256MB，或者连续60s大于64MB，则主节点会断开与该从节点的连接。该参数是可以通过config set命令动态配置的（即不重启Redis也可以生效）。</p>
<p><strong>需要注意的是，复制缓冲区是客户端输出缓冲区的一种，主节点会为每一个从节点分别分配复制缓冲区；而复制积压缓冲区则是一个主节点只有一个，无论它有多少个从节点。</strong></p>
<h3 id="复制选择与优化"><a href="#复制选择与优化" class="headerlink" title="复制选择与优化"></a>复制选择与优化</h3><h4 id="（1）第一次建立复制"><a href="#（1）第一次建立复制" class="headerlink" title="（1）第一次建立复制"></a>（1）第一次建立复制</h4><p>&emsp;&emsp;此时全量复制不可避免，但仍有几点需要注意：</p>
<ul>
<li>如果主节点的数据量较大，应该尽量避开流量的高峰期，避免造成阻塞；</li>
<li>如果有多个从节点需要建立对主节点的复制，可以考虑将几个从节点错开，避免主节点带宽占用过大。此外，如果从节点过多，也可以调整主从复制的拓扑结构，由一主多从结构变为树状结构（中间的节点既是其主节点的从节点，也是其从节点的主节点）；但使用树状结构应该谨慎：虽然主节点的直接从节点减少，降低了主节点的负担，但是多层从节点的延迟增大，数据一致性变差；且结构复杂，维护相当困难。</li>
</ul>
<h4 id="（2）主节点重启"><a href="#（2）主节点重启" class="headerlink" title="（2）主节点重启"></a>（2）主节点重启</h4><p>&emsp;&emsp;主节点重启可以分为两种情况来讨论，一种是故障导致宕机，另一种则是有计划的重启。</p>
<p><strong>主节点宕机</strong></p>
<p>&emsp;&emsp;主节点宕机重启后，runid会发生变化，因此不能进行部分复制，只能全量复制。</p>
<p>&emsp;&emsp;实际上在主节点宕机的情况下，应进行故障转移处理，将其中的一个从节点升级为主节点，其他从节点从新的主节点进行复制；且故障转移应尽量的自动化，后面文章将要介绍的哨兵便可以进行自动的故障转移。</p>
<p><strong>安全重启：debug reload</strong></p>
<p>&emsp;&emsp;在一些场景下，可能希望对主节点进行重启，例如主节点内存碎片率过高，或者希望调整一些只能在启动时调整的参数。如果使用普通的手段重启主节点，会使得runid发生变化，可能导致不必要的全量复制。</p>
<p>&emsp;&emsp;为了解决这个问题，Redis提供了debug reload的重启方式：<strong>重启后，主节点的runid和offset都不受影响，</strong>避免了全量复制。</p>
<p>&emsp;&emsp;但debug reload是一柄双刃剑：它会清空当前内存中的数据，重新从RDB文件中加载，这个过程会导致主节点的阻塞，因此也需要谨慎。</p>
<h4 id="（3）从节点重启"><a href="#（3）从节点重启" class="headerlink" title="（3）从节点重启"></a>（3）从节点重启</h4><p>&emsp;&emsp;从节点宕机重启后，其保存的主节点的runid会丢失，因此即使再次执行slaveof，也无法进行部分复制。</p>
<h4 id="（4）网络中断"><a href="#（4）网络中断" class="headerlink" title="（4）网络中断"></a>（4）网络中断</h4><p>如果主从节点之间出现网络问题，造成短时间内网络中断，可以分为多种情况讨论。</p>
<p>第一种情况：网络问题时间极为短暂，只造成了短暂的丢包，主从节点都没有判定超时（未触发repl-timeout）；此时只需要通过REPLCONF ACK来补充丢失的数据即可。</p>
<p>第二种情况：网络问题时间很长，主从节点判断超时（触发了repl-timeout），且丢失的数据过多，超过了复制积压缓冲区所能存储的范围；此时主从节点无法进行部分复制，只能进行全量复制。为了尽可能避免这种情况的发生，应该根据实际情况适当调整复制积压缓冲区的大小；此外及时发现并修复网络中断，也可以减少全量复制。</p>
<p>第三种情况：介于前述两种情况之间，主从节点判断超时，且丢失的数据仍然都在复制积压缓冲区中；此时主从节点可以进行部分复制。</p>
<h3 id="单机限制"><a href="#单机限制" class="headerlink" title="单机限制"></a>单机限制</h3><ul>
<li><p>切主：当主节点宕机时，一种常见的容灾策略是将其中一个从节点提升为主节点，并将其他从节点挂载到新的主节点上，此时这些从节点只能进行全量复制；如果Redis单机内存达到10GB，一个从节点的同步时间在几分钟的级别；如果从节点较多，恢复的速度会更慢。如果系统的读负载很高，而这段时间从节点无法提供服务，会对系统造成很大的压力。</p>
</li>
<li><p>从库扩容：如果访问量突然增大，此时希望增加从节点分担读负载，如果数据量过大，从节点同步太慢，难以及时应对访问量的暴增。</p>
</li>
<li><p>缓冲区溢出：（1）和（2）都是从节点可以正常同步的情形（虽然慢），但是如果数据量过大，导致全量复制阶段主节点的复制缓冲区溢出，从而导致复制中断，则主从节点的数据同步会全量复制-&gt;复制缓冲区溢出导致复制中断-&gt;重连-&gt;全量复制-&gt;复制缓冲区溢出导致复制中断……的循环。</p>
</li>
<li><p>超时：如果数据量过大，全量复制阶段主节点fork+保存RDB文件耗时过大，从节点长时间接收不到数据触发超时，主从节点的数据同步同样可能陷入全量复制-&gt;超时导致复制中断-&gt;重连-&gt;全量复制-&gt;超时导致复制中断……的循环。</p>
</li>
</ul>
<p>此外，主节点单机内存除了绝对量不能太大，其占用主机内存的比例也不应过大：最好只使用50%-65%的内存，留下30%-45%的内存用于执行bgsave命令和创建复制缓冲区等。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="开启redis远程连接"><a href="#开启redis远程连接" class="headerlink" title="开启redis远程连接"></a>开启redis远程连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line">protected-mode no</span><br></pre></td></tr></table></figure>
<p>要是需要绑定特定的IP需要通过防火墙来实现，配置文件中的bind不能实现次功能，或许那个大佬实现了可以告诉我一下</p>
<h3 id="master-192-168-56-70-6379"><a href="#master-192-168-56-70-6379" class="headerlink" title="master-192.168.56.70:6379"></a>master-192.168.56.70:6379</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=192.168.56.71,port=6379,state=online,offset=1508,lag=0</span><br><span class="line">master_replid:5ae9347725c5c650d786e3b48b0f205e8041187a</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:1508</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:1508</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info server</span><br><span class="line"># Server</span><br><span class="line">redis_version:6.0.6</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:954aa123689fad0a</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 4.18.0-240.el8.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:8.3.1</span><br><span class="line">process_id:1580583</span><br><span class="line">run_id:56e7333a47355e24b4e78f99b949b4be6c2600f2</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:400</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:7401241</span><br><span class="line">executable:/root/redis-server</span><br><span class="line">config_file:/root/data/redis-6.0.6/config/6379.conf</span><br></pre></td></tr></table></figure>
<h3 id="salve-192-168-56-71-6379"><a href="#salve-192-168-56-71-6379" class="headerlink" title="salve-192.168.56.71:6379"></a>salve-192.168.56.71:6379</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; slaveof 192.168.56.70 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config rewrite</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;v1&quot; // 这个设置是在主库上设置的，我们在从库上已经可以看到了</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.56.70</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:6</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:1508</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:5ae9347725c5c650d786e3b48b0f205e8041187a</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:1508</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:1508</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info server</span><br><span class="line"># Server</span><br><span class="line">redis_version:6.0.12</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:75b3e099670a8ed0</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 4.18.0-240.el8.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:8.3.1</span><br><span class="line">process_id:35903</span><br><span class="line">run_id:033f5a69a7a10f69e0e78408bb3da839cc20f889</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:473</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:8729115</span><br><span class="line">executable:/root/redis-server</span><br><span class="line">config_file:/root/data/redis-6.0.12/config/6379.conf</span><br><span class="line">io_threads_active:0</span><br></pre></td></tr></table></figure>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1580583:M 10 Apr 2021 08:14:36.297 * Replica 192.168.56.71:6379 asks for synchronization</span><br><span class="line">1580583:M 10 Apr 2021 08:14:36.297 * Partial resynchronization not accepted: Replication ID mismatch (Replica asked for &#x27;b69d623bc648420adff4f305362117e65f8d8f08&#x27;, my replication IDs are &#x27;f65cac76237a191f0ea6718b16efb1e1c0705478&#x27; and &#x27;0000000000000000000000000000000000000000&#x27;)</span><br><span class="line">1580583:M 10 Apr 2021 08:14:36.297 * Replication backlog created, my new replication IDs are &#x27;5ae9347725c5c650d786e3b48b0f205e8041187a&#x27; and &#x27;0000000000000000000000000000000000000000&#x27;</span><br><span class="line">1580583:M 10 Apr 2021 08:14:36.297 * Starting BGSAVE for SYNC with target: disk</span><br><span class="line">1580583:M 10 Apr 2021 08:14:36.297 * Background saving started by pid 1580615</span><br><span class="line">1580615:C 10 Apr 2021 08:14:36.299 * DB saved on disk</span><br><span class="line">1580615:C 10 Apr 2021 08:14:36.299 * RDB: 0 MB of memory used by copy-on-write</span><br><span class="line">1580583:M 10 Apr 2021 08:14:36.357 * Background saving terminated with success</span><br><span class="line">1580583:M 10 Apr 2021 08:14:36.357 * Synchronization with replica 192.168.56.71:6379 succeeded</span><br></pre></td></tr></table></figure>
<h4 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">35903:S 25 Apr 2021 17:05:23.860 * Before turning into a replica, using my own master parameters to synthesize a cached master: I may be able to synchronize with the new master with just a partial transfer.</span><br><span class="line">35903:S 25 Apr 2021 17:05:23.860 * REPLICAOF 192.168.56.70:6379 enabled (user request from &#x27;id=6 addr=127.0.0.1:33766 fd=8 name= age=11 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=47 qbuf-free=32721 argv-mem=24 obl=0 oll=0 omem=0 tot-mem=49824 events=r cmd=slaveof user=default&#x27;)</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.401 * Connecting to MASTER 192.168.56.70:6379</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.401 * MASTER &lt;-&gt; REPLICA sync started</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.401 * Non blocking connect for SYNC fired the event.</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.402 * Master replied to PING, replication can continue...</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.402 * Trying a partial resynchronization (request b69d623bc648420adff4f305362117e65f8d8f08:1).</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.403 * Full resync from master: 5ae9347725c5c650d786e3b48b0f205e8041187a:0</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.403 * Discarding previously cached master state.</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.463 * MASTER &lt;-&gt; REPLICA sync: receiving 175 bytes from master to disk</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.463 * MASTER &lt;-&gt; REPLICA sync: Flushing old data</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.463 * MASTER &lt;-&gt; REPLICA sync: Loading DB in memory</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.464 * Loading RDB produced by version 6.0.6</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.464 * RDB age 1327848 seconds</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.464 * RDB memory usage when created 1.85 Mb</span><br><span class="line">35903:S 25 Apr 2021 17:05:24.464 * MASTER &lt;-&gt; REPLICA sync: Finished with success</span><br><span class="line">35903:S 25 Apr 2021 17:10:17.293 # CONFIG REWRITE executed with success.</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
</search>
